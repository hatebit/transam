{"version":3,"file":"js/732.babylonBundle.js","mappings":"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","sources":["webpack://pro-racer/./assets/concrete.png","webpack://pro-racer/./src/scenes/boxes.ts","webpack://pro-racer/./assets/sand.jpg","webpack://pro-racer/./src/scenes/world.ts"],"sourcesContent":["export default __webpack_public_path__ + \"03713868bab7dd2e96995060bf2ae0f5.png\";","import { Material } from \"@babylonjs/core/Materials/material\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\nimport { Color3, Vector3 } from \"@babylonjs/core/Maths/math\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\";\nimport { PhysicsImpostor } from \"@babylonjs/core/Physics/physicsImpostor\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport {Texture} from \"@babylonjs/core/Materials/Textures/texture\";\n\nimport concreteTextureUrl from \"../../assets/concrete.png\";\n\nexport class Boxes {\n    blueMaterial: StandardMaterial;\n    concreteMaterial: StandardMaterial;\n    scene: Scene;\n\n    constructor(scene: Scene) {\n        this.scene = scene;\n\n        this.blueMaterial = new StandardMaterial(\"BlueMaterial\", scene);\n        this.blueMaterial.diffuseColor = new Color3(0.5,0.4,0.8);\n        this.blueMaterial.emissiveColor = new Color3(0.5,0.4,0.8);\n        \n        this.concreteMaterial = new StandardMaterial(\"concrete material\", scene);\n        this.concreteMaterial.diffuseTexture = new Texture(concreteTextureUrl, scene);\n    }\n\n    public baseBoxes() : void {\n        this.createBox(new Vector3(4,1,12),new Vector3(0,0,25),new Vector3(-Math.PI/8,0,0),0);\n        this.createBox(new Vector3(4,1,12),new Vector3(25,0,0),new Vector3(-Math.PI/8,Math.PI/2,0),0);\n        this.createBox(new Vector3(4,1,12),new Vector3(0,0,-25),new Vector3(Math.PI/8,0,0),0);\n        this.createBox(new Vector3(4,1,12),new Vector3(-25,0,0),new Vector3(Math.PI/8,Math.PI/2,0),0);\n    }\n\n    public randomBoxes() : void {\n        const s = new Vector3();\n        const p = new Vector3();\n        const r = new Vector3();\n        for(let i=0;i<20;i++){\n            const m = Math.random()*300-150+5;\n            const m3 = Math.random()*300-150+5;\n            const m2 = Math.random()*10;\n            s.set(m2,m2,m2);\n            p.set(m3,0,m);\n            r.set(m,m,m);\n            this.createBox(s,p,r,0);\n        }\n    \n        for(let i=0;i<30;i++){\n            const m = Math.random()*300-150+5;\n            const m3 = Math.random()*300-150+5;\n            const m2 = Math.random()*3;\n            s.set(m2,m2,m2);\n            p.set(m3,0,m);\n            r.set(m,m,m);\n            this.createBox(s,p,r,5);\n        }\n    }\n\n    private createBox(size: Vector3, position: Vector3, rotation: Vector3, mass: number) : Mesh {\n        const box = MeshBuilder.CreateBox(\"box\", { width: size.x, depth: size.z, height: size.y }, this.scene);\n        box.position.set(position.x,position.y,position.z);\n        box.rotation.set(rotation.x,rotation.y,rotation.z);\n        if(!mass){\n            mass = 0;\n            box.material = this.concreteMaterial\n        } else {\n            box.position.y += 5;\n            box.material = this.blueMaterial;\n    \n        }\n        box.physicsImpostor = new PhysicsImpostor(box, PhysicsImpostor.BoxImpostor, { mass: mass, friction: 0.5, restitution: 0.7 }, this.scene);\n        return box;\n    }\n    \n    public cellBoxes(cellSize: number, cell: Mesh) : void {\n        const halfCellSize = cellSize/2;\n        const s = new Vector3();\n        const p = new Vector3();\n        const r = new Vector3();\n        for(let i=0;i<20;i++){\n            const m = Math.random()*cellSize-halfCellSize;\n            const m3 = Math.random()*cellSize-halfCellSize;\n            const m2 = Math.random()*10;\n            s.set(m2,m2,m2);\n            p.set(m3,0,m);\n            r.set(m,m,m);\n            const box = this.createBox(s,p,r,0);\n            box.parent = cell;\n        }\n    }\n\n    private createCellBox(size: Vector3, position: Vector3, rotation: Vector3, mass: number) : Mesh {\n        const box = MeshBuilder.CreateBox(\"box\", { width: size.x, depth: size.z, height: size.y });\n        box.position.set(position.x,position.y,position.z);\n        box.rotation.set(rotation.x,rotation.y,rotation.z);\n        if(!mass){\n            mass = 0;\n            box.material = this.concreteMaterial\n        } else {\n            box.position.y += 5;\n            box.material = this.blueMaterial;\n\n        }\n        box.physicsImpostor = new PhysicsImpostor(box, PhysicsImpostor.BoxImpostor, { mass: mass, friction: 0.5, restitution: 0.7 }, this.scene);\n        return box;\n    }\n\n}\n\n","export default __webpack_public_path__ + \"c8f55e9ef9e4d3c0a223a3adaad7ad23.jpg\";","import {Scene} from \"@babylonjs/core/scene\";\nimport {MeshBuilder} from \"@babylonjs/core/Meshes/meshBuilder\";\nimport {PhysicsImpostor} from \"@babylonjs/core/Physics/physicsImpostor\";\nimport * as GRID from \"@babylonjs/materials/grid\";\nimport {GridMaterial} from \"@babylonjs/materials/grid\";\nimport {GroundMesh} from \"@babylonjs/core\";\n\nimport sandTextureUrl from \"../../assets/sand.jpg\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\nimport {StandardMaterial} from \"@babylonjs/core/Materials/standardMaterial\";\nimport {Boxes} from \"./boxes\";\nimport {Color3, Color4} from \"@babylonjs/core/Maths/math\";\n\nexport const DEFAULT_CELL_SIZE = 100;\n\nexport class WorldMap {\n    //private material: GridMaterial;\n    private material: StandardMaterial;\n    \n    private debugMaterial: StandardMaterial;\n\n    private cells = new Map();\n    private scene: Scene;\n\n    constructor(scene: Scene) {\n        this.scene = scene;\n\n        //this.material = new GRID.GridMaterial(\"groundMaterial\", scene);\n        this.material = new StandardMaterial(\"ground material\", scene);\n        const texture = new Texture(sandTextureUrl, scene);\n        this.material.diffuseTexture = texture;\n        texture.uScale = 10;\n        texture.vScale = 10;\n\n        scene.fogMode = Scene.FOGMODE_LINEAR;\n        scene.fogStart = 20.0;\n        scene.fogEnd = 120.0;\n        scene.fogColor = new Color3(0.9, 0.9, 0.85);\n        scene.fogDensity = 0.03;\n        scene.clearColor = new Color4(0.9, 0.9, 0.85, 1.0);\n\n\n\n        this.debugMaterial = new StandardMaterial(\"BlueMaterial\", scene);\n        this.debugMaterial.diffuseColor = new Color3(0.5,0.4,0.8);\n        this.debugMaterial.emissiveColor = new Color3(0.5,0.4,0.8);\n\n\n    }\n\n    public update(x: number, z: number): void {\n        const indexes = [\n            [x + 1, z + 1],\n            [x + 1, z],\n            [x + 1, z - 1],\n            [x, z + 1],\n            [x, z],\n            [x, z - 1],\n            [x - 1, z + 1],\n            [x - 1, z],\n            [x - 1, z - 1],\n        ];\n        // const indexes = [ [x, z]];\n        for (const index of indexes) {\n            const xx = index[0]\n            const zz = index[1]\n            if (!this.cells.has(`${xx},${zz}`)) {\n                const cell  = this.createCell(this.scene, xx, zz);\n                this.cells.set(`${xx},${zz}`, cell);\n                console.log(`Created cell ${xx},${zz}`);\n                return; // only create one cell per update\n            }\n        }\n        //console.log(this.cells.size);\n        for (const key of this.cells.keys()) {\n            const [xs, zs] = key.split(\",\");\n            const xx = parseInt(xs);\n            const zz = parseInt(zs);\n            if (xx < (x - 1) || xx > (x + 1) || zz < (z - 1) || zz > (z + 1)) {\n            // if (xx != x || zz != z) {\n                const cell = this.cells.get(key);\n                if (cell) {\n                    this.scene.removeMesh(cell);\n                    cell.dispose();\n                    this.cells.delete(key);\n                }\n            }\n        }\n\n    }\n\n    private createCell(scene: Scene, x: number, z: number): GroundMesh {\n        const ground = MeshBuilder.CreateGround(\"ground\", {\n            width: DEFAULT_CELL_SIZE,\n            height: DEFAULT_CELL_SIZE,\n            subdivisions: 2\n        }, scene);\n\n        ground.position.set(x * DEFAULT_CELL_SIZE, 0, z * DEFAULT_CELL_SIZE);\n\n        ground.physicsImpostor = new PhysicsImpostor(ground, PhysicsImpostor.BoxImpostor, {\n            mass: 0,\n            friction: 0.5,\n            restitution: 0.7\n        }, scene);\n        \n        const halfCellSize = DEFAULT_CELL_SIZE/2;\n\n        // START: Dev boxes\n        const box = MeshBuilder.CreateBox(\"box\", { width: 1, depth: 1, height: 4 }, this.scene);\n        box.material = this.debugMaterial;\n        ground.addChild(box);\n        const box0 = MeshBuilder.CreateBox(\"box\", { width: 1, depth: 1, height: 8 }, this.scene);\n        box0.material = this.debugMaterial;\n        box0.position.set(x * DEFAULT_CELL_SIZE + halfCellSize, 4, z * DEFAULT_CELL_SIZE + halfCellSize);\n        ground.addChild(box0);\n        const box1 = MeshBuilder.CreateBox(\"box\", { width: 1, depth: 1, height: 8 }, this.scene);\n        box1.material = this.debugMaterial;\n        box1.position.set(x * DEFAULT_CELL_SIZE - halfCellSize, 4, z * DEFAULT_CELL_SIZE - halfCellSize);\n        ground.addChild(box1);\n        // END: Dev boxes\n        \n        new Boxes(this.scene).cellBoxes(DEFAULT_CELL_SIZE, ground);\n\n        ground.material = this.material;\n\n        return ground;\n    }\n\n}\n"],"names":["Boxes","constructor","scene","this","blueMaterial","diffuseColor","emissiveColor","concreteMaterial","diffuseTexture","concrete","baseBoxes","createBox","Math","PI","randomBoxes","s","p","r","i","m","random","m3","m2","set","size","position","rotation","mass","box","width","x","depth","z","height","y","material","physicsImpostor","friction","restitution","cellBoxes","cellSize","cell","halfCellSize","parent","createCellBox","DEFAULT_CELL_SIZE","WorldMap","cells","Map","texture","sand","uScale","vScale","fogMode","fogStart","fogEnd","fogColor","fogDensity","clearColor","debugMaterial","update","indexes","index","xx","zz","has","createCell","console","log","key","keys","xs","zs","split","parseInt","get","removeMesh","dispose","delete","ground","subdivisions","addChild","box0","box1"],"sourceRoot":""}