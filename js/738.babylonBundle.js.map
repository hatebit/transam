{"version":3,"file":"js/738.babylonBundle.js","mappings":"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","sources":["webpack://trans-america/./src/scenes/controls.ts"],"sourcesContent":["import { Axis } from \"@babylonjs/core/Maths/math\";\nimport { Car } from \"./car\";\nimport {GameCamera} from \"./camera\";\n\nconst actions = new Map<string, boolean>([\n    [\"acceleration\", false],\n    [\"braking\", false],\n    [\"right\", false],\n    [\"left\", false],\n    [\"reset\", false],\n    [\"stop\", false]\n]);\n\nconst keysActions = new Map<string, string>([\n    [\"KeyW\",'acceleration'],\n    [\"KeyS\",'braking'],\n    [\"KeyA\",'left'],\n    [\"KeyD\",'right'],\n    [\"KeyR\",'reset'],\n    [\"Space\", \"stop\"]\n]);\n\nexport class Controls {\n\n    car: Car;\n    camera: GameCamera;\n\n    constructor(car: Car, camera: GameCamera) {\n        this.car = car;\n        this.camera = camera;\n        window.addEventListener( 'keydown', this.keydown);\n        window.addEventListener( 'keyup', this.keyup);\n    }\n\n    update() {\n        if(this.car.vehicleReady){\n                  \n            const speed = this.car.vehicle.getCurrentSpeedKmHour();\n            const maxSteerVal = 0.2;\n            this.car.breakingForce = 0;\n            this.car.engineForce = 0;\n\n            if (actions.get(\"reset\")) {\n                //this.car.chassisMesh.position.set(0, 5, 0);\n                this.car.reset();\n                console.log(\"reset \" + this.car.chassisMesh.position);\n                this.camera.reset();\n                this.camera.lockedTarget = this.car.chassisMesh; //version 2.5 onwards\n            }\n            \n            if (actions.get(\"acceleration\")){\n                if (speed < -1){\n                    this.car.breakingForce = this.car.maxBreakingForce;\n                }else {\n                    this.car.engineForce = this.car.maxEngineForce;\n                }\n                    \n            } else if (actions.get(\"braking\")){\n                if (speed > 1){\n                    this.car.breakingForce = this.car.maxBreakingForce;\n                }else {\n                    this.car.engineForce = -this.car.maxEngineForce ;\n                }\n            } else if(actions.get(\"stop\")) {\n                if (speed > 1){\n                    this.car.breakingForce = this.car.maxBreakingForce*2;\n                } else if (speed < -1){\n                    this.car.engineForce = this.car.maxEngineForce*2;\n                }\n            }\n                    \n            if(actions.get(\"right\")){\n                if (this.car.vehicleSteering < this.car.steeringClamp){\n                    this.car.vehicleSteering += this.car.steeringIncrement;\n                }\n                    \n            } else if(actions.get(\"left\")){\n                if (this.car.vehicleSteering > -this.car.steeringClamp){\n                    this.car.vehicleSteering -= this.car.steeringIncrement;\n                }\n                    \n            } else {\n                this.car.vehicleSteering = 0;\n            }\n                    \n            this.car.vehicle.applyEngineForce(this.car.engineForce, this.car.FRONT_LEFT);\n            this.car.vehicle.applyEngineForce(this.car.engineForce, this.car.FRONT_RIGHT);\n                    \n            this.car.vehicle.setBrake(this.car.breakingForce / 2, this.car.FRONT_LEFT);\n            this.car.vehicle.setBrake(this.car.breakingForce / 2, this.car.FRONT_RIGHT);\n            this.car.vehicle.setBrake(this.car.breakingForce, this.car.BACK_LEFT);\n            this.car.vehicle.setBrake(this.car.breakingForce, this.car.BACK_RIGHT);\n                    \n            this.car.vehicle.setSteeringValue(this.car.vehicleSteering, this.car.FRONT_LEFT);\n            this.car.vehicle.setSteeringValue(this.car.vehicleSteering, this.car.FRONT_RIGHT);\n                    \n                    \n            let matrix, origin, rotation, i;\n            const n = this.car.vehicle.getNumWheels();\n            for (i = 0; i < n; i++) {\n                this.car.vehicle.updateWheelTransform(i, true);\n                matrix = this.car.vehicle.getWheelTransformWS(i);\n                origin = matrix.getOrigin();\n                rotation = matrix.getRotation();\n                this.car.wheelMeshes[i].position.set(origin.x(), origin.y(), origin.z());\n                this.car.wheelMeshes[i].rotationQuaternion?.set(rotation.x(), rotation.y(), rotation.z(), rotation.w());\n                this.car.wheelMeshes[i].rotate(Axis.Z, Math.PI/2);\n            }\n\n            matrix = this.car.vehicle.getChassisWorldTransform();\n            origin = matrix.getOrigin();\n            rotation = matrix.getRotation();\n            this.car.chassisMesh.position.set(origin.x(), origin.y(), origin.z());\n            this.car.chassisMesh.rotationQuaternion?.set(rotation.x(), rotation.y(), rotation.z(), rotation.w());\n            this.car.chassisMesh.rotate(Axis.X, Math.PI);\n                 \n        }\n    }\n\n    private keyup(e: KeyboardEvent) {\n        if(keysActions.get(e.code)) {\n            actions.set(keysActions.get(e.code)??\"\", false);\n            //e.preventDefault();\n            //e.stopPropagation();\n\n            //return false;\n        }\n    }\n\n    private keydown(e: KeyboardEvent) {\n        if(keysActions.get(e.code)) {\n            actions.set(keysActions.get(e.code)??\"\", true);\n            //e.preventDefault();\n            //e.stopPropagation();\n\n            //return false;\n        }\n    }\n\n\n}\n"],"names":["actions","Map","keysActions","Controls","constructor","car","camera","this","window","addEventListener","keydown","keyup","update","vehicleReady","speed","vehicle","getCurrentSpeedKmHour","matrix","origin","rotation","i","breakingForce","engineForce","get","reset","console","log","chassisMesh","position","lockedTarget","maxBreakingForce","maxEngineForce","vehicleSteering","steeringClamp","steeringIncrement","applyEngineForce","FRONT_LEFT","FRONT_RIGHT","setBrake","BACK_LEFT","BACK_RIGHT","setSteeringValue","n","getNumWheels","updateWheelTransform","getWheelTransformWS","getOrigin","getRotation","wheelMeshes","set","x","y","z","rotationQuaternion","w","rotate","Z","Math","PI","getChassisWorldTransform","X","e","code"],"sourceRoot":""}