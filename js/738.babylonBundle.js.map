{"version":3,"file":"js/738.babylonBundle.js","mappings":"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","sources":["webpack://trans-america/./src/scenes/controls.ts"],"sourcesContent":["import { Axis } from \"@babylonjs/core/Maths/math\";\nimport { Car } from \"./car\";\n\nconst actions = new Map<string, boolean>([\n    [\"acceleration\", false],\n    [\"braking\", false],\n    [\"right\", false],\n    [\"left\", false],\n    [\"reset\", false],\n    [\"stop\", false]\n]);\n\nconst keysActions = new Map<string, string>([\n    [\"KeyW\",'acceleration'],\n    [\"KeyS\",'braking'],\n    [\"KeyA\",'left'],\n    [\"KeyD\",'right'],\n    [\"KeyR\",'reset'],\n    [\"Space\", \"stop\"]\n]);\n\nexport class Controls {\n\n    car: Car;\n\n    constructor(car: Car) {\n        this.car = car;\n        window.addEventListener( 'keydown', this.keydown);\n        window.addEventListener( 'keyup', this.keyup);\n    }\n\n    update() {\n        if(this.car.vehicleReady){\n                  \n            const speed = this.car.vehicle.getCurrentSpeedKmHour();\n            const maxSteerVal = 0.2;\n            this.car.breakingForce = 0;\n            this.car.engineForce = 0;\n\n            if (actions.get(\"reset\")) {\n                //this.car.chassisMesh.position.set(0, 5, 0);\n                this.car.reset();\n                console.log(\"reset \" + this.car.chassisMesh.position);\n            }\n            \n            if (actions.get(\"acceleration\")){\n                if (speed < -1){\n                    this.car.breakingForce = this.car.maxBreakingForce;\n                }else {\n                    this.car.engineForce = this.car.maxEngineForce;\n                }\n                    \n            } else if (actions.get(\"braking\")){\n                if (speed > 1){\n                    this.car.breakingForce = this.car.maxBreakingForce;\n                }else {\n                    this.car.engineForce = -this.car.maxEngineForce ;\n                }\n            } else if(actions.get(\"stop\")) {\n                if (speed > 1){\n                    this.car.breakingForce = this.car.maxBreakingForce*2;\n                } else if (speed < -1){\n                    this.car.engineForce = this.car.maxEngineForce*2;\n                }\n            }\n                    \n            if(actions.get(\"right\")){\n                if (this.car.vehicleSteering < this.car.steeringClamp){\n                    this.car.vehicleSteering += this.car.steeringIncrement;\n                }\n                    \n            } else if(actions.get(\"left\")){\n                if (this.car.vehicleSteering > -this.car.steeringClamp){\n                    this.car.vehicleSteering -= this.car.steeringIncrement;\n                }\n                    \n            } else {\n                this.car.vehicleSteering = 0;\n            }\n                    \n            this.car.vehicle.applyEngineForce(this.car.engineForce, this.car.FRONT_LEFT);\n            this.car.vehicle.applyEngineForce(this.car.engineForce, this.car.FRONT_RIGHT);\n                    \n            this.car.vehicle.setBrake(this.car.breakingForce / 2, this.car.FRONT_LEFT);\n            this.car.vehicle.setBrake(this.car.breakingForce / 2, this.car.FRONT_RIGHT);\n            this.car.vehicle.setBrake(this.car.breakingForce, this.car.BACK_LEFT);\n            this.car.vehicle.setBrake(this.car.breakingForce, this.car.BACK_RIGHT);\n                    \n            this.car.vehicle.setSteeringValue(this.car.vehicleSteering, this.car.FRONT_LEFT);\n            this.car.vehicle.setSteeringValue(this.car.vehicleSteering, this.car.FRONT_RIGHT);\n                    \n                    \n            let matrix, origin, rotation, i;\n            const n = this.car.vehicle.getNumWheels();\n            for (i = 0; i < n; i++) {\n                this.car.vehicle.updateWheelTransform(i, true);\n                matrix = this.car.vehicle.getWheelTransformWS(i);\n                origin = matrix.getOrigin();\n                rotation = matrix.getRotation();\n                this.car.wheelMeshes[i].position.set(origin.x(), origin.y(), origin.z());\n                this.car.wheelMeshes[i].rotationQuaternion?.set(rotation.x(), rotation.y(), rotation.z(), rotation.w());\n                this.car.wheelMeshes[i].rotate(Axis.Z, Math.PI/2);\n            }\n\n            matrix = this.car.vehicle.getChassisWorldTransform();\n            origin = matrix.getOrigin();\n            rotation = matrix.getRotation();\n            this.car.chassisMesh.position.set(origin.x(), origin.y(), origin.z());\n            this.car.chassisMesh.rotationQuaternion?.set(rotation.x(), rotation.y(), rotation.z(), rotation.w());\n            this.car.chassisMesh.rotate(Axis.X, Math.PI);\n                 \n        }\n    }\n\n    private keyup(e: KeyboardEvent) {\n        if(keysActions.get(e.code)) {\n            actions.set(keysActions.get(e.code)??\"\", false);\n            //e.preventDefault();\n            //e.stopPropagation();\n\n            //return false;\n        }\n    }\n\n    private keydown(e: KeyboardEvent) {\n        if(keysActions.get(e.code)) {\n            actions.set(keysActions.get(e.code)??\"\", true);\n            //e.preventDefault();\n            //e.stopPropagation();\n\n            //return false;\n        }\n    }\n\n\n}\n"],"names":["actions","Map","keysActions","Controls","constructor","car","this","window","addEventListener","keydown","keyup","update","vehicleReady","speed","vehicle","getCurrentSpeedKmHour","matrix","origin","rotation","i","breakingForce","engineForce","get","reset","console","log","chassisMesh","position","maxBreakingForce","maxEngineForce","vehicleSteering","steeringClamp","steeringIncrement","applyEngineForce","FRONT_LEFT","FRONT_RIGHT","setBrake","BACK_LEFT","BACK_RIGHT","setSteeringValue","n","getNumWheels","updateWheelTransform","getWheelTransformWS","getOrigin","getRotation","wheelMeshes","set","x","y","z","rotationQuaternion","w","rotate","Z","Math","PI","getChassisWorldTransform","X","e","code"],"sourceRoot":""}