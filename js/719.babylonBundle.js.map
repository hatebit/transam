{"version":3,"file":"js/719.babylonBundle.js","mappings":"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","sources":["webpack://pro-racer/./src/externals/ammo.ts","webpack://pro-racer/./assets/concrete.png","webpack://pro-racer/./src/scenes/boxes.ts","webpack://pro-racer/./src/scenes/car.ts","webpack://pro-racer/./src/scenes/controls.ts","webpack://pro-racer/./src/scenes/proRacer.ts","webpack://pro-racer/./assets/sand.jpg","webpack://pro-racer/./src/scenes/world.ts"],"sourcesContent":["import * as Ammo from \"ammo.js\";\n\nexport let ammoModule: any;\nexport const ammoReadyPromise = new Promise((resolve) => {\n    new Ammo().then((res: unknown) => {\n        ammoModule = res;\n        resolve(res);\n    });\n});\n","export default __webpack_public_path__ + \"03713868bab7dd2e96995060bf2ae0f5.png\";","import { Material } from \"@babylonjs/core/Materials/material\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\nimport { Color3, Vector3 } from \"@babylonjs/core/Maths/math\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\";\nimport { PhysicsImpostor } from \"@babylonjs/core/Physics/physicsImpostor\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport {Texture} from \"@babylonjs/core/Materials/Textures/texture\";\n\nimport concreteTextureUrl from \"../../assets/concrete.png\";\n\nexport class Boxes {\n    blueMaterial: StandardMaterial;\n    concreteMaterial: StandardMaterial;\n    scene: Scene;\n\n    constructor(scene: Scene) {\n        this.scene = scene;\n\n        this.blueMaterial = new StandardMaterial(\"BlueMaterial\", scene);\n        this.blueMaterial.diffuseColor = new Color3(0.5,0.4,0.8);\n        this.blueMaterial.emissiveColor = new Color3(0.5,0.4,0.8);\n        \n        this.concreteMaterial = new StandardMaterial(\"concrete material\", scene);\n        this.concreteMaterial.diffuseTexture = new Texture(concreteTextureUrl, scene);\n    }\n\n    public baseBoxes() : void {\n        this.createBox(new Vector3(4,1,12),new Vector3(0,0,25),new Vector3(-Math.PI/8,0,0),0);\n        this.createBox(new Vector3(4,1,12),new Vector3(25,0,0),new Vector3(-Math.PI/8,Math.PI/2,0),0);\n        this.createBox(new Vector3(4,1,12),new Vector3(0,0,-25),new Vector3(Math.PI/8,0,0),0);\n        this.createBox(new Vector3(4,1,12),new Vector3(-25,0,0),new Vector3(Math.PI/8,Math.PI/2,0),0);\n    }\n\n    public randomBoxes() : void {\n        const s = new Vector3();\n        const p = new Vector3();\n        const r = new Vector3();\n        for(let i=0;i<20;i++){\n            const m = Math.random()*300-150+5;\n            const m3 = Math.random()*300-150+5;\n            const m2 = Math.random()*10;\n            s.set(m2,m2,m2);\n            p.set(m3,0,m);\n            r.set(m,m,m);\n            this.createBox(s,p,r,0);\n        }\n    \n        for(let i=0;i<30;i++){\n            const m = Math.random()*300-150+5;\n            const m3 = Math.random()*300-150+5;\n            const m2 = Math.random()*3;\n            s.set(m2,m2,m2);\n            p.set(m3,0,m);\n            r.set(m,m,m);\n            this.createBox(s,p,r,5);\n        }\n    }\n\n    private createBox(size: Vector3, position: Vector3, rotation: Vector3, mass: number) : Mesh {\n        const box = MeshBuilder.CreateBox(\"box\", { width: size.x, depth: size.z, height: size.y }, this.scene);\n        box.position.set(position.x,position.y,position.z);\n        box.rotation.set(rotation.x,rotation.y,rotation.z);\n        if(!mass){\n            mass = 0;\n            box.material = this.concreteMaterial\n        } else {\n            box.position.y += 5;\n            box.material = this.blueMaterial;\n    \n        }\n        box.physicsImpostor = new PhysicsImpostor(box, PhysicsImpostor.BoxImpostor, { mass: mass, friction: 0.5, restitution: 0.7 }, this.scene);\n        return box;\n    }\n    \n    public cellBoxes(cellSize: number, cell: Mesh) : void {\n        const halfCellSize = cellSize/2;\n        const s = new Vector3();\n        const p = new Vector3();\n        const r = new Vector3();\n        for(let i=0;i<20;i++){\n            const m = Math.random()*cellSize-halfCellSize;\n            const m3 = Math.random()*cellSize-halfCellSize;\n            const m2 = Math.random()*10;\n            s.set(m2,m2,m2);\n            p.set(m3,0,m);\n            r.set(m,m,m);\n            const box = this.createBox(s,p,r,0);\n            box.parent = cell;\n        }\n    }\n\n    private createCellBox(size: Vector3, position: Vector3, rotation: Vector3, mass: number) : Mesh {\n        const box = MeshBuilder.CreateBox(\"box\", { width: size.x, depth: size.z, height: size.y });\n        box.position.set(position.x,position.y,position.z);\n        box.rotation.set(rotation.x,rotation.y,rotation.z);\n        if(!mass){\n            mass = 0;\n            box.material = this.concreteMaterial\n        } else {\n            box.position.y += 5;\n            box.material = this.blueMaterial;\n\n        }\n        box.physicsImpostor = new PhysicsImpostor(box, PhysicsImpostor.BoxImpostor, { mass: mass, friction: 0.5, restitution: 0.7 }, this.scene);\n        return box;\n    }\n\n}\n\n","import {Mesh, StandardMaterial} from \"@babylonjs/core\";\nimport {Color3, Quaternion, Vector3} from \"@babylonjs/core/Maths/math\";\nimport {MeshBuilder} from \"@babylonjs/core/Meshes/meshBuilder\";\nimport {Scene} from \"@babylonjs/core/scene\";\n\nexport class Car {\n    ZERO_QUATERNION = new Quaternion();\n\n    FRONT_LEFT = 0;\n    FRONT_RIGHT = 1;\n    BACK_LEFT = 2;\n    BACK_RIGHT = 3;\n\n    chassisWidth = 1.8;\n    chassisHeight = .6;\n    chassisLength = 4;\n    massVehicle = 200;\n\n\n    wheelAxisPositionBack = -1;\n    wheelRadiusBack = .4;\n    wheelWidthBack = .3;\n    wheelHalfTrackBack = 1;\n    wheelAxisHeightBack = 0.4;\n\n    wheelAxisFrontPosition = 1.0;\n    wheelHalfTrackFront = 1;\n    wheelAxisHeightFront = 0.4;\n    wheelRadiusFront = .4;\n    wheelWidthFront = .3;\n\n    friction = 5;\n    suspension = {\n        stiffness: 10,\n        damping: 0.3,\n        compression: 4.4,\n        restLength: 0.6\n    }\n\n    rollInfluence = 0.0;\n\n    wheelDirectionCS0: number | undefined;\n    wheelAxleCS: number | undefined;\n\n    steeringIncrement = .01;\n    steeringClamp = 0.2;\n    maxEngineForce = 500;\n    maxBreakingForce = 10;\n    incEngine = 10.0;\n\n    vehicleSteering = 0;\n    engineForce = 0;\n    breakingForce = 0;\n\n    private scene: Scene;\n\n    greenMaterial: StandardMaterial;\n    blackMaterial: StandardMaterial;\n\n\n    tuning: any;\n    vehicle: any;\n    wheelMeshes: Mesh[] = [];\n    chassisMesh: Mesh;\n\n\n    vehicleReady = false;\n    \n    ammoModule: any;\n    body: any;\n\n    constructor(pos: Vector3, scene: Scene, ammoModule: any) {\n        this.greenMaterial = new StandardMaterial(\"GreenMaterial\", scene);\n        this.greenMaterial.diffuseColor = new Color3(0.5, 0.8, 0.5);\n        this.greenMaterial.emissiveColor = new Color3(0.5, 0.8, 0.5);\n\n        this.blackMaterial = new StandardMaterial(\"BlackMaterial\", scene);\n        this.blackMaterial.diffuseColor = new Color3(0.1, 0.1, 0.1);\n        this.blackMaterial.emissiveColor = new Color3(0.1, 0.1, 0.1);\n\n        this.scene = scene;\n        //Going Native\n        const physicsWorld = scene.getPhysicsEngine()?.getPhysicsPlugin().world;\n\n        this.wheelDirectionCS0 = new ammoModule.btVector3(0, -1, 0);\n        this.wheelAxleCS = new ammoModule.btVector3(-1, 0, 0);\n\n        const geometry = new ammoModule.btBoxShape(new ammoModule.btVector3(\n            this.chassisWidth * .5,\n            this.chassisHeight * .5,\n            this.chassisLength * .5));\n        const transform = new ammoModule.btTransform();\n        transform.setIdentity();\n        transform.setOrigin(new ammoModule.btVector3(0, 5, 0));\n        transform.setRotation(new ammoModule.btQuaternion(\n            this.ZERO_QUATERNION.x,\n            this.ZERO_QUATERNION.y,\n            this.ZERO_QUATERNION.z,\n            this.ZERO_QUATERNION.w));\n        const motionState = new ammoModule.btDefaultMotionState(transform);\n        const localInertia = new ammoModule.btVector3(0, 0, 0);\n        geometry.calculateLocalInertia(this.massVehicle, localInertia);\n\n\n        this.chassisMesh = this.createChassisMesh(this.chassisWidth, this.chassisHeight, this.chassisLength);\n\n\n        const massOffset = new ammoModule.btVector3(0, 0.4, 0);\n        const transform2 = new ammoModule.btTransform();\n        transform2.setIdentity();\n        transform2.setOrigin(massOffset);\n        const compound = new ammoModule.btCompoundShape();\n        compound.addChildShape(transform2, geometry);\n\n        const body = new ammoModule.btRigidBody(new ammoModule.btRigidBodyConstructionInfo(this.massVehicle, motionState, compound, localInertia));\n        body.setActivationState(4);\n\n        physicsWorld.addRigidBody(body);\n\n\n        this.tuning = new ammoModule.btVehicleTuning();\n        const rayCaster = new ammoModule.btDefaultVehicleRaycaster(physicsWorld);\n        this.vehicle = new ammoModule.btRaycastVehicle(this.tuning, body, rayCaster);\n        this.vehicle.setCoordinateSystem(0, 1, 2);\n        physicsWorld.addAction(this.vehicle);\n\n        const trans = this.vehicle.getChassisWorldTransform();\n\n        this.addWheel(true,\n            new ammoModule.btVector3(this.wheelHalfTrackFront, this.wheelAxisHeightFront, this.wheelAxisFrontPosition),\n            this.wheelRadiusFront, this.wheelWidthFront, this.FRONT_LEFT);\n        this.addWheel(true,\n            new ammoModule.btVector3(-this.wheelHalfTrackFront, this.wheelAxisHeightFront, this.wheelAxisFrontPosition),\n            this.wheelRadiusFront, this.wheelWidthFront, this.FRONT_RIGHT);\n        this.addWheel(false,\n            new ammoModule.btVector3(-this.wheelHalfTrackBack, this.wheelAxisHeightBack, this.wheelAxisPositionBack),\n            this.wheelRadiusBack, this.wheelWidthBack, this.BACK_LEFT);\n        this.addWheel(false,\n            new ammoModule.btVector3(this.wheelHalfTrackBack, this.wheelAxisHeightBack, this.wheelAxisPositionBack),\n            this.wheelRadiusBack, this.wheelWidthBack, this.BACK_RIGHT);\n\n        this.vehicleReady = true;\n        \n        this.ammoModule = ammoModule;\n        this.body = body;\n    }\n    \n    public reset() {\n        const xxx = new this.ammoModule.btVector3(0, 5, 0);\n        const transform = new this.ammoModule.btTransform();\n        transform.setOrigin(xxx);\n        transform.setRotation(new this.ammoModule.btQuaternion(\n            this.ZERO_QUATERNION.x,\n            this.ZERO_QUATERNION.y,\n            this.ZERO_QUATERNION.z,\n            this.ZERO_QUATERNION.w));\n\n        this.body.setWorldTransform(transform);\n    }\n\n    private createChassisMesh(w: number, l: number, h: number): Mesh {\n        const mesh = MeshBuilder.CreateBox(\"box\", {width: w, depth: h, height: l}, this.scene);\n        mesh.rotationQuaternion = new Quaternion();\n        mesh.material = this.greenMaterial;\n        return mesh;\n    }\n\n    private addWheel(isFront: boolean, pos: Vector3, radius: number, width: number, index: number) {\n\n        const wheelInfo = this.vehicle.addWheel(\n            pos,\n            this.wheelDirectionCS0,\n            this.wheelAxleCS,\n            this.suspension.restLength,\n            radius,\n            this.tuning,\n            isFront);\n\n        wheelInfo.set_m_suspensionStiffness(this.suspension.stiffness);\n        wheelInfo.set_m_wheelsDampingRelaxation(this.suspension.damping);\n        wheelInfo.set_m_wheelsDampingCompression(this.suspension.compression);\n        wheelInfo.set_m_maxSuspensionForce(600000);\n        wheelInfo.set_m_frictionSlip(40);\n        wheelInfo.set_m_rollInfluence(this.rollInfluence);\n\n        this.wheelMeshes[index] = this.createWheelMesh(radius, width);\n    }\n\n    private createWheelMesh(radius: number, width: number) {\n        //var mesh = new BABYLON.MeshBuilder.CreateBox(\"wheel\", {width:.82, height:.82, depth:.82}, scene);\n        const mesh = MeshBuilder.CreateCylinder(\"Wheel\", {\n            diameter: 1, height: 0.5, tessellation: 6\n        }, this.scene);\n        mesh.rotationQuaternion = new Quaternion();\n        mesh.material = this.blackMaterial;\n        return mesh;\n    }\n}","import { Axis } from \"@babylonjs/core/Maths/math\";\nimport { Car } from \"./car\";\n\nconst actions = new Map<string, boolean>([\n    [\"acceleration\", false],\n    [\"braking\", false],\n    [\"right\", false],\n    [\"left\", false],\n    [\"reset\", false],\n    [\"stop\", false]\n]);\n\nconst keysActions = new Map<string, string>([\n    [\"KeyW\",'acceleration'],\n    [\"KeyS\",'braking'],\n    [\"KeyA\",'left'],\n    [\"KeyD\",'right'],\n    [\"KeyR\",'reset'],\n    [\"Space\", \"stop\"]\n]);\n\nexport class Controls {\n\n    car: Car;\n\n    constructor(car: Car) {\n        this.car = car;\n        window.addEventListener( 'keydown', this.keydown);\n        window.addEventListener( 'keyup', this.keyup);\n    }\n\n    update() {\n        if(this.car.vehicleReady){\n                  \n            const speed = this.car.vehicle.getCurrentSpeedKmHour();\n            const maxSteerVal = 0.2;\n            this.car.breakingForce = 0;\n            this.car.engineForce = 0;\n\n            if (actions.get(\"reset\")) {\n                //this.car.chassisMesh.position.set(0, 5, 0);\n                this.car.reset();\n                console.log(\"reset \" + this.car.chassisMesh.position);\n            }\n            \n            if (actions.get(\"acceleration\")){\n                if (speed < -1){\n                    this.car.breakingForce = this.car.maxBreakingForce;\n                }else {\n                    this.car.engineForce = this.car.maxEngineForce;\n                }\n                    \n            } else if (actions.get(\"braking\")){\n                if (speed > 1){\n                    this.car.breakingForce = this.car.maxBreakingForce;\n                }else {\n                    this.car.engineForce = -this.car.maxEngineForce ;\n                }\n            } else if(actions.get(\"stop\")) {\n                if (speed > 1){\n                    this.car.breakingForce = this.car.maxBreakingForce*2;\n                } else if (speed < -1){\n                    this.car.engineForce = this.car.maxEngineForce*2;\n                }\n            }\n                    \n            if(actions.get(\"right\")){\n                if (this.car.vehicleSteering < this.car.steeringClamp){\n                    this.car.vehicleSteering += this.car.steeringIncrement;\n                }\n                    \n            } else if(actions.get(\"left\")){\n                if (this.car.vehicleSteering > -this.car.steeringClamp){\n                    this.car.vehicleSteering -= this.car.steeringIncrement;\n                }\n                    \n            } else {\n                this.car.vehicleSteering = 0;\n            }\n                    \n            this.car.vehicle.applyEngineForce(this.car.engineForce, this.car.FRONT_LEFT);\n            this.car.vehicle.applyEngineForce(this.car.engineForce, this.car.FRONT_RIGHT);\n                    \n            this.car.vehicle.setBrake(this.car.breakingForce / 2, this.car.FRONT_LEFT);\n            this.car.vehicle.setBrake(this.car.breakingForce / 2, this.car.FRONT_RIGHT);\n            this.car.vehicle.setBrake(this.car.breakingForce, this.car.BACK_LEFT);\n            this.car.vehicle.setBrake(this.car.breakingForce, this.car.BACK_RIGHT);\n                    \n            this.car.vehicle.setSteeringValue(this.car.vehicleSteering, this.car.FRONT_LEFT);\n            this.car.vehicle.setSteeringValue(this.car.vehicleSteering, this.car.FRONT_RIGHT);\n                    \n                    \n            let tm, p, q, i;\n            const n = this.car.vehicle.getNumWheels();\n            for (i = 0; i < n; i++) {\n                this.car.vehicle.updateWheelTransform(i, true);\n                tm = this.car.vehicle.getWheelTransformWS(i);\n                p = tm.getOrigin();\n                q = tm.getRotation();\n                this.car.wheelMeshes[i].position.set(p.x(), p.y(), p.z());\n                this.car.wheelMeshes[i].rotationQuaternion?.set(q.x(), q.y(), q.z(), q.w());\n                this.car.wheelMeshes[i].rotate(Axis.Z, Math.PI/2);\n            }\n\n            tm = this.car.vehicle.getChassisWorldTransform();\n            p = tm.getOrigin();\n            q = tm.getRotation();\n            this.car.chassisMesh.position.set(p.x(), p.y(), p.z());\n            this.car.chassisMesh.rotationQuaternion?.set(q.x(), q.y(), q.z(), q.w());\n            this.car.chassisMesh.rotate(Axis.X, Math.PI);\n                 \n        }\n    }\n\n    private keyup(e: KeyboardEvent) {\n        if(keysActions.get(e.code)) {\n            actions.set(keysActions.get(e.code)??\"\", false);\n            //e.preventDefault();\n            //e.stopPropagation();\n\n            //return false;\n        }\n    }\n\n    private keydown(e: KeyboardEvent) {\n        if(keysActions.get(e.code)) {\n            actions.set(keysActions.get(e.code)??\"\", true);\n            //e.preventDefault();\n            //e.stopPropagation();\n\n            //return false;\n        }\n    }\n\n\n}\n","import {Engine} from \"@babylonjs/core/Engines/engine\";\nimport {Scene} from \"@babylonjs/core/scene\";\nimport {FreeCamera} from \"@babylonjs/core/Cameras/freeCamera\";\nimport {Vector3} from \"@babylonjs/core/Maths/math.vector\";\nimport {HemisphericLight} from \"@babylonjs/core/Lights/hemisphericLight\";\nimport {AmmoJSPlugin} from \"@babylonjs/core/Physics/Plugins/ammoJSPlugin\";\nimport \"@babylonjs/core/Physics/physicsEngineComponent\";\n\n// If you don't need the standard material you will still need to import it since the scene requires it.\nimport \"@babylonjs/core/Materials/standardMaterial\";\nimport {PhysicsImpostor} from \"@babylonjs/core/Physics/physicsImpostor\";\nimport {ammoModule, ammoReadyPromise} from \"../externals/ammo\";\nimport {CreateSceneClass} from \"../createScene\";\nimport {MeshBuilder} from \"@babylonjs/core/Meshes/meshBuilder\";\nimport {StandardMaterial} from \"@babylonjs/core/Materials/standardMaterial\";\nimport * as GRID from \"@babylonjs/materials/grid\";\n\nimport {Boxes} from \"./boxes\"\nimport {Car} from \"./car\";\nimport {Controls} from \"./controls\";\nimport {DEFAULT_CELL_SIZE, WorldMap} from \"./world\";\nimport {FollowCamera} from \"@babylonjs/core/Cameras/followCamera\";\n\nclass ProRacerScene implements CreateSceneClass {\n    preTasks = [ammoReadyPromise];\n\n    createScene = async (engine: Engine, canvas: HTMLCanvasElement): Promise<Scene> => {\n        // This creates a basic Babylon Scene object (non-mesh)\n        const scene = new Scene(engine);\n        \n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n        const light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\n        // Default intensity is 1. Let's dim the light a small amount\n        light.intensity = 0.7;\n\n\n        scene.enablePhysics(new Vector3(0, -10, 0), new AmmoJSPlugin(true, ammoModule));\n        \n\n        const car = new Car(new Vector3(0, 4, -20), scene, ammoModule);\n        const camera = new FollowCamera(\"FollowCam\", new Vector3(0, 10, -10), scene);\n        camera.radius = 10;\n        camera.heightOffset = 4;\n        camera.rotationOffset = 0;\n        camera.cameraAcceleration = 0.05;\n        camera.maxCameraSpeed = 400;\n        camera.attachControl(true);//camera.attachControl(canvas, true);\n        camera.lockedTarget = car.chassisMesh; //version 2.5 onwards\n        scene.activeCamera = camera;\n        \n        // Ground + Obstacles\n        const world = new WorldMap(scene)\n\n        const boxes = new Boxes(scene)\n        // boxes.baseBoxes();\n        //boxes.randomBoxes();\n\n\n        \n        const controls = new Controls(car);\n\n        let lastX = -9999, lastZ = -9999\n        const divFps = document.getElementById(\"fps\");\n        const divPos = document.getElementById(\"pos\");\n        const speedPos = document.getElementById(\"speed\");\n\n        scene.registerBeforeRender(function () {\n            const dt = engine.getDeltaTime()/*.toFixed()*/ / 1000;\n            controls.update();\n            const carPos = car.chassisMesh.position;\n            const currX = Math.round(carPos.x / DEFAULT_CELL_SIZE)|0\n            const currZ = Math.round(carPos.z / DEFAULT_CELL_SIZE)|0\n            if (lastX !== currX || lastZ !== currZ) {\n                console.log(currX, currZ)\n                lastX = currX\n                lastZ = currZ\n            }\n            world.update(currX, currZ)\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            divFps.innerHTML = engine.getFps().toFixed() + \" fps\";\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            divPos.innerHTML = currX+\",\"+currZ;\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            speedPos.innerHTML = car.vehicle.getCurrentSpeedKmHour().toFixed() + \" km/h\"\n\n        });\n\n        return scene;\n    };\n\n}\n\nexport default new ProRacerScene();\n","export default __webpack_public_path__ + \"c8f55e9ef9e4d3c0a223a3adaad7ad23.jpg\";","import {Scene} from \"@babylonjs/core/scene\";\nimport {MeshBuilder} from \"@babylonjs/core/Meshes/meshBuilder\";\nimport {PhysicsImpostor} from \"@babylonjs/core/Physics/physicsImpostor\";\nimport * as GRID from \"@babylonjs/materials/grid\";\nimport {GridMaterial} from \"@babylonjs/materials/grid\";\nimport {GroundMesh} from \"@babylonjs/core\";\n\nimport sandTextureUrl from \"../../assets/sand.jpg\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\nimport {StandardMaterial} from \"@babylonjs/core/Materials/standardMaterial\";\nimport {Boxes} from \"./boxes\";\nimport {Color3, Color4} from \"@babylonjs/core/Maths/math\";\n\nexport const DEFAULT_CELL_SIZE = 100;\n\nexport class WorldMap {\n    //private material: GridMaterial;\n    private material: StandardMaterial;\n    \n    private debugMaterial: StandardMaterial;\n\n    private cells = new Map();\n    private scene: Scene;\n\n    constructor(scene: Scene) {\n        this.scene = scene;\n\n        //this.material = new GRID.GridMaterial(\"groundMaterial\", scene);\n        this.material = new StandardMaterial(\"ground material\", scene);\n        const texture = new Texture(sandTextureUrl, scene);\n        this.material.diffuseTexture = texture;\n        texture.uScale = 10;\n        texture.vScale = 10;\n\n        scene.fogMode = Scene.FOGMODE_LINEAR;\n        scene.fogStart = 20.0;\n        scene.fogEnd = 120.0;\n        scene.fogColor = new Color3(0.9, 0.9, 0.85);\n        scene.fogDensity = 0.03;\n        scene.clearColor = new Color4(0.9, 0.9, 0.85, 1.0);\n\n\n\n        this.debugMaterial = new StandardMaterial(\"BlueMaterial\", scene);\n        this.debugMaterial.diffuseColor = new Color3(0.5,0.4,0.8);\n        this.debugMaterial.emissiveColor = new Color3(0.5,0.4,0.8);\n\n\n    }\n\n    public update(x: number, z: number): void {\n        const indexes = [\n            [x + 1, z + 1],\n            [x + 1, z],\n            [x + 1, z - 1],\n            [x, z + 1],\n            [x, z],\n            [x, z - 1],\n            [x - 1, z + 1],\n            [x - 1, z],\n            [x - 1, z - 1],\n        ];\n        // const indexes = [ [x, z]];\n        for (const index of indexes) {\n            const xx = index[0]\n            const zz = index[1]\n            if (!this.cells.has(`${xx},${zz}`)) {\n                const cell  = this.createCell(this.scene, xx, zz);\n                this.cells.set(`${xx},${zz}`, cell);\n                console.log(`Created cell ${xx},${zz}`);\n                return; // only create one cell per update\n            }\n        }\n        //console.log(this.cells.size);\n        for (const key of this.cells.keys()) {\n            const [xs, zs] = key.split(\",\");\n            const xx = parseInt(xs);\n            const zz = parseInt(zs);\n            if (xx < (x - 1) || xx > (x + 1) || zz < (z - 1) || zz > (z + 1)) {\n            // if (xx != x || zz != z) {\n                const cell = this.cells.get(key);\n                if (cell) {\n                    this.scene.removeMesh(cell);\n                    cell.dispose();\n                    this.cells.delete(key);\n                }\n            }\n        }\n\n    }\n\n    private createCell(scene: Scene, x: number, z: number): GroundMesh {\n        const ground = MeshBuilder.CreateGround(\"ground\", {\n            width: DEFAULT_CELL_SIZE,\n            height: DEFAULT_CELL_SIZE,\n            subdivisions: 2\n        }, scene);\n\n        ground.position.set(x * DEFAULT_CELL_SIZE, 0, z * DEFAULT_CELL_SIZE);\n\n        ground.physicsImpostor = new PhysicsImpostor(ground, PhysicsImpostor.BoxImpostor, {\n            mass: 0,\n            friction: 0.5,\n            restitution: 0.7\n        }, scene);\n        \n        const halfCellSize = DEFAULT_CELL_SIZE/2;\n\n        // START: Dev boxes\n        const box = MeshBuilder.CreateBox(\"box\", { width: 1, depth: 1, height: 4 }, this.scene);\n        box.material = this.debugMaterial;\n        ground.addChild(box);\n        const box0 = MeshBuilder.CreateBox(\"box\", { width: 1, depth: 1, height: 8 }, this.scene);\n        box0.material = this.debugMaterial;\n        box0.position.set(x * DEFAULT_CELL_SIZE + halfCellSize, 4, z * DEFAULT_CELL_SIZE + halfCellSize);\n        ground.addChild(box0);\n        const box1 = MeshBuilder.CreateBox(\"box\", { width: 1, depth: 1, height: 8 }, this.scene);\n        box1.material = this.debugMaterial;\n        box1.position.set(x * DEFAULT_CELL_SIZE - halfCellSize, 4, z * DEFAULT_CELL_SIZE - halfCellSize);\n        ground.addChild(box1);\n        // END: Dev boxes\n        \n        new Boxes(this.scene).cellBoxes(DEFAULT_CELL_SIZE, ground);\n\n        ground.material = this.material;\n\n        return ground;\n    }\n\n}\n"],"names":["ammoModule","ammoReadyPromise","Promise","resolve","then","res","Boxes","constructor","scene","this","blueMaterial","diffuseColor","emissiveColor","concreteMaterial","diffuseTexture","concrete","baseBoxes","createBox","Math","PI","randomBoxes","s","p","r","i","m","random","m3","m2","set","size","position","rotation","mass","box","width","x","depth","z","height","y","material","physicsImpostor","friction","restitution","cellBoxes","cellSize","cell","halfCellSize","parent","createCellBox","Car","pos","ZERO_QUATERNION","FRONT_LEFT","FRONT_RIGHT","BACK_LEFT","BACK_RIGHT","chassisWidth","chassisHeight","chassisLength","massVehicle","wheelAxisPositionBack","wheelRadiusBack","wheelWidthBack","wheelHalfTrackBack","wheelAxisHeightBack","wheelAxisFrontPosition","wheelHalfTrackFront","wheelAxisHeightFront","wheelRadiusFront","wheelWidthFront","suspension","stiffness","damping","compression","restLength","rollInfluence","steeringIncrement","steeringClamp","maxEngineForce","maxBreakingForce","incEngine","vehicleSteering","engineForce","breakingForce","wheelMeshes","vehicleReady","greenMaterial","StandardMaterial","blackMaterial","physicsWorld","getPhysicsEngine","getPhysicsPlugin","world","wheelDirectionCS0","btVector3","wheelAxleCS","geometry","btBoxShape","transform","btTransform","setIdentity","setOrigin","setRotation","btQuaternion","w","motionState","btDefaultMotionState","localInertia","calculateLocalInertia","chassisMesh","createChassisMesh","massOffset","transform2","compound","btCompoundShape","addChildShape","body","btRigidBody","btRigidBodyConstructionInfo","setActivationState","addRigidBody","tuning","btVehicleTuning","rayCaster","btDefaultVehicleRaycaster","vehicle","btRaycastVehicle","setCoordinateSystem","addAction","getChassisWorldTransform","addWheel","reset","xxx","setWorldTransform","l","h","mesh","rotationQuaternion","isFront","radius","index","wheelInfo","set_m_suspensionStiffness","set_m_wheelsDampingRelaxation","set_m_wheelsDampingCompression","set_m_maxSuspensionForce","set_m_frictionSlip","set_m_rollInfluence","createWheelMesh","diameter","tessellation","actions","Map","keysActions","Controls","car","window","addEventListener","keydown","keyup","update","speed","getCurrentSpeedKmHour","tm","q","get","console","log","applyEngineForce","setBrake","setSteeringValue","n","getNumWheels","updateWheelTransform","getWheelTransformWS","getOrigin","getRotation","rotate","e","code","preTasks","createScene","async","engine","canvas","intensity","enablePhysics","camera","heightOffset","rotationOffset","cameraAcceleration","maxCameraSpeed","attachControl","lockedTarget","activeCamera","WorldMap","controls","lastX","lastZ","divFps","document","getElementById","divPos","speedPos","registerBeforeRender","getDeltaTime","carPos","currX","round","DEFAULT_CELL_SIZE","currZ","innerHTML","getFps","toFixed","cells","texture","sand","uScale","vScale","fogMode","fogStart","fogEnd","fogColor","fogDensity","clearColor","debugMaterial","indexes","xx","zz","has","createCell","key","keys","xs","zs","split","parseInt","removeMesh","dispose","delete","ground","subdivisions","addChild","box0","box1"],"sourceRoot":""}