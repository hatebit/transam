{"version":3,"file":"js/985.babylonBundle.js","mappings":"iNAAA,QAAe,IAA0B,uCCWlC,MAAMA,EAKT,WAAAC,CAAYC,GACRC,KAAKD,MAAQA,EAEbC,KAAKC,aAAe,IAAI,IAAiB,eAAgBF,GACzDC,KAAKC,aAAaC,aAAe,IAAI,KAAO,GAAI,GAAI,IACpDF,KAAKC,aAAaE,cAAgB,IAAI,KAAO,GAAI,GAAI,IAErDH,KAAKI,iBAAmB,IAAI,IAAiB,oBAAqBL,GAClEC,KAAKI,iBAAiBC,eAAiB,IAAI,IAAQC,EAAoBP,EAC3E,CAEO,SAAAQ,GACHP,KAAKQ,UAAU,IAAI,KAAQ,EAAE,EAAE,IAAI,IAAI,KAAQ,EAAE,EAAE,IAAI,IAAI,MAASC,KAAKC,GAAG,EAAE,EAAE,GAAG,GACnFV,KAAKQ,UAAU,IAAI,KAAQ,EAAE,EAAE,IAAI,IAAI,KAAQ,GAAG,EAAE,GAAG,IAAI,MAASC,KAAKC,GAAG,EAAED,KAAKC,GAAG,EAAE,GAAG,GAC3FV,KAAKQ,UAAU,IAAI,KAAQ,EAAE,EAAE,IAAI,IAAI,KAAQ,EAAE,GAAG,IAAI,IAAI,KAAQC,KAAKC,GAAG,EAAE,EAAE,GAAG,GACnFV,KAAKQ,UAAU,IAAI,KAAQ,EAAE,EAAE,IAAI,IAAI,MAAS,GAAG,EAAE,GAAG,IAAI,KAAQC,KAAKC,GAAG,EAAED,KAAKC,GAAG,EAAE,GAAG,EAC/F,CAEO,WAAAC,GACH,MAAMC,EAAI,IAAI,KACRC,EAAI,IAAI,KACRC,EAAI,IAAI,KACd,IAAI,IAAIC,EAAE,EAAEA,EAAE,GAAGA,IAAI,CACjB,MAAMC,EAAkB,IAAdP,KAAKQ,SAAa,IAAI,EAC1BC,EAAmB,IAAdT,KAAKQ,SAAa,IAAI,EAC3BE,EAAmB,GAAdV,KAAKQ,SAChBL,EAAEQ,IAAID,EAAGA,EAAGA,GACZN,EAAEO,IAAIF,EAAG,EAAEF,GACXF,EAAEM,IAAIJ,EAAEA,EAAEA,GACVhB,KAAKQ,UAAUI,EAAEC,EAAEC,EAAE,E,CAGzB,IAAI,IAAIC,EAAE,EAAEA,EAAE,GAAGA,IAAI,CACjB,MAAMC,EAAkB,IAAdP,KAAKQ,SAAa,IAAI,EAC1BC,EAAmB,IAAdT,KAAKQ,SAAa,IAAI,EAC3BE,EAAmB,EAAdV,KAAKQ,SAChBL,EAAEQ,IAAID,EAAGA,EAAGA,GACZN,EAAEO,IAAIF,EAAG,EAAEF,GACXF,EAAEM,IAAIJ,EAAEA,EAAEA,GACVhB,KAAKQ,UAAUI,EAAEC,EAAEC,EAAE,E,CAE7B,CAEQ,SAAAN,CAAUa,EAAeC,EAAmBC,EAAmBC,GACnE,MAAMC,EAAM,IAAYC,UAAU,MAAO,CAAEC,MAAON,EAAKO,EAAGC,MAAOR,EAAKS,EAAGC,OAAQV,EAAKW,GAAKhC,KAAKD,OAYhG,OAXA0B,EAAIH,SAASF,IAAIE,EAASM,EAAEN,EAASU,EAAEV,EAASQ,GAChDL,EAAIF,SAASH,IAAIG,EAASK,EAAEL,EAASS,EAAET,EAASO,GAC5CN,GAIAC,EAAIH,SAASU,GAAK,EAClBP,EAAIQ,SAAWjC,KAAKC,eAJpBuB,EAAO,EACPC,EAAIQ,SAAWjC,KAAKI,kBAMxBqB,EAAIS,gBAAkB,IAAI,IAAgBT,EAAK,IAAgBU,YAAa,CAAEX,KAAMA,EAAMY,SAAU,GAAKC,YAAa,IAAOrC,KAAKD,OAC3H0B,CACX,CAEO,SAAAa,CAAUC,EAAkBC,GAC/B,MAAMC,EAAeF,EAAS,EACxB3B,EAAI,IAAI,KACRC,EAAI,IAAI,KACRC,EAAI,IAAI,KACd,IAAI,IAAIC,EAAE,EAAEA,EAAE,GAAGA,IAAI,CACjB,MAAMC,EAAIP,KAAKQ,SAASsB,EAASE,EAC3BvB,EAAKT,KAAKQ,SAASsB,EAASE,EAC5BtB,EAAmB,GAAdV,KAAKQ,SAChBL,EAAEQ,IAAID,EAAGA,EAAGA,GACZN,EAAEO,IAAIF,EAAG,EAAEF,GACXF,EAAEM,IAAIJ,EAAEA,EAAEA,GACEhB,KAAKQ,UAAUI,EAAEC,EAAEC,EAAE,GAC7B4B,OAASF,C,CAErB,CAEQ,aAAAG,CAActB,EAAeC,EAAmBC,EAAmBC,GACvE,MAAMC,EAAM,IAAYC,UAAU,MAAO,CAAEC,MAAON,EAAKO,EAAGC,MAAOR,EAAKS,EAAGC,OAAQV,EAAKW,IAYtF,OAXAP,EAAIH,SAASF,IAAIE,EAASM,EAAEN,EAASU,EAAEV,EAASQ,GAChDL,EAAIF,SAASH,IAAIG,EAASK,EAAEL,EAASS,EAAET,EAASO,GAC5CN,GAIAC,EAAIH,SAASU,GAAK,EAClBP,EAAIQ,SAAWjC,KAAKC,eAJpBuB,EAAO,EACPC,EAAIQ,SAAWjC,KAAKI,kBAMxBqB,EAAIS,gBAAkB,IAAI,IAAgBT,EAAK,IAAgBU,YAAa,CAAEX,KAAMA,EAAMY,SAAU,GAAKC,YAAa,IAAOrC,KAAKD,OAC3H0B,CACX,E,uFCtGG,MAAMmB,UAAmB,IAE5B,WAAA9C,CAAYC,GACR8C,MAAM,aAAc,IAAI,KAAQ,EAAG,IAAK,IAAK9C,GAC7CC,KAAK8C,QACL9C,KAAK+C,mBAAqB,IAC1B/C,KAAKgD,eAAiB,IACtBhD,KAAKiD,eAAc,EACvB,CAEA,KAAAH,GACI9C,KAAKkD,OAAS,GACdlD,KAAKmD,aAAe,EACpBnD,KAAKoD,eAAiB,CAC1B,E,0FCbG,MAAMC,EAkET,WAAAvD,CAAYwD,EAAcvD,EAAcwD,GAjExC,KAAAC,gBAAkB,IAAI,KAEtB,KAAAC,WAAa,EACb,KAAAC,YAAc,EACd,KAAAC,UAAY,EACZ,KAAAC,WAAa,EAEb,KAAAC,aAAe,IACf,KAAAC,cAAgB,GAChB,KAAAC,cAAgB,EAChB,KAAAC,YAAc,IAGd,KAAAC,uBAAyB,EACzB,KAAAC,gBAAkB,GAClB,KAAAC,eAAiB,GACjB,KAAAC,mBAAqB,EACrB,KAAAC,oBAAsB,GAEtB,KAAAC,uBAAyB,EACzB,KAAAC,oBAAsB,EACtB,KAAAC,qBAAuB,GACvB,KAAAC,iBAAmB,GACnB,KAAAC,gBAAkB,GAElB,KAAAtC,SAAW,EACX,KAAAuC,WAAa,CACTC,UAAW,GACXC,QAAS,GACTC,YAAa,IACbC,WAAY,IAGhB,KAAAC,cAAgB,EAKhB,KAAAC,kBAAoB,IACpB,KAAAC,cAAgB,GAChB,KAAAC,eAAiB,IACjB,KAAAC,iBAAmB,GACnB,KAAAC,UAAY,GAEZ,KAAAC,gBAAkB,EAClB,KAAAC,YAAc,EACd,KAAAC,cAAgB,EAUhB,KAAAC,YAAsB,GAItB,KAAAC,cAAe,EAMX1F,KAAK2F,cAAgB,IAAI,MAAiB,gBAAiB5F,GAC3DC,KAAK2F,cAAczF,aAAe,IAAI,KAAO,GAAK,GAAK,IACvDF,KAAK2F,cAAcxF,cAAgB,IAAI,KAAO,GAAK,GAAK,IAExDH,KAAK4F,cAAgB,IAAI,MAAiB,gBAAiB7F,GAC3DC,KAAK4F,cAAc1F,aAAe,IAAI,KAAO,GAAK,GAAK,IACvDF,KAAK4F,cAAczF,cAAgB,IAAI,KAAO,GAAK,GAAK,IAExDH,KAAKD,MAAQA,EAEb,MAAM8F,EAAe9F,EAAM+F,oBAAoBC,mBAAmBC,MAElEhG,KAAKiG,kBAAoB,IAAI1C,EAAW2C,UAAU,GAAI,EAAG,GACzDlG,KAAKmG,YAAc,IAAI5C,EAAW2C,WAAW,EAAG,EAAG,GAEnD,MAAME,EAAW,IAAI7C,EAAW8C,WAAW,IAAI9C,EAAW2C,UAClC,GAApBlG,KAAK6D,aACgB,GAArB7D,KAAK8D,cACgB,GAArB9D,KAAK+D,gBACHuC,EAAY,IAAI/C,EAAWgD,YACjCD,EAAUE,cACVF,EAAUG,UAAU,IAAIlD,EAAW2C,UAAU,EAAG,EAAG,IACnDI,EAAUI,YAAY,IAAInD,EAAWoD,aACjC3G,KAAKwD,gBAAgB5B,EACrB5B,KAAKwD,gBAAgBxB,EACrBhC,KAAKwD,gBAAgB1B,EACrB9B,KAAKwD,gBAAgBoD,IACzB,MAAMC,EAAc,IAAItD,EAAWuD,qBAAqBR,GAClDS,EAAe,IAAIxD,EAAW2C,UAAU,EAAG,EAAG,GACpDE,EAASY,sBAAsBhH,KAAKgE,YAAa+C,GAGjD/G,KAAKiH,YAAcjH,KAAKkH,kBAAkBlH,KAAK6D,aAAc7D,KAAK8D,cAAe9D,KAAK+D,eAGtF,MAAMoD,EAAa,IAAI5D,EAAW2C,UAAU,EAAG,GAAK,GAC9CkB,EAAa,IAAI7D,EAAWgD,YAClCa,EAAWZ,cACXY,EAAWX,UAAUU,GACrB,MAAME,EAAW,IAAI9D,EAAW+D,gBAChCD,EAASE,cAAcH,EAAYhB,GAEnC,MAAMoB,EAAO,IAAIjE,EAAWkE,YAAY,IAAIlE,EAAWmE,4BAA4B1H,KAAKgE,YAAa6C,EAAaQ,EAAUN,IAC5HS,EAAKG,mBAAmB,GAExB9B,EAAa+B,aAAaJ,GAG1BxH,KAAK6H,OAAS,IAAItE,EAAWuE,gBAC7B,MAAMC,EAAY,IAAIxE,EAAWyE,0BAA0BnC,GAC3D7F,KAAKiI,QAAU,IAAI1E,EAAW2E,iBAAiBlI,KAAK6H,OAAQL,EAAMO,GAClE/H,KAAKiI,QAAQE,oBAAoB,EAAG,EAAG,GACvCtC,EAAauC,UAAUpI,KAAKiI,SAEdjI,KAAKiI,QAAQI,2BAE3BrI,KAAKsI,UAAS,EACV,IAAI/E,EAAW2C,UAAUlG,KAAKuE,oBAAqBvE,KAAKwE,qBAAsBxE,KAAKsE,wBACnFtE,KAAKyE,iBAAkBzE,KAAK0E,gBAAiB1E,KAAKyD,YACtDzD,KAAKsI,UAAS,EACV,IAAI/E,EAAW2C,WAAWlG,KAAKuE,oBAAqBvE,KAAKwE,qBAAsBxE,KAAKsE,wBACpFtE,KAAKyE,iBAAkBzE,KAAK0E,gBAAiB1E,KAAK0D,aACtD1D,KAAKsI,UAAS,EACV,IAAI/E,EAAW2C,WAAWlG,KAAKoE,mBAAoBpE,KAAKqE,oBAAqBrE,KAAKiE,uBAClFjE,KAAKkE,gBAAiBlE,KAAKmE,eAAgBnE,KAAK2D,WACpD3D,KAAKsI,UAAS,EACV,IAAI/E,EAAW2C,UAAUlG,KAAKoE,mBAAoBpE,KAAKqE,oBAAqBrE,KAAKiE,uBACjFjE,KAAKkE,gBAAiBlE,KAAKmE,eAAgBnE,KAAK4D,YAEpD5D,KAAK0F,cAAe,EAEpB1F,KAAKuD,WAAaA,EAClBvD,KAAKwH,KAAOA,CAChB,CAEO,KAAA1E,GACH,MAAMyF,EAAS,IAAIvI,KAAKuD,WAAW2C,UAAU,EAAG,EAAG,GAC7CI,EAAY,IAAItG,KAAKuD,WAAWgD,YACtCD,EAAUG,UAAU8B,GACpBjC,EAAUI,YAAY,IAAI1G,KAAKuD,WAAWoD,aACtC3G,KAAKwD,gBAAgB5B,EACrB5B,KAAKwD,gBAAgBxB,EACrBhC,KAAKwD,gBAAgB1B,EACrB9B,KAAKwD,gBAAgBoD,IAEzB5G,KAAKwH,KAAKgB,kBAAkBlC,EAChC,CAEQ,iBAAAY,CAAkBN,EAAW6B,EAAWC,GAC5C,MAAMC,EAAO,IAAYjH,UAAU,MAAO,CAACC,MAAOiF,EAAG/E,MAAO6G,EAAG3G,OAAQ0G,GAAIzI,KAAKD,OAGhF,OAFA4I,EAAKC,mBAAqB,IAAI,KAC9BD,EAAK1G,SAAWjC,KAAK2F,cACdgD,CACX,CAEQ,QAAAL,CAASO,EAAkBvF,EAAcJ,EAAgBvB,EAAemH,GAE5E,MAAMC,EAAY/I,KAAKiI,QAAQK,SAC3BhF,EACAtD,KAAKiG,kBACLjG,KAAKmG,YACLnG,KAAK2E,WAAWI,WAChB7B,EACAlD,KAAK6H,OACLgB,GAEJE,EAAUC,0BAA0BhJ,KAAK2E,WAAWC,WACpDmE,EAAUE,8BAA8BjJ,KAAK2E,WAAWE,SACxDkE,EAAUG,+BAA+BlJ,KAAK2E,WAAWG,aACzDiE,EAAUI,yBAAyB,KACnCJ,EAAUK,mBAAmB,IAC7BL,EAAUM,oBAAoBrJ,KAAKgF,eAEnChF,KAAKyF,YAAYqD,GAAS9I,KAAKsJ,gBAAgBpG,EAAQvB,EAC3D,CAEQ,eAAA2H,CAAgBpG,EAAgBvB,GAEpC,MAAMgH,EAAO,IAAYY,eAAe,QAAS,CAC7CC,SAAU,EAAGzH,OAAQ,GAAK0H,aAAc,GACzCzJ,KAAKD,OAGR,OAFA4I,EAAKC,mBAAqB,IAAI,KAC9BD,EAAK1G,SAAWjC,KAAK4F,cACd+C,CACX,E,2EChMJ,MAAMe,EAAU,IAAIC,IAAqB,CACrC,CAAC,gBAAgB,GACjB,CAAC,WAAW,GACZ,CAAC,SAAS,GACV,CAAC,QAAQ,GACT,CAAC,SAAS,GACV,CAAC,QAAQ,KAGPC,EAAc,IAAID,IAAoB,CACxC,CAAC,OAAO,gBACR,CAAC,OAAO,WACR,CAAC,OAAO,QACR,CAAC,OAAO,SACR,CAAC,OAAO,SACR,CAAC,QAAS,UAGP,MAAME,EAKT,WAAA/J,CAAYgK,EAAUC,GAClB/J,KAAK8J,IAAMA,EACX9J,KAAK+J,OAASA,EACdC,OAAOC,iBAAkB,UAAWjK,KAAKkK,SACzCF,OAAOC,iBAAkB,QAASjK,KAAKmK,MAC3C,CAEA,MAAAC,GACI,GAAGpK,KAAK8J,IAAIpE,aAAa,CAErB,MAAM2E,EAAQrK,KAAK8J,IAAI7B,QAAQqC,wBA4D/B,IAAIC,EAAQhC,EAAQhH,EAAUR,EA1D9Bf,KAAK8J,IAAItE,cAAgB,EACzBxF,KAAK8J,IAAIvE,YAAc,EAEnBmE,EAAQc,IAAI,WAEZxK,KAAK8J,IAAIhH,QACT2H,QAAQC,IAAI,SAAW1K,KAAK8J,IAAI7C,YAAY3F,UAC5CtB,KAAK+J,OAAOjH,QACZ9C,KAAK+J,OAAOY,aAAe3K,KAAK8J,IAAI7C,aAGpCyC,EAAQc,IAAI,gBACRH,GAAS,EACTrK,KAAK8J,IAAItE,cAAgBxF,KAAK8J,IAAI1E,iBAElCpF,KAAK8J,IAAIvE,YAAcvF,KAAK8J,IAAI3E,eAG7BuE,EAAQc,IAAI,WACfH,EAAQ,EACRrK,KAAK8J,IAAItE,cAAgBxF,KAAK8J,IAAI1E,iBAElCpF,KAAK8J,IAAIvE,aAAevF,KAAK8J,IAAI3E,eAE/BuE,EAAQc,IAAI,UACdH,EAAQ,EACRrK,KAAK8J,IAAItE,cAA0C,EAA1BxF,KAAK8J,IAAI1E,iBAC3BiF,GAAS,IAChBrK,KAAK8J,IAAIvE,YAAsC,EAAxBvF,KAAK8J,IAAI3E,iBAIrCuE,EAAQc,IAAI,SACPxK,KAAK8J,IAAIxE,gBAAkBtF,KAAK8J,IAAI5E,gBACpClF,KAAK8J,IAAIxE,iBAAmBtF,KAAK8J,IAAI7E,mBAGnCyE,EAAQc,IAAI,QACdxK,KAAK8J,IAAIxE,iBAAmBtF,KAAK8J,IAAI5E,gBACrClF,KAAK8J,IAAIxE,iBAAmBtF,KAAK8J,IAAI7E,mBAIzCjF,KAAK8J,IAAIxE,gBAAkB,EAG/BtF,KAAK8J,IAAI7B,QAAQ2C,iBAAiB5K,KAAK8J,IAAIvE,YAAavF,KAAK8J,IAAIrG,YACjEzD,KAAK8J,IAAI7B,QAAQ2C,iBAAiB5K,KAAK8J,IAAIvE,YAAavF,KAAK8J,IAAIpG,aAEjE1D,KAAK8J,IAAI7B,QAAQ4C,SAAS7K,KAAK8J,IAAItE,cAAgB,EAAGxF,KAAK8J,IAAIrG,YAC/DzD,KAAK8J,IAAI7B,QAAQ4C,SAAS7K,KAAK8J,IAAItE,cAAgB,EAAGxF,KAAK8J,IAAIpG,aAC/D1D,KAAK8J,IAAI7B,QAAQ4C,SAAS7K,KAAK8J,IAAItE,cAAexF,KAAK8J,IAAInG,WAC3D3D,KAAK8J,IAAI7B,QAAQ4C,SAAS7K,KAAK8J,IAAItE,cAAexF,KAAK8J,IAAIlG,YAE3D5D,KAAK8J,IAAI7B,QAAQ6C,iBAAiB9K,KAAK8J,IAAIxE,gBAAiBtF,KAAK8J,IAAIrG,YACrEzD,KAAK8J,IAAI7B,QAAQ6C,iBAAiB9K,KAAK8J,IAAIxE,gBAAiBtF,KAAK8J,IAAIpG,aAIrE,MAAMqH,EAAI/K,KAAK8J,IAAI7B,QAAQ+C,eAC3B,IAAKjK,EAAI,EAAGA,EAAIgK,EAAGhK,IACff,KAAK8J,IAAI7B,QAAQgD,qBAAqBlK,GAAG,GACzCwJ,EAASvK,KAAK8J,IAAI7B,QAAQiD,oBAAoBnK,GAC9CwH,EAASgC,EAAOY,YAChB5J,EAAWgJ,EAAOa,cAClBpL,KAAK8J,IAAIrE,YAAY1E,GAAGO,SAASF,IAAImH,EAAO3G,IAAK2G,EAAOvG,IAAKuG,EAAOzG,KACpE9B,KAAK8J,IAAIrE,YAAY1E,GAAG6H,oBAAoBxH,IAAIG,EAASK,IAAKL,EAASS,IAAKT,EAASO,IAAKP,EAASqF,KACnG5G,KAAK8J,IAAIrE,YAAY1E,GAAGsK,OAAO,KAAKC,EAAG7K,KAAKC,GAAG,GAGnD6J,EAASvK,KAAK8J,IAAI7B,QAAQI,2BAC1BE,EAASgC,EAAOY,YAChB5J,EAAWgJ,EAAOa,cAClBpL,KAAK8J,IAAI7C,YAAY3F,SAASF,IAAImH,EAAO3G,IAAK2G,EAAOvG,IAAKuG,EAAOzG,KACjE9B,KAAK8J,IAAI7C,YAAY2B,oBAAoBxH,IAAIG,EAASK,IAAKL,EAASS,IAAKT,EAASO,IAAKP,EAASqF,KAChG5G,KAAK8J,IAAI7C,YAAYoE,OAAO,KAAKE,EAAG9K,KAAKC,G,CAGjD,CAEQ,KAAAyJ,CAAMqB,GACP5B,EAAYY,IAAIgB,EAAEC,OACjB/B,EAAQtI,IAAIwI,EAAYY,IAAIgB,EAAEC,OAAO,IAAI,EAMjD,CAEQ,OAAAvB,CAAQsB,GACT5B,EAAYY,IAAIgB,EAAEC,OACjB/B,EAAQtI,IAAIwI,EAAYY,IAAIgB,EAAEC,OAAO,IAAI,EAMjD,E,mICvIG,IAAIlI,EACJ,MAAMmI,EAAmB,IAAIC,SAASC,KACzC,IAAI,GAAOC,MAAMC,IACbvI,EAAauI,EACbF,EAAQE,EAAI,GACd,I,oDC2EN,YA1DA,oBACI,KAAAC,SAAW,CAACL,GAEZ,KAAAM,YAAcC,MAAOC,EAAgBC,KACjC,MAAMpM,EAAQ,IAAI,IAAMmM,GAGV,IAAI,IAAiB,QAAS,IAAI,KAAQ,EAAG,EAAG,GAAInM,GAC5DqM,UAAY,GAGlBrM,EAAMsM,cAAc,IAAI,KAAQ,GAAI,GAAI,GAAI,IAAI,KAAa,EAAM9I,IAEnE,MAAMuG,EAAM,IAAI,EAAAzG,IAAI,IAAI,KAAQ,EAAG,GAAI,IAAKtD,EAAOwD,GAE7CwG,EAAS,IAAI,EAAAnH,WAAW7C,GAC9BgK,EAAOY,aAAeb,EAAI7C,YAC1BlH,EAAMuM,aAAevC,EAGrB,MAAM/D,EAAQ,IAAI,EAAAuG,SAASxM,GAQrByM,EAAW,IAAI,EAAA3C,SAASC,EAAKC,GAEnC,IAAI0C,GAAS,KAAMC,GAAS,KACxBC,GAAiB,EAsBrB,OApBA5M,EAAM6M,sBAAqB,WACZV,EAAOW,eAClBL,EAASpC,SACT,MAAM0C,EAAShD,EAAI7C,YAAY3F,SACzByL,EAAiD,EAAzCtM,KAAKuM,MAAMF,EAAOlL,EAAI,EAAAqL,mBAC9BC,EAAiD,EAAzCzM,KAAKuM,MAAMF,EAAOhL,EAAI,EAAAmL,mBAEhCR,IAAUM,GAASL,IAAUQ,GAAUP,IACvCA,GAAiB,EACjBlC,QAAQC,IAAIqC,EAAOG,GACnBT,EAAQM,EACRL,EAAQQ,EACRP,EAAiB3G,EAAMoE,OAAO2C,EAAOG,GACrC,KAAYC,UAAYJ,EAAM,IAAIG,EAClC,KAAYC,UAAYnH,EAAMoH,YAAYL,EAAOG,IAErD,KAAOC,UAAYjB,EAAOmB,SAASC,UAAY,OAC/C,KAASH,UAAYrD,EAAI7B,QAAQqC,wBAAwBgD,UAAY,OACzE,IAEOvN,CAAK,CAGpB,E,qHChFA,QAAe,IAA0B,uC,2CCalC,MAAMkN,EAAoB,IAE1B,MAAMV,EAST,WAAAzM,CAAYC,GAHJ,KAAAwN,MAAQ,IAAI5D,IAIhB3J,KAAKD,MAAQA,EAGbC,KAAKiC,SAAW,IAAI,IAAiB,kBAAmBlC,GACxD,MAAMyN,EAAU,IAAI,IAAQC,EAAgB1N,GAC5CC,KAAKiC,SAAS5B,eAAiBmN,EAC/BA,EAAQE,OAAS,GACjBF,EAAQG,OAAS,GAEjB5N,EAAM6N,QAAU,IAAMC,eACtB9N,EAAM+N,SAAW,GACjB/N,EAAMgO,OAAS,IACfhO,EAAMiO,SAAW,IAAI,KAAO,GAAK,GAAK,KACtCjO,EAAMkO,WAAa,IACnBlO,EAAMmO,WAAa,IAAI,KAAO,GAAK,GAAK,IAAM,GAI9ClO,KAAKmO,cAAgB,IAAI,IAAiB,eAAgBpO,GAC1DC,KAAKmO,cAAcjO,aAAe,IAAI,KAAO,GAAI,GAAI,IACrDF,KAAKmO,cAAchO,cAAgB,IAAI,KAAO,GAAI,GAAI,GAG1D,CAQO,MAAAiK,CAAOxI,EAAWE,GACrB,MAAMsM,EAAU,CACZ,CAACxM,EAAI,EAAGE,EAAI,GACZ,CAACF,EAAI,EAAGE,GACR,CAACF,EAAI,EAAGE,EAAI,GACZ,CAACF,EAAGE,EAAI,GACR,CAACF,EAAGE,GACJ,CAACF,EAAGE,EAAI,GACR,CAACF,EAAI,EAAGE,EAAI,GACZ,CAACF,EAAI,EAAGE,GACR,CAACF,EAAI,EAAGE,EAAI,IAGhB,IAAK,MAAMgH,KAASsF,EAAS,CACzB,MAAMC,EAAKvF,EAAM,GACXwF,EAAKxF,EAAM,GACjB,IAAK9I,KAAKuN,MAAMgB,IAAI,GAAGF,KAAMC,KAAO,CAChC,MAAM9L,EAAQxC,KAAKwO,WAAWxO,KAAKD,MAAOsO,EAAIC,GAK9C,OAJAtO,KAAKuN,MAAMnM,IAAI,GAAGiN,KAAMC,IAAM9L,GAC9BiI,QAAQC,IAAI,gBAAgB2D,KAAMC,MAG3B,C,EAIf,IAAK,MAAMG,KAAOzO,KAAKuN,MAAMmB,OAAQ,CACjC,MAAOC,EAAIC,GAAMH,EAAII,MAAM,KACrBR,EAAKS,SAASH,GACdL,EAAKQ,SAASF,GACpB,GAAIP,EAAMzM,EAAI,GAAMyM,EAAMzM,EAAI,GAAM0M,EAAMxM,EAAI,GAAMwM,EAAMxM,EAAI,EAAI,CAE9D,MAAMU,EAAOxC,KAAKuN,MAAM/C,IAAIiE,GACxBjM,IACAxC,KAAKD,MAAMgP,WAAWvM,GACtBA,EAAKwM,UACLhP,KAAKuN,MAAM0B,OAAOR,G,EAI9B,OAAO,CAEX,CAEQ,UAAAD,CAAWzO,EAAc6B,EAAWE,GACxC,MAAMoN,EAAS,IAAYC,aAAa,SAAU,CAC9CxN,MAAOsL,EACPlL,OAAQkL,EACRmC,aAAc,GACfrP,GAEHmP,EAAO5N,SAASF,IAAIQ,EAAIqL,EAAmB,EAAGnL,EAAImL,GAElDiC,EAAOhN,gBAAkB,IAAI,IAAgBgN,EAAQ,IAAgB/M,YAAa,CAC9EX,KAAM,EACNY,SAAU,GACVC,YAAa,IACdtC,GAEH,MAAM0C,EAAewK,EAAkB,EAGjCxL,EAAM,IAAYC,UAAU,MAAO,CAAEC,MAAO,EAAGE,MAAO,EAAGE,OAAQ,GAAK/B,KAAKD,OACjF0B,EAAIQ,SAAWjC,KAAKmO,cACpBe,EAAOG,SAAS5N,GAChB,MAAM6N,EAAO,IAAY5N,UAAU,MAAO,CAAEC,MAAO,EAAGE,MAAO,EAAGE,OAAQ,GAAK/B,KAAKD,OAClFuP,EAAKrN,SAAWjC,KAAKmO,cACrBmB,EAAKhO,SAASF,IAAIQ,EAAIqL,EAAoBxK,EAAc,EAAGX,EAAImL,EAAoBxK,GACnFyM,EAAOG,SAASC,GAChB,MAAMC,EAAO,IAAY7N,UAAU,MAAO,CAAEC,MAAO,EAAGE,MAAO,EAAGE,OAAQ,GAAK/B,KAAKD,OAUlF,OATAwP,EAAKtN,SAAWjC,KAAKmO,cACrBoB,EAAKjO,SAASF,IAAIQ,EAAIqL,EAAoBxK,EAAc,EAAGX,EAAImL,EAAoBxK,GACnFyM,EAAOG,SAASE,GAGhB,IAAI,EAAA1P,MAAMG,KAAKD,OAAOuC,UAAU2K,EAAmBiC,GAEnDA,EAAOjN,SAAWjC,KAAKiC,SAEhBiN,CACX,CAEA,aAAMM,GAEF,IACI,IAAIC,QAAiBC,MAFV,iBAGPC,QAAaF,EAASG,OAE1B,OADAnF,QAAQC,IAAIiF,GACLA,C,CACT,MAAOE,GAEL,OADApF,QAAQoF,MAAMA,GACP,E,CAEf,CAGA,WAAAzC,CAAYL,EAAeG,GAwBvB,OANAlN,KAAKwP,UAAU3D,MACX8D,IACIlF,QAAQC,IAAI,KAAOiF,EAAK,IAInB,GAAT5C,GAAuB,GAATG,EACP,SAEPH,EAAQ,GAAKG,EAAQ,GAAKH,GAAS,GAAKG,GAAS,EAC1C,gBAEJ,WACX,E","sources":["webpack://trans-america/./assets/concrete.png","webpack://trans-america/./src/scenes/boxes.ts","webpack://trans-america/./src/scenes/camera.ts","webpack://trans-america/./src/scenes/car.ts","webpack://trans-america/./src/scenes/controls.ts","webpack://trans-america/./src/externals/ammo.ts","webpack://trans-america/./src/scenes/proRacer.ts","webpack://trans-america/./assets/sand.jpg","webpack://trans-america/./src/scenes/world.ts"],"sourcesContent":["export default __webpack_public_path__ + \"03713868bab7dd2e96995060bf2ae0f5.png\";","import { Material } from \"@babylonjs/core/Materials/material\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\nimport { Color3, Vector3 } from \"@babylonjs/core/Maths/math\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\";\nimport { PhysicsImpostor } from \"@babylonjs/core/Physics/physicsImpostor\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport {Texture} from \"@babylonjs/core/Materials/Textures/texture\";\n\nimport concreteTextureUrl from \"../../assets/concrete.png\";\n\nexport class Boxes {\n    blueMaterial: StandardMaterial;\n    concreteMaterial: StandardMaterial;\n    scene: Scene;\n\n    constructor(scene: Scene) {\n        this.scene = scene;\n\n        this.blueMaterial = new StandardMaterial(\"BlueMaterial\", scene);\n        this.blueMaterial.diffuseColor = new Color3(0.5,0.4,0.8);\n        this.blueMaterial.emissiveColor = new Color3(0.5,0.4,0.8);\n        \n        this.concreteMaterial = new StandardMaterial(\"concrete material\", scene);\n        this.concreteMaterial.diffuseTexture = new Texture(concreteTextureUrl, scene);\n    }\n\n    public baseBoxes() : void {\n        this.createBox(new Vector3(4,1,12),new Vector3(0,0,25),new Vector3(-Math.PI/8,0,0),0);\n        this.createBox(new Vector3(4,1,12),new Vector3(25,0,0),new Vector3(-Math.PI/8,Math.PI/2,0),0);\n        this.createBox(new Vector3(4,1,12),new Vector3(0,0,-25),new Vector3(Math.PI/8,0,0),0);\n        this.createBox(new Vector3(4,1,12),new Vector3(-25,0,0),new Vector3(Math.PI/8,Math.PI/2,0),0);\n    }\n\n    public randomBoxes() : void {\n        const s = new Vector3();\n        const p = new Vector3();\n        const r = new Vector3();\n        for(let i=0;i<20;i++){\n            const m = Math.random()*300-150+5;\n            const m3 = Math.random()*300-150+5;\n            const m2 = Math.random()*10;\n            s.set(m2,m2,m2);\n            p.set(m3,0,m);\n            r.set(m,m,m);\n            this.createBox(s,p,r,0);\n        }\n    \n        for(let i=0;i<30;i++){\n            const m = Math.random()*300-150+5;\n            const m3 = Math.random()*300-150+5;\n            const m2 = Math.random()*3;\n            s.set(m2,m2,m2);\n            p.set(m3,0,m);\n            r.set(m,m,m);\n            this.createBox(s,p,r,5);\n        }\n    }\n\n    private createBox(size: Vector3, position: Vector3, rotation: Vector3, mass: number) : Mesh {\n        const box = MeshBuilder.CreateBox(\"box\", { width: size.x, depth: size.z, height: size.y }, this.scene);\n        box.position.set(position.x,position.y,position.z);\n        box.rotation.set(rotation.x,rotation.y,rotation.z);\n        if(!mass){\n            mass = 0;\n            box.material = this.concreteMaterial\n        } else {\n            box.position.y += 5;\n            box.material = this.blueMaterial;\n    \n        }\n        box.physicsImpostor = new PhysicsImpostor(box, PhysicsImpostor.BoxImpostor, { mass: mass, friction: 0.5, restitution: 0.7 }, this.scene);\n        return box;\n    }\n    \n    public cellBoxes(cellSize: number, cell: Mesh) : void {\n        const halfCellSize = cellSize/2;\n        const s = new Vector3();\n        const p = new Vector3();\n        const r = new Vector3();\n        for(let i=0;i<20;i++){\n            const m = Math.random()*cellSize-halfCellSize;\n            const m3 = Math.random()*cellSize-halfCellSize;\n            const m2 = Math.random()*10;\n            s.set(m2,m2,m2);\n            p.set(m3,0,m);\n            r.set(m,m,m);\n            const box = this.createBox(s,p,r,0);\n            box.parent = cell;\n        }\n    }\n\n    private createCellBox(size: Vector3, position: Vector3, rotation: Vector3, mass: number) : Mesh {\n        const box = MeshBuilder.CreateBox(\"box\", { width: size.x, depth: size.z, height: size.y });\n        box.position.set(position.x,position.y,position.z);\n        box.rotation.set(rotation.x,rotation.y,rotation.z);\n        if(!mass){\n            mass = 0;\n            box.material = this.concreteMaterial\n        } else {\n            box.position.y += 5;\n            box.material = this.blueMaterial;\n\n        }\n        box.physicsImpostor = new PhysicsImpostor(box, PhysicsImpostor.BoxImpostor, { mass: mass, friction: 0.5, restitution: 0.7 }, this.scene);\n        return box;\n    }\n\n}\n\n","import {FollowCamera} from \"@babylonjs/core/Cameras/followCamera\";\nimport {Vector3} from \"@babylonjs/core/Maths/math\";\nimport {Scene} from \"@babylonjs/core/scene\";\n\nexport class GameCamera extends FollowCamera {\n    \n    constructor(scene: Scene) {\n        super(\"GameCamera\", new Vector3(0, 10, -10), scene);\n        this.reset();\n        this.cameraAcceleration = 0.05;\n        this.maxCameraSpeed = 400;\n        this.attachControl(true);\n    }\n    \n    reset() {\n        this.radius = 10;\n        this.heightOffset = 4;\n        this.rotationOffset = 0;\n    }\n}","import {Mesh, StandardMaterial} from \"@babylonjs/core\";\nimport {Color3, Quaternion, Vector3} from \"@babylonjs/core/Maths/math\";\nimport {MeshBuilder} from \"@babylonjs/core/Meshes/meshBuilder\";\nimport {Scene} from \"@babylonjs/core/scene\";\n\nexport class Car {\n    ZERO_QUATERNION = new Quaternion();\n\n    FRONT_LEFT = 0;\n    FRONT_RIGHT = 1;\n    BACK_LEFT = 2;\n    BACK_RIGHT = 3;\n\n    chassisWidth = 1.8;\n    chassisHeight = .6;\n    chassisLength = 4;\n    massVehicle = 200;\n\n\n    wheelAxisPositionBack = -1;\n    wheelRadiusBack = .4;\n    wheelWidthBack = .3;\n    wheelHalfTrackBack = 1;\n    wheelAxisHeightBack = 0.4;\n\n    wheelAxisFrontPosition = 1.0;\n    wheelHalfTrackFront = 1;\n    wheelAxisHeightFront = 0.4;\n    wheelRadiusFront = .4;\n    wheelWidthFront = .3;\n\n    friction = 5;\n    suspension = {\n        stiffness: 10,\n        damping: 0.3,\n        compression: 4.4,\n        restLength: 0.6\n    }\n\n    rollInfluence = 0.0;\n\n    wheelDirectionCS0: number | undefined;\n    wheelAxleCS: number | undefined;\n\n    steeringIncrement = .01;\n    steeringClamp = 0.2;\n    maxEngineForce = 500;\n    maxBreakingForce = 10;\n    incEngine = 10.0;\n\n    vehicleSteering = 0;\n    engineForce = 0;\n    breakingForce = 0;\n\n    private scene: Scene;\n\n    greenMaterial: StandardMaterial;\n    blackMaterial: StandardMaterial;\n\n\n    tuning: any;\n    vehicle: any;\n    wheelMeshes: Mesh[] = [];\n    chassisMesh: Mesh;\n\n\n    vehicleReady = false;\n    \n    ammoModule: any;\n    body: any;\n\n    constructor(pos: Vector3, scene: Scene, ammoModule: any) {\n        this.greenMaterial = new StandardMaterial(\"GreenMaterial\", scene);\n        this.greenMaterial.diffuseColor = new Color3(0.1, 0.8, 0.5);\n        this.greenMaterial.emissiveColor = new Color3(0.1, 0.8, 0.5);\n\n        this.blackMaterial = new StandardMaterial(\"BlackMaterial\", scene);\n        this.blackMaterial.diffuseColor = new Color3(0.1, 0.1, 0.1);\n        this.blackMaterial.emissiveColor = new Color3(0.1, 0.1, 0.1);\n\n        this.scene = scene;\n        //Going Native\n        const physicsWorld = scene.getPhysicsEngine()?.getPhysicsPlugin().world;\n\n        this.wheelDirectionCS0 = new ammoModule.btVector3(0, -1, 0);\n        this.wheelAxleCS = new ammoModule.btVector3(-1, 0, 0);\n\n        const geometry = new ammoModule.btBoxShape(new ammoModule.btVector3(\n            this.chassisWidth * .5,\n            this.chassisHeight * .5,\n            this.chassisLength * .5));\n        const transform = new ammoModule.btTransform();\n        transform.setIdentity();\n        transform.setOrigin(new ammoModule.btVector3(0, 5, 0));\n        transform.setRotation(new ammoModule.btQuaternion(\n            this.ZERO_QUATERNION.x,\n            this.ZERO_QUATERNION.y,\n            this.ZERO_QUATERNION.z,\n            this.ZERO_QUATERNION.w));\n        const motionState = new ammoModule.btDefaultMotionState(transform);\n        const localInertia = new ammoModule.btVector3(0, 0, 0);\n        geometry.calculateLocalInertia(this.massVehicle, localInertia);\n\n\n        this.chassisMesh = this.createChassisMesh(this.chassisWidth, this.chassisHeight, this.chassisLength);\n\n\n        const massOffset = new ammoModule.btVector3(0, 0.4, 0);\n        const transform2 = new ammoModule.btTransform();\n        transform2.setIdentity();\n        transform2.setOrigin(massOffset);\n        const compound = new ammoModule.btCompoundShape();\n        compound.addChildShape(transform2, geometry);\n\n        const body = new ammoModule.btRigidBody(new ammoModule.btRigidBodyConstructionInfo(this.massVehicle, motionState, compound, localInertia));\n        body.setActivationState(4);\n\n        physicsWorld.addRigidBody(body);\n\n\n        this.tuning = new ammoModule.btVehicleTuning();\n        const rayCaster = new ammoModule.btDefaultVehicleRaycaster(physicsWorld);\n        this.vehicle = new ammoModule.btRaycastVehicle(this.tuning, body, rayCaster);\n        this.vehicle.setCoordinateSystem(0, 1, 2);\n        physicsWorld.addAction(this.vehicle);\n\n        const trans = this.vehicle.getChassisWorldTransform();\n\n        this.addWheel(true,\n            new ammoModule.btVector3(this.wheelHalfTrackFront, this.wheelAxisHeightFront, this.wheelAxisFrontPosition),\n            this.wheelRadiusFront, this.wheelWidthFront, this.FRONT_LEFT);\n        this.addWheel(true,\n            new ammoModule.btVector3(-this.wheelHalfTrackFront, this.wheelAxisHeightFront, this.wheelAxisFrontPosition),\n            this.wheelRadiusFront, this.wheelWidthFront, this.FRONT_RIGHT);\n        this.addWheel(false,\n            new ammoModule.btVector3(-this.wheelHalfTrackBack, this.wheelAxisHeightBack, this.wheelAxisPositionBack),\n            this.wheelRadiusBack, this.wheelWidthBack, this.BACK_LEFT);\n        this.addWheel(false,\n            new ammoModule.btVector3(this.wheelHalfTrackBack, this.wheelAxisHeightBack, this.wheelAxisPositionBack),\n            this.wheelRadiusBack, this.wheelWidthBack, this.BACK_RIGHT);\n\n        this.vehicleReady = true;\n        \n        this.ammoModule = ammoModule;\n        this.body = body;\n    }\n    \n    public reset() {\n        const origin = new this.ammoModule.btVector3(0, 5, 0);\n        const transform = new this.ammoModule.btTransform();\n        transform.setOrigin(origin);\n        transform.setRotation(new this.ammoModule.btQuaternion(\n            this.ZERO_QUATERNION.x,\n            this.ZERO_QUATERNION.y,\n            this.ZERO_QUATERNION.z,\n            this.ZERO_QUATERNION.w));\n\n        this.body.setWorldTransform(transform);\n    }\n\n    private createChassisMesh(w: number, l: number, h: number): Mesh {\n        const mesh = MeshBuilder.CreateBox(\"box\", {width: w, depth: h, height: l}, this.scene);\n        mesh.rotationQuaternion = new Quaternion();\n        mesh.material = this.greenMaterial;\n        return mesh;\n    }\n\n    private addWheel(isFront: boolean, pos: Vector3, radius: number, width: number, index: number) {\n\n        const wheelInfo = this.vehicle.addWheel(\n            pos,\n            this.wheelDirectionCS0,\n            this.wheelAxleCS,\n            this.suspension.restLength,\n            radius,\n            this.tuning,\n            isFront);\n\n        wheelInfo.set_m_suspensionStiffness(this.suspension.stiffness);\n        wheelInfo.set_m_wheelsDampingRelaxation(this.suspension.damping);\n        wheelInfo.set_m_wheelsDampingCompression(this.suspension.compression);\n        wheelInfo.set_m_maxSuspensionForce(600000);\n        wheelInfo.set_m_frictionSlip(40);\n        wheelInfo.set_m_rollInfluence(this.rollInfluence);\n\n        this.wheelMeshes[index] = this.createWheelMesh(radius, width);\n    }\n\n    private createWheelMesh(radius: number, width: number) {\n        //var mesh = new BABYLON.MeshBuilder.CreateBox(\"wheel\", {width:.82, height:.82, depth:.82}, scene);\n        const mesh = MeshBuilder.CreateCylinder(\"Wheel\", {\n            diameter: 1, height: 0.5, tessellation: 6\n        }, this.scene);\n        mesh.rotationQuaternion = new Quaternion();\n        mesh.material = this.blackMaterial;\n        return mesh;\n    }\n}","import { Axis } from \"@babylonjs/core/Maths/math\";\nimport { Car } from \"./car\";\nimport {GameCamera} from \"./camera\";\n\nconst actions = new Map<string, boolean>([\n    [\"acceleration\", false],\n    [\"braking\", false],\n    [\"right\", false],\n    [\"left\", false],\n    [\"reset\", false],\n    [\"stop\", false]\n]);\n\nconst keysActions = new Map<string, string>([\n    [\"KeyW\",'acceleration'],\n    [\"KeyS\",'braking'],\n    [\"KeyA\",'left'],\n    [\"KeyD\",'right'],\n    [\"KeyR\",'reset'],\n    [\"Space\", \"stop\"]\n]);\n\nexport class Controls {\n\n    car: Car;\n    camera: GameCamera;\n\n    constructor(car: Car, camera: GameCamera) {\n        this.car = car;\n        this.camera = camera;\n        window.addEventListener( 'keydown', this.keydown);\n        window.addEventListener( 'keyup', this.keyup);\n    }\n\n    update() {\n        if(this.car.vehicleReady){\n                  \n            const speed = this.car.vehicle.getCurrentSpeedKmHour();\n            const maxSteerVal = 0.2;\n            this.car.breakingForce = 0;\n            this.car.engineForce = 0;\n\n            if (actions.get(\"reset\")) {\n                //this.car.chassisMesh.position.set(0, 5, 0);\n                this.car.reset();\n                console.log(\"reset \" + this.car.chassisMesh.position);\n                this.camera.reset();\n                this.camera.lockedTarget = this.car.chassisMesh; //version 2.5 onwards\n            }\n            \n            if (actions.get(\"acceleration\")){\n                if (speed < -1){\n                    this.car.breakingForce = this.car.maxBreakingForce;\n                }else {\n                    this.car.engineForce = this.car.maxEngineForce;\n                }\n                    \n            } else if (actions.get(\"braking\")){\n                if (speed > 1){\n                    this.car.breakingForce = this.car.maxBreakingForce;\n                }else {\n                    this.car.engineForce = -this.car.maxEngineForce ;\n                }\n            } else if(actions.get(\"stop\")) {\n                if (speed > 1){\n                    this.car.breakingForce = this.car.maxBreakingForce*2;\n                } else if (speed < -1){\n                    this.car.engineForce = this.car.maxEngineForce*2;\n                }\n            }\n                    \n            if(actions.get(\"right\")){\n                if (this.car.vehicleSteering < this.car.steeringClamp){\n                    this.car.vehicleSteering += this.car.steeringIncrement;\n                }\n                    \n            } else if(actions.get(\"left\")){\n                if (this.car.vehicleSteering > -this.car.steeringClamp){\n                    this.car.vehicleSteering -= this.car.steeringIncrement;\n                }\n                    \n            } else {\n                this.car.vehicleSteering = 0;\n            }\n                    \n            this.car.vehicle.applyEngineForce(this.car.engineForce, this.car.FRONT_LEFT);\n            this.car.vehicle.applyEngineForce(this.car.engineForce, this.car.FRONT_RIGHT);\n                    \n            this.car.vehicle.setBrake(this.car.breakingForce / 2, this.car.FRONT_LEFT);\n            this.car.vehicle.setBrake(this.car.breakingForce / 2, this.car.FRONT_RIGHT);\n            this.car.vehicle.setBrake(this.car.breakingForce, this.car.BACK_LEFT);\n            this.car.vehicle.setBrake(this.car.breakingForce, this.car.BACK_RIGHT);\n                    \n            this.car.vehicle.setSteeringValue(this.car.vehicleSteering, this.car.FRONT_LEFT);\n            this.car.vehicle.setSteeringValue(this.car.vehicleSteering, this.car.FRONT_RIGHT);\n                    \n                    \n            let matrix, origin, rotation, i;\n            const n = this.car.vehicle.getNumWheels();\n            for (i = 0; i < n; i++) {\n                this.car.vehicle.updateWheelTransform(i, true);\n                matrix = this.car.vehicle.getWheelTransformWS(i);\n                origin = matrix.getOrigin();\n                rotation = matrix.getRotation();\n                this.car.wheelMeshes[i].position.set(origin.x(), origin.y(), origin.z());\n                this.car.wheelMeshes[i].rotationQuaternion?.set(rotation.x(), rotation.y(), rotation.z(), rotation.w());\n                this.car.wheelMeshes[i].rotate(Axis.Z, Math.PI/2);\n            }\n\n            matrix = this.car.vehicle.getChassisWorldTransform();\n            origin = matrix.getOrigin();\n            rotation = matrix.getRotation();\n            this.car.chassisMesh.position.set(origin.x(), origin.y(), origin.z());\n            this.car.chassisMesh.rotationQuaternion?.set(rotation.x(), rotation.y(), rotation.z(), rotation.w());\n            this.car.chassisMesh.rotate(Axis.X, Math.PI);\n                 \n        }\n    }\n\n    private keyup(e: KeyboardEvent) {\n        if(keysActions.get(e.code)) {\n            actions.set(keysActions.get(e.code)??\"\", false);\n            //e.preventDefault();\n            //e.stopPropagation();\n\n            //return false;\n        }\n    }\n\n    private keydown(e: KeyboardEvent) {\n        if(keysActions.get(e.code)) {\n            actions.set(keysActions.get(e.code)??\"\", true);\n            //e.preventDefault();\n            //e.stopPropagation();\n\n            //return false;\n        }\n    }\n\n\n}\n","import * as Ammo from \"ammo.js\";\n\nexport let ammoModule: any;\nexport const ammoReadyPromise = new Promise((resolve) => {\n    new Ammo().then((res: unknown) => {\n        ammoModule = res;\n        resolve(res);\n    });\n});\n","import {Engine} from \"@babylonjs/core/Engines/engine\";\nimport {Scene} from \"@babylonjs/core/scene\";\nimport {Vector3} from \"@babylonjs/core/Maths/math.vector\";\nimport {HemisphericLight} from \"@babylonjs/core/Lights/hemisphericLight\";\nimport {AmmoJSPlugin} from \"@babylonjs/core/Physics/Plugins/ammoJSPlugin\";\nimport \"@babylonjs/core/Physics/physicsEngineComponent\";\n\n// If you don't need the standard material you will still need to import it since the scene requires it.\nimport \"@babylonjs/core/Materials/standardMaterial\";\nimport {PhysicsImpostor} from \"@babylonjs/core/Physics/physicsImpostor\";\nimport {ammoModule, ammoReadyPromise} from \"../externals/ammo\";\nimport {CreateSceneClass} from \"../createScene\";\nimport {MeshBuilder} from \"@babylonjs/core/Meshes/meshBuilder\";\nimport {StandardMaterial} from \"@babylonjs/core/Materials/standardMaterial\";\nimport * as GRID from \"@babylonjs/materials/grid\";\n\nimport {Boxes} from \"./boxes\"\nimport {Car} from \"./car\";\nimport {Controls} from \"./controls\";\nimport {DEFAULT_CELL_SIZE, WorldMap} from \"./world\";\nimport {FollowCamera} from \"@babylonjs/core/Cameras/followCamera\";\nimport {fpsDiv, speedDiv, positionDiv, districtDiv} from \"../dom\";\nimport {GameCamera} from \"./camera\";\n\nclass ProRacerScene implements CreateSceneClass {\n    preTasks = [ammoReadyPromise];\n\n    createScene = async (engine: Engine, canvas: HTMLCanvasElement): Promise<Scene> => {\n        const scene = new Scene(engine);\n        \n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n        const light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\n        light.intensity = 0.7; // Default intensity is 1. Let's dim the light a small amount\n\n\n        scene.enablePhysics(new Vector3(0, -10, 0), new AmmoJSPlugin(true, ammoModule));\n        \n        const car = new Car(new Vector3(0, 4, -20), scene, ammoModule);\n        \n        const camera = new GameCamera(scene);\n        camera.lockedTarget = car.chassisMesh;\n        scene.activeCamera = camera;\n        \n        // Ground + Obstacles\n        const world = new WorldMap(scene)\n\n        // const boxes = new Boxes(scene)\n        // boxes.baseBoxes();\n        //boxes.randomBoxes();\n\n\n        \n        const controls = new Controls(car, camera);\n\n        let lastX = -9999, lastZ = -9999\n        let noUpdateNeeded = false\n\n        scene.registerBeforeRender(function () {\n            const dt = engine.getDeltaTime()/*.toFixed()*/ / 1000;\n            controls.update();\n            const carPos = car.chassisMesh.position;\n            const currX = Math.round(carPos.x / DEFAULT_CELL_SIZE)|0\n            const currZ = Math.round(carPos.z / DEFAULT_CELL_SIZE)|0\n            // Update world map moved to different cell or if not fully updated last cycle\n            if (lastX !== currX || lastZ !== currZ || !noUpdateNeeded) {\n                noUpdateNeeded = false;\n                console.log(currX, currZ)\n                lastX = currX\n                lastZ = currZ\n                noUpdateNeeded = world.update(currX, currZ)\n                positionDiv.innerHTML = currX+\",\"+currZ;\n                districtDiv.innerHTML = world.getDistrict(currX, currZ);\n            }\n            fpsDiv.innerHTML = engine.getFps().toFixed() + \" fps\";\n            speedDiv.innerHTML = car.vehicle.getCurrentSpeedKmHour().toFixed() + \" km/h\"\n        });\n\n        return scene;\n    };\n\n}\n\nexport default new ProRacerScene();\n","export default __webpack_public_path__ + \"c8f55e9ef9e4d3c0a223a3adaad7ad23.jpg\";","import {Scene} from \"@babylonjs/core/scene\";\nimport {MeshBuilder} from \"@babylonjs/core/Meshes/meshBuilder\";\nimport {PhysicsImpostor} from \"@babylonjs/core/Physics/physicsImpostor\";\nimport * as GRID from \"@babylonjs/materials/grid\";\nimport {GridMaterial} from \"@babylonjs/materials/grid\";\nimport {AssetsManager, GroundMesh} from \"@babylonjs/core\";\n\nimport sandTextureUrl from \"../../assets/sand.jpg\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\nimport {StandardMaterial} from \"@babylonjs/core/Materials/standardMaterial\";\nimport {Boxes} from \"./boxes\";\nimport {Color3, Color4} from \"@babylonjs/core/Maths/math\";\n\nexport const DEFAULT_CELL_SIZE = 100;\n\nexport class WorldMap {\n    //private material: GridMaterial;\n    private material: StandardMaterial;\n    \n    private debugMaterial: StandardMaterial;\n\n    private cells = new Map();\n    private scene: Scene;\n\n    constructor(scene: Scene) {\n        this.scene = scene;\n\n        //this.material = new GRID.GridMaterial(\"groundMaterial\", scene);\n        this.material = new StandardMaterial(\"ground material\", scene);\n        const texture = new Texture(sandTextureUrl, scene);\n        this.material.diffuseTexture = texture;\n        texture.uScale = 10;\n        texture.vScale = 10;\n\n        scene.fogMode = Scene.FOGMODE_LINEAR;\n        scene.fogStart = 20.0;\n        scene.fogEnd = 120.0;\n        scene.fogColor = new Color3(0.9, 0.9, 0.85);\n        scene.fogDensity = 0.03;\n        scene.clearColor = new Color4(0.9, 0.9, 0.85, 1.0);\n\n\n\n        this.debugMaterial = new StandardMaterial(\"BlueMaterial\", scene);\n        this.debugMaterial.diffuseColor = new Color3(0.5,0.4,0.8);\n        this.debugMaterial.emissiveColor = new Color3(0.5,0.4,0.8);\n\n\n    }\n\n    /**\n     * Update the world map based on the player's position\n     * @param x - player's x position\n     * @param z - player's z position\n     * @returns true if the world map was fully updated, false if needs more updates in the next cycle\n     */\n    public update(x: number, z: number): boolean {\n        const indexes = [\n            [x + 1, z + 1],\n            [x + 1, z],\n            [x + 1, z - 1],\n            [x, z + 1],\n            [x, z],\n            [x, z - 1],\n            [x - 1, z + 1],\n            [x - 1, z],\n            [x - 1, z - 1],\n        ];\n        // const indexes = [ [x, z]];\n        for (const index of indexes) {\n            const xx = index[0]\n            const zz = index[1]\n            if (!this.cells.has(`${xx},${zz}`)) {\n                const cell  = this.createCell(this.scene, xx, zz);\n                this.cells.set(`${xx},${zz}`, cell);\n                console.log(`Created cell ${xx},${zz}`);\n                // only create one cell per update cycle\n                // remaining cells will be created in the next cycle\n                return false;\n            }\n        }\n        //console.log(this.cells.size);\n        for (const key of this.cells.keys()) {\n            const [xs, zs] = key.split(\",\");\n            const xx = parseInt(xs);\n            const zz = parseInt(zs);\n            if (xx < (x - 1) || xx > (x + 1) || zz < (z - 1) || zz > (z + 1)) {\n            // if (xx != x || zz != z) {\n                const cell = this.cells.get(key);\n                if (cell) {\n                    this.scene.removeMesh(cell);\n                    cell.dispose();\n                    this.cells.delete(key);\n                }\n            }\n        }\n        return true;\n\n    }\n\n    private createCell(scene: Scene, x: number, z: number): GroundMesh {\n        const ground = MeshBuilder.CreateGround(\"ground\", {\n            width: DEFAULT_CELL_SIZE,\n            height: DEFAULT_CELL_SIZE,\n            subdivisions: 2\n        }, scene);\n\n        ground.position.set(x * DEFAULT_CELL_SIZE, 0, z * DEFAULT_CELL_SIZE);\n\n        ground.physicsImpostor = new PhysicsImpostor(ground, PhysicsImpostor.BoxImpostor, {\n            mass: 0,\n            friction: 0.5,\n            restitution: 0.7\n        }, scene);\n        \n        const halfCellSize = DEFAULT_CELL_SIZE/2;\n\n        // START: Dev boxes\n        const box = MeshBuilder.CreateBox(\"box\", { width: 1, depth: 1, height: 4 }, this.scene);\n        box.material = this.debugMaterial;\n        ground.addChild(box);\n        const box0 = MeshBuilder.CreateBox(\"box\", { width: 1, depth: 1, height: 8 }, this.scene);\n        box0.material = this.debugMaterial;\n        box0.position.set(x * DEFAULT_CELL_SIZE + halfCellSize, 4, z * DEFAULT_CELL_SIZE + halfCellSize);\n        ground.addChild(box0);\n        const box1 = MeshBuilder.CreateBox(\"box\", { width: 1, depth: 1, height: 8 }, this.scene);\n        box1.material = this.debugMaterial;\n        box1.position.set(x * DEFAULT_CELL_SIZE - halfCellSize, 4, z * DEFAULT_CELL_SIZE - halfCellSize);\n        ground.addChild(box1);\n        // END: Dev boxes\n        \n        new Boxes(this.scene).cellBoxes(DEFAULT_CELL_SIZE, ground);\n\n        ground.material = this.material;\n\n        return ground;\n    }\n    \n    async getData(): Promise<string> {\n        let fileName = `world/0,0.txt`;\n        try {\n            let response = await fetch(fileName);\n            let data = await response.text();\n            console.log(data);\n            return data;\n        } catch (error) {\n            console.error(error);\n            return \"\";\n        }\n    }\n    \n\n    getDistrict(currX: number, currZ: number): string {\n        let fileName = `file:./world/${currX},${currZ}.txt`;\n        // const assetsManager = new AssetsManager(this.scene);\n        // const myTextFile = assetsManager.addTextFileTask(\"my text file task\", fileName);\n        // assetsManager.load();\n        // assetsManager.onFinish = function (task) {\n        //     console.log(\"task successful\", task);\n        //     console.log(myTextFile.text);\n        //     return myTextFile.text;\n        // }\n        \n        // fs.readFile(fileName, 'utf8', (err, data) => {\n        //         if (err) { \n        //             console.error(err); \n        //             return; \n        //         }\n        //         console.log(data);\n        // });\n        this.getData().then(\n            data => {\n                console.log(\"> \" + data);\n            }\n        );\n        \n        if (currX == 0 && currZ == 0) {\n            return \"Origin\";\n        }\n        if (currX > 3 || currZ > 3 || currX < -3 || currZ < -3) {\n            return \"You are lost!\";\n        }\n        return \"Somewhere\";\n    }\n}\n"],"names":["Boxes","constructor","scene","this","blueMaterial","diffuseColor","emissiveColor","concreteMaterial","diffuseTexture","concrete","baseBoxes","createBox","Math","PI","randomBoxes","s","p","r","i","m","random","m3","m2","set","size","position","rotation","mass","box","CreateBox","width","x","depth","z","height","y","material","physicsImpostor","BoxImpostor","friction","restitution","cellBoxes","cellSize","cell","halfCellSize","parent","createCellBox","GameCamera","super","reset","cameraAcceleration","maxCameraSpeed","attachControl","radius","heightOffset","rotationOffset","Car","pos","ammoModule","ZERO_QUATERNION","FRONT_LEFT","FRONT_RIGHT","BACK_LEFT","BACK_RIGHT","chassisWidth","chassisHeight","chassisLength","massVehicle","wheelAxisPositionBack","wheelRadiusBack","wheelWidthBack","wheelHalfTrackBack","wheelAxisHeightBack","wheelAxisFrontPosition","wheelHalfTrackFront","wheelAxisHeightFront","wheelRadiusFront","wheelWidthFront","suspension","stiffness","damping","compression","restLength","rollInfluence","steeringIncrement","steeringClamp","maxEngineForce","maxBreakingForce","incEngine","vehicleSteering","engineForce","breakingForce","wheelMeshes","vehicleReady","greenMaterial","blackMaterial","physicsWorld","getPhysicsEngine","getPhysicsPlugin","world","wheelDirectionCS0","btVector3","wheelAxleCS","geometry","btBoxShape","transform","btTransform","setIdentity","setOrigin","setRotation","btQuaternion","w","motionState","btDefaultMotionState","localInertia","calculateLocalInertia","chassisMesh","createChassisMesh","massOffset","transform2","compound","btCompoundShape","addChildShape","body","btRigidBody","btRigidBodyConstructionInfo","setActivationState","addRigidBody","tuning","btVehicleTuning","rayCaster","btDefaultVehicleRaycaster","vehicle","btRaycastVehicle","setCoordinateSystem","addAction","getChassisWorldTransform","addWheel","origin","setWorldTransform","l","h","mesh","rotationQuaternion","isFront","index","wheelInfo","set_m_suspensionStiffness","set_m_wheelsDampingRelaxation","set_m_wheelsDampingCompression","set_m_maxSuspensionForce","set_m_frictionSlip","set_m_rollInfluence","createWheelMesh","CreateCylinder","diameter","tessellation","actions","Map","keysActions","Controls","car","camera","window","addEventListener","keydown","keyup","update","speed","getCurrentSpeedKmHour","matrix","get","console","log","lockedTarget","applyEngineForce","setBrake","setSteeringValue","n","getNumWheels","updateWheelTransform","getWheelTransformWS","getOrigin","getRotation","rotate","Z","X","e","code","ammoReadyPromise","Promise","resolve","then","res","preTasks","createScene","async","engine","canvas","intensity","enablePhysics","activeCamera","WorldMap","controls","lastX","lastZ","noUpdateNeeded","registerBeforeRender","getDeltaTime","carPos","currX","round","DEFAULT_CELL_SIZE","currZ","innerHTML","getDistrict","getFps","toFixed","cells","texture","sand","uScale","vScale","fogMode","FOGMODE_LINEAR","fogStart","fogEnd","fogColor","fogDensity","clearColor","debugMaterial","indexes","xx","zz","has","createCell","key","keys","xs","zs","split","parseInt","removeMesh","dispose","delete","ground","CreateGround","subdivisions","addChild","box0","box1","getData","response","fetch","data","text","error"],"sourceRoot":""}