{"version":3,"file":"js/985.babylonBundle.js","mappings":"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","sources":["webpack://trans-america/./assets/concrete.png","webpack://trans-america/./src/scenes/boxes.ts","webpack://trans-america/./src/scenes/camera.ts","webpack://trans-america/./src/scenes/car.ts","webpack://trans-america/./src/scenes/controls.ts","webpack://trans-america/./src/externals/ammo.ts","webpack://trans-america/./src/scenes/proRacer.ts","webpack://trans-america/./assets/sand.jpg","webpack://trans-america/./assets/grass.jpg","webpack://trans-america/./src/scenes/world.ts"],"sourcesContent":["export default __webpack_public_path__ + \"03713868bab7dd2e96995060bf2ae0f5.png\";","import { Material } from \"@babylonjs/core/Materials/material\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\nimport { Color3, Vector3 } from \"@babylonjs/core/Maths/math\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\";\nimport { PhysicsImpostor } from \"@babylonjs/core/Physics/physicsImpostor\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport {Texture} from \"@babylonjs/core/Materials/Textures/texture\";\n\nimport concreteTextureUrl from \"../../assets/concrete.png\";\n\nexport class Boxes {\n    blueMaterial: StandardMaterial;\n    concreteMaterial: StandardMaterial;\n    scene: Scene;\n\n    constructor(scene: Scene) {\n        this.scene = scene;\n\n        this.blueMaterial = new StandardMaterial(\"BlueMaterial\", scene);\n        this.blueMaterial.diffuseColor = new Color3(0.5,0.4,0.8);\n        this.blueMaterial.emissiveColor = new Color3(0.5,0.4,0.8);\n        \n        this.concreteMaterial = new StandardMaterial(\"concrete material\", scene);\n        this.concreteMaterial.diffuseTexture = new Texture(concreteTextureUrl, scene);\n    }\n\n    public baseBoxes() : void {\n        this.createBox(new Vector3(4,1,12),new Vector3(0,0,25),new Vector3(-Math.PI/8,0,0),0);\n        this.createBox(new Vector3(4,1,12),new Vector3(25,0,0),new Vector3(-Math.PI/8,Math.PI/2,0),0);\n        this.createBox(new Vector3(4,1,12),new Vector3(0,0,-25),new Vector3(Math.PI/8,0,0),0);\n        this.createBox(new Vector3(4,1,12),new Vector3(-25,0,0),new Vector3(Math.PI/8,Math.PI/2,0),0);\n    }\n\n    public randomBoxes() : void {\n        const s = new Vector3();\n        const p = new Vector3();\n        const r = new Vector3();\n        for(let i=0;i<20;i++){\n            const m = Math.random()*300-150+5;\n            const m3 = Math.random()*300-150+5;\n            const m2 = Math.random()*10;\n            s.set(m2,m2,m2);\n            p.set(m3,0,m);\n            r.set(m,m,m);\n            this.createBox(s,p,r,0);\n        }\n    \n        for(let i=0;i<30;i++){\n            const m = Math.random()*300-150+5;\n            const m3 = Math.random()*300-150+5;\n            const m2 = Math.random()*3;\n            s.set(m2,m2,m2);\n            p.set(m3,0,m);\n            r.set(m,m,m);\n            this.createBox(s,p,r,5);\n        }\n    }\n\n    private createBox(size: Vector3, position: Vector3, rotation: Vector3, mass: number) : Mesh {\n        const box = MeshBuilder.CreateBox(\"box\", { width: size.x, depth: size.z, height: size.y }, this.scene);\n        box.position.set(position.x,position.y,position.z);\n        box.rotation.set(rotation.x,rotation.y,rotation.z);\n        if(!mass){\n            mass = 0;\n            box.material = this.concreteMaterial\n        } else {\n            box.position.y += 5;\n            box.material = this.blueMaterial;\n    \n        }\n        box.physicsImpostor = new PhysicsImpostor(box, PhysicsImpostor.BoxImpostor, { mass: mass, friction: 0.5, restitution: 0.7 }, this.scene);\n        return box;\n    }\n    \n    public cellBoxes(cellSize: number, cell: Mesh) : void {\n        const halfCellSize = cellSize/2;\n        const s = new Vector3();\n        const p = new Vector3();\n        const r = new Vector3();\n        for(let i=0;i<20;i++){\n            const m = Math.random()*cellSize-halfCellSize;\n            const m3 = Math.random()*cellSize-halfCellSize;\n            const m2 = Math.random()*10;\n            s.set(m2,m2,m2);\n            p.set(m3,0,m);\n            r.set(m,m,m);\n            const box = this.createBox(s,p,r,0);\n            box.parent = cell;\n        }\n    }\n\n    private createCellBox(size: Vector3, position: Vector3, rotation: Vector3, mass: number) : Mesh {\n        const box = MeshBuilder.CreateBox(\"box\", { width: size.x, depth: size.z, height: size.y });\n        box.position.set(position.x,position.y,position.z);\n        box.rotation.set(rotation.x,rotation.y,rotation.z);\n        if(!mass){\n            mass = 0;\n            box.material = this.concreteMaterial\n        } else {\n            box.position.y += 5;\n            box.material = this.blueMaterial;\n\n        }\n        box.physicsImpostor = new PhysicsImpostor(box, PhysicsImpostor.BoxImpostor, { mass: mass, friction: 0.5, restitution: 0.7 }, this.scene);\n        return box;\n    }\n\n}\n\n","import {FollowCamera} from \"@babylonjs/core/Cameras/followCamera\";\nimport {Vector3} from \"@babylonjs/core/Maths/math\";\nimport {Scene} from \"@babylonjs/core/scene\";\nimport {AbstractMesh} from \"@babylonjs/core\";\n\nexport class GameCamera extends FollowCamera {\n    \n    constructor(scene: Scene, lockedTarget: AbstractMesh) {\n        super(\"GameCamera\", new Vector3(0, 10, -10), scene, lockedTarget);\n        this.reset();\n        this.cameraAcceleration = 0.05;\n        this.maxCameraSpeed = 400;\n        this.attachControl(true);\n    }\n    \n    reset() {\n        this.radius = 10;\n        this.heightOffset = 4;\n        this.rotationOffset = 0;\n    }\n}","import {Mesh, StandardMaterial} from \"@babylonjs/core\";\nimport {Color3, Quaternion, Vector3} from \"@babylonjs/core/Maths/math\";\nimport {MeshBuilder} from \"@babylonjs/core/Meshes/meshBuilder\";\nimport {Scene} from \"@babylonjs/core/scene\";\n\nexport class Car {\n    ZERO_QUATERNION = new Quaternion();\n\n    FRONT_LEFT = 0;\n    FRONT_RIGHT = 1;\n    BACK_LEFT = 2;\n    BACK_RIGHT = 3;\n\n    chassisWidth = 1.8;\n    chassisHeight = .6;\n    chassisLength = 4;\n    massVehicle = 200;\n\n\n    wheelAxisPositionBack = -1;\n    wheelRadiusBack = .4;\n    wheelWidthBack = .3;\n    wheelHalfTrackBack = 1;\n    wheelAxisHeightBack = 0.4;\n\n    wheelAxisFrontPosition = 1.0;\n    wheelHalfTrackFront = 1;\n    wheelAxisHeightFront = 0.4;\n    wheelRadiusFront = .4;\n    wheelWidthFront = .3;\n\n    friction = 5;\n    suspension = {\n        stiffness: 10,\n        damping: 0.3,\n        compression: 4.4,\n        restLength: 0.6\n    }\n\n    rollInfluence = 0.0;\n\n    wheelDirectionCS0: number | undefined;\n    wheelAxleCS: number | undefined;\n\n    steeringIncrement = .01;\n    steeringClamp = 0.2;\n    maxEngineForce = 500;\n    maxBreakingForce = 10;\n    incEngine = 10.0;\n\n    vehicleSteering = 0;\n    engineForce = 0;\n    breakingForce = 0;\n\n    private scene: Scene;\n\n    greenMaterial: StandardMaterial;\n    blackMaterial: StandardMaterial;\n\n\n    tuning: any;\n    vehicle: any;\n    wheelMeshes: Mesh[] = [];\n    chassisMesh: Mesh;\n\n\n    vehicleReady = false;\n    \n    ammoModule: any;\n    body: any;\n\n    constructor(pos: Vector3, scene: Scene, ammoModule: any) {\n        this.greenMaterial = new StandardMaterial(\"GreenMaterial\", scene);\n        this.greenMaterial.diffuseColor = new Color3(0.1, 0.8, 0.5);\n        this.greenMaterial.emissiveColor = new Color3(0.1, 0.8, 0.5);\n\n        this.blackMaterial = new StandardMaterial(\"BlackMaterial\", scene);\n        this.blackMaterial.diffuseColor = new Color3(0.1, 0.1, 0.1);\n        this.blackMaterial.emissiveColor = new Color3(0.1, 0.1, 0.1);\n\n        this.scene = scene;\n        //Going Native\n        const physicsWorld = scene.getPhysicsEngine()?.getPhysicsPlugin().world;\n\n        this.wheelDirectionCS0 = new ammoModule.btVector3(0, -1, 0);\n        this.wheelAxleCS = new ammoModule.btVector3(-1, 0, 0);\n\n        const geometry = new ammoModule.btBoxShape(new ammoModule.btVector3(\n            this.chassisWidth * .5,\n            this.chassisHeight * .5,\n            this.chassisLength * .5));\n        const transform = new ammoModule.btTransform();\n        transform.setIdentity();\n        transform.setOrigin(new ammoModule.btVector3(0, 5, 0));\n        transform.setRotation(new ammoModule.btQuaternion(\n            this.ZERO_QUATERNION.x,\n            this.ZERO_QUATERNION.y,\n            this.ZERO_QUATERNION.z,\n            this.ZERO_QUATERNION.w));\n        const motionState = new ammoModule.btDefaultMotionState(transform);\n        const localInertia = new ammoModule.btVector3(0, 0, 0);\n        geometry.calculateLocalInertia(this.massVehicle, localInertia);\n\n\n        this.chassisMesh = this.createChassisMesh(this.chassisWidth, this.chassisHeight, this.chassisLength);\n\n\n        const massOffset = new ammoModule.btVector3(0, 0.4, 0);\n        const transform2 = new ammoModule.btTransform();\n        transform2.setIdentity();\n        transform2.setOrigin(massOffset);\n        const compound = new ammoModule.btCompoundShape();\n        compound.addChildShape(transform2, geometry);\n\n        const body = new ammoModule.btRigidBody(new ammoModule.btRigidBodyConstructionInfo(this.massVehicle, motionState, compound, localInertia));\n        body.setActivationState(4);\n\n        physicsWorld.addRigidBody(body);\n\n\n        this.tuning = new ammoModule.btVehicleTuning();\n        const rayCaster = new ammoModule.btDefaultVehicleRaycaster(physicsWorld);\n        this.vehicle = new ammoModule.btRaycastVehicle(this.tuning, body, rayCaster);\n        this.vehicle.setCoordinateSystem(0, 1, 2);\n        physicsWorld.addAction(this.vehicle);\n\n        const trans = this.vehicle.getChassisWorldTransform();\n\n        this.addWheel(true,\n            new ammoModule.btVector3(this.wheelHalfTrackFront, this.wheelAxisHeightFront, this.wheelAxisFrontPosition),\n            this.wheelRadiusFront, this.wheelWidthFront, this.FRONT_LEFT);\n        this.addWheel(true,\n            new ammoModule.btVector3(-this.wheelHalfTrackFront, this.wheelAxisHeightFront, this.wheelAxisFrontPosition),\n            this.wheelRadiusFront, this.wheelWidthFront, this.FRONT_RIGHT);\n        this.addWheel(false,\n            new ammoModule.btVector3(-this.wheelHalfTrackBack, this.wheelAxisHeightBack, this.wheelAxisPositionBack),\n            this.wheelRadiusBack, this.wheelWidthBack, this.BACK_LEFT);\n        this.addWheel(false,\n            new ammoModule.btVector3(this.wheelHalfTrackBack, this.wheelAxisHeightBack, this.wheelAxisPositionBack),\n            this.wheelRadiusBack, this.wheelWidthBack, this.BACK_RIGHT);\n\n        this.vehicleReady = true;\n        \n        this.ammoModule = ammoModule;\n        this.body = body;\n    }\n    \n    public reset() {\n        const origin = new this.ammoModule.btVector3(0, 5, 0);\n        const transform = new this.ammoModule.btTransform();\n        transform.setOrigin(origin);\n        transform.setRotation(new this.ammoModule.btQuaternion(\n            this.ZERO_QUATERNION.x,\n            this.ZERO_QUATERNION.y,\n            this.ZERO_QUATERNION.z,\n            this.ZERO_QUATERNION.w));\n\n        this.body.setWorldTransform(transform);\n    }\n\n    private createChassisMesh(w: number, l: number, h: number): Mesh {\n        const mesh = MeshBuilder.CreateBox(\"box\", {width: w, depth: h, height: l}, this.scene);\n        mesh.rotationQuaternion = new Quaternion();\n        mesh.material = this.greenMaterial;\n        return mesh;\n    }\n\n    private addWheel(isFront: boolean, pos: Vector3, radius: number, width: number, index: number) {\n\n        const wheelInfo = this.vehicle.addWheel(\n            pos,\n            this.wheelDirectionCS0,\n            this.wheelAxleCS,\n            this.suspension.restLength,\n            radius,\n            this.tuning,\n            isFront);\n\n        wheelInfo.set_m_suspensionStiffness(this.suspension.stiffness);\n        wheelInfo.set_m_wheelsDampingRelaxation(this.suspension.damping);\n        wheelInfo.set_m_wheelsDampingCompression(this.suspension.compression);\n        wheelInfo.set_m_maxSuspensionForce(600000);\n        wheelInfo.set_m_frictionSlip(40);\n        wheelInfo.set_m_rollInfluence(this.rollInfluence);\n\n        this.wheelMeshes[index] = this.createWheelMesh(radius, width);\n    }\n\n    private createWheelMesh(radius: number, width: number) {\n        //var mesh = new BABYLON.MeshBuilder.CreateBox(\"wheel\", {width:.82, height:.82, depth:.82}, scene);\n        const mesh = MeshBuilder.CreateCylinder(\"Wheel\", {\n            diameter: 1, height: 0.5, tessellation: 6\n        }, this.scene);\n        mesh.rotationQuaternion = new Quaternion();\n        mesh.material = this.blackMaterial;\n        return mesh;\n    }\n}","import { Axis } from \"@babylonjs/core/Maths/math\";\nimport { Car } from \"./car\";\nimport {GameCamera} from \"./camera\";\n\nconst actions = new Map<string, boolean>([\n    [\"acceleration\", false],\n    [\"braking\", false],\n    [\"right\", false],\n    [\"left\", false],\n    [\"reset\", false],\n    [\"stop\", false]\n]);\n\nconst keysActions = new Map<string, string>([\n    [\"KeyW\",'acceleration'],\n    [\"KeyS\",'braking'],\n    [\"KeyA\",'left'],\n    [\"KeyD\",'right'],\n    [\"KeyR\",'reset'],\n    [\"Space\", \"stop\"]\n]);\n\nexport class Controls {\n\n    car: Car;\n    camera: GameCamera;\n\n    constructor(car: Car, camera: GameCamera) {\n        this.car = car;\n        this.camera = camera;\n        window.addEventListener( 'keydown', this.keydown);\n        window.addEventListener( 'keyup', this.keyup);\n    }\n\n    update() {\n        if(this.car.vehicleReady){\n                  \n            const speed = this.car.vehicle.getCurrentSpeedKmHour();\n            const maxSteerVal = 0.2;\n            this.car.breakingForce = 0;\n            this.car.engineForce = 0;\n\n            if (actions.get(\"reset\")) {\n                //this.car.chassisMesh.position.set(0, 5, 0);\n                this.car.reset();\n                console.log(\"reset \" + this.car.chassisMesh.position);\n                this.camera.reset();\n                this.camera.lockedTarget = this.car.chassisMesh; //version 2.5 onwards\n            }\n            \n            if (actions.get(\"acceleration\")){\n                if (speed < -1){\n                    this.car.breakingForce = this.car.maxBreakingForce;\n                }else {\n                    this.car.engineForce = this.car.maxEngineForce;\n                }\n                    \n            } else if (actions.get(\"braking\")){\n                if (speed > 1){\n                    this.car.breakingForce = this.car.maxBreakingForce;\n                }else {\n                    this.car.engineForce = -this.car.maxEngineForce ;\n                }\n            } else if(actions.get(\"stop\")) {\n                if (speed > 1){\n                    this.car.breakingForce = this.car.maxBreakingForce*2;\n                } else if (speed < -1){\n                    this.car.engineForce = this.car.maxEngineForce*2;\n                }\n            }\n                    \n            if(actions.get(\"right\")){\n                if (this.car.vehicleSteering < this.car.steeringClamp){\n                    this.car.vehicleSteering += this.car.steeringIncrement;\n                }\n                    \n            } else if(actions.get(\"left\")){\n                if (this.car.vehicleSteering > -this.car.steeringClamp){\n                    this.car.vehicleSteering -= this.car.steeringIncrement;\n                }\n                    \n            } else {\n                this.car.vehicleSteering = 0;\n            }\n                    \n            this.car.vehicle.applyEngineForce(this.car.engineForce, this.car.FRONT_LEFT);\n            this.car.vehicle.applyEngineForce(this.car.engineForce, this.car.FRONT_RIGHT);\n                    \n            this.car.vehicle.setBrake(this.car.breakingForce / 2, this.car.FRONT_LEFT);\n            this.car.vehicle.setBrake(this.car.breakingForce / 2, this.car.FRONT_RIGHT);\n            this.car.vehicle.setBrake(this.car.breakingForce, this.car.BACK_LEFT);\n            this.car.vehicle.setBrake(this.car.breakingForce, this.car.BACK_RIGHT);\n                    \n            this.car.vehicle.setSteeringValue(this.car.vehicleSteering, this.car.FRONT_LEFT);\n            this.car.vehicle.setSteeringValue(this.car.vehicleSteering, this.car.FRONT_RIGHT);\n                    \n                    \n            let matrix, origin, rotation, i;\n            const n = this.car.vehicle.getNumWheels();\n            for (i = 0; i < n; i++) {\n                this.car.vehicle.updateWheelTransform(i, true);\n                matrix = this.car.vehicle.getWheelTransformWS(i);\n                origin = matrix.getOrigin();\n                rotation = matrix.getRotation();\n                this.car.wheelMeshes[i].position.set(origin.x(), origin.y(), origin.z());\n                this.car.wheelMeshes[i].rotationQuaternion?.set(rotation.x(), rotation.y(), rotation.z(), rotation.w());\n                this.car.wheelMeshes[i].rotate(Axis.Z, Math.PI/2);\n            }\n\n            matrix = this.car.vehicle.getChassisWorldTransform();\n            origin = matrix.getOrigin();\n            rotation = matrix.getRotation();\n            this.car.chassisMesh.position.set(origin.x(), origin.y(), origin.z());\n            this.car.chassisMesh.rotationQuaternion?.set(rotation.x(), rotation.y(), rotation.z(), rotation.w());\n            this.car.chassisMesh.rotate(Axis.X, Math.PI);\n                 \n        }\n    }\n\n    private keyup(e: KeyboardEvent) {\n        if(keysActions.get(e.code)) {\n            actions.set(keysActions.get(e.code)??\"\", false);\n            //e.preventDefault();\n            //e.stopPropagation();\n\n            //return false;\n        }\n    }\n\n    private keydown(e: KeyboardEvent) {\n        if(keysActions.get(e.code)) {\n            actions.set(keysActions.get(e.code)??\"\", true);\n            //e.preventDefault();\n            //e.stopPropagation();\n\n            //return false;\n        }\n    }\n\n\n}\n","import * as Ammo from \"ammo.js\";\n\nexport let ammoModule: any;\nexport const ammoReadyPromise = new Promise((resolve) => {\n    new Ammo().then((res: unknown) => {\n        ammoModule = res;\n        resolve(res);\n    });\n});\n","import {Engine} from \"@babylonjs/core/Engines/engine\";\nimport {Scene} from \"@babylonjs/core/scene\";\nimport {Vector3} from \"@babylonjs/core/Maths/math.vector\";\nimport {HemisphericLight} from \"@babylonjs/core/Lights/hemisphericLight\";\nimport {AmmoJSPlugin} from \"@babylonjs/core/Physics/Plugins/ammoJSPlugin\";\nimport \"@babylonjs/core/Physics/physicsEngineComponent\";\n\n// If you don't need the standard material you will still need to import it since the scene requires it.\nimport \"@babylonjs/core/Materials/standardMaterial\";\nimport {PhysicsImpostor} from \"@babylonjs/core/Physics/physicsImpostor\";\nimport {ammoModule, ammoReadyPromise} from \"../externals/ammo\";\nimport {CreateSceneClass} from \"../createScene\";\nimport {MeshBuilder} from \"@babylonjs/core/Meshes/meshBuilder\";\nimport {StandardMaterial} from \"@babylonjs/core/Materials/standardMaterial\";\nimport * as GRID from \"@babylonjs/materials/grid\";\n\nimport {Boxes} from \"./boxes\"\nimport {Car} from \"./car\";\nimport {Controls} from \"./controls\";\nimport {DEFAULT_CELL_SIZE, WorldMap} from \"./world\";\nimport {FollowCamera} from \"@babylonjs/core/Cameras/followCamera\";\nimport {fpsDiv, speedDiv, positionDiv, districtDiv} from \"../dom\";\nimport {GameCamera} from \"./camera\";\n\nclass ProRacerScene implements CreateSceneClass {\n    preTasks = [ammoReadyPromise];\n\n    createScene = async (engine: Engine, canvas: HTMLCanvasElement): Promise<Scene> => {\n        const scene = new Scene(engine);\n        \n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n        const light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\n        light.intensity = 0.7; // Default intensity is 1. Let's dim the light a small amount\n\n\n        scene.enablePhysics(new Vector3(0, -10, 0), new AmmoJSPlugin(true, ammoModule));\n\n        const car = new Car(new Vector3(0, 4, -20), scene, ammoModule);\n        const camera = new GameCamera(scene, car.chassisMesh);\n        const world = new WorldMap(scene)\n        const controls = new Controls(car, camera);\n\n        scene.activeCamera = camera;\n        \n        scene.registerBeforeRender(function () {\n            const dt = engine.getDeltaTime()/*.toFixed()*/ / 1000;\n            controls.update();\n            const carPos = car.chassisMesh.position;\n            const cellX = Math.round(carPos.x / DEFAULT_CELL_SIZE)|0\n            const cellZ = Math.round(carPos.z / DEFAULT_CELL_SIZE)|0\n            world.update(cellX, cellZ);\n            let fps = engine.getFps();\n            if (fps < 55) {\n                fpsDiv.style.color = \"red\";\n            } else {\n                fpsDiv.style.color = \"white\";\n            }\n            fpsDiv.innerHTML = fps.toFixed() + \" fps\";\n            speedDiv.innerHTML = car.vehicle.getCurrentSpeedKmHour().toFixed() + \" km/h\"\n        });\n\n        return scene;\n    };\n\n}\n\nexport default new ProRacerScene();\n","export default __webpack_public_path__ + \"c8f55e9ef9e4d3c0a223a3adaad7ad23.jpg\";","export default __webpack_public_path__ + \"c77efafbfaba1476dc4fbf577bd891b4.jpg\";","import {Scene} from \"@babylonjs/core/scene\";\nimport {MeshBuilder} from \"@babylonjs/core/Meshes/meshBuilder\";\nimport {PhysicsImpostor} from \"@babylonjs/core/Physics/physicsImpostor\";\nimport * as GRID from \"@babylonjs/materials/grid\";\nimport {GridMaterial} from \"@babylonjs/materials/grid\";\nimport {AssetsManager, GroundMesh} from \"@babylonjs/core\";\n\nimport sandTextureUrl from \"../../assets/sand.jpg\";\nimport grassTextureUrl from \"../../assets/grass.jpg\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\nimport {StandardMaterial} from \"@babylonjs/core/Materials/standardMaterial\";\nimport {Boxes} from \"./boxes\";\nimport {Color3, Color4} from \"@babylonjs/core/Maths/math\";\nimport {districtDiv, positionDiv} from \"../dom\";\nimport {delay} from \"../utils\";\n\nexport const DEFAULT_CELL_SIZE = 100;\n\ntype CellData = {\n    name: string;\n    material: string\n}\nconst DEFAULT_CELL_DATA: CellData = {name: \"Unknown\", material: \"sand\"};\n\nclass Cell {\n    readonly name: string;\n    readonly ground: GroundMesh;\n    \n    constructor(scene: Scene, x: number, z: number, name: string, material: StandardMaterial) {\n        this.name = name;\n        this.ground = MeshBuilder.CreateGround(\"ground\", {\n            width: DEFAULT_CELL_SIZE,\n            height: DEFAULT_CELL_SIZE,\n            subdivisions: 2\n        }, scene);\n        this.ground.position.set(x * DEFAULT_CELL_SIZE, 0, z * DEFAULT_CELL_SIZE);\n        this.ground.physicsImpostor = new PhysicsImpostor(this.ground, PhysicsImpostor.BoxImpostor, {\n            mass: 0,\n            friction: 0.5,\n            restitution: 0.7\n        }, scene);\n        this.ground.material = material;\n    }\n}\n\n\nexport class WorldMap {\n    private sandMaterial: StandardMaterial;\n    private grassMaterial: StandardMaterial;\n    \n    private debugMaterial: StandardMaterial;\n\n    private cells: Map<string, Cell | null> = new Map();\n    private scene: Scene;\n\n    private lastX = -9999;\n    private lastZ = -9999;\n    private noUpdateNeeded = false;\n\n\n    constructor(scene: Scene) {\n        this.scene = scene;\n\n        //this.material = new GRID.GridMaterial(\"groundMaterial\", scene);\n        this.sandMaterial = new StandardMaterial(\"sand material\", scene);\n        const sandTexture = new Texture(sandTextureUrl, scene);\n        sandTexture.vScale = 10;\n        sandTexture.uScale = 10;\n        this.sandMaterial.diffuseTexture = sandTexture;\n\n        this.grassMaterial = new StandardMaterial(\"grass material\", scene);\n        const grassTexture = new Texture(grassTextureUrl, scene);\n        grassTexture.uScale = 10;\n        grassTexture.vScale = 10;\n        this.grassMaterial.diffuseTexture = grassTexture;\n\n        scene.fogMode = Scene.FOGMODE_LINEAR;\n        scene.fogStart = 20.0;\n        scene.fogEnd = 120.0;\n        scene.fogColor = new Color3(0.9, 0.9, 0.85);\n        scene.fogDensity = 0.03;\n        scene.clearColor = new Color4(0.9, 0.9, 0.85, 1.0);\n\n\n\n        this.debugMaterial = new StandardMaterial(\"BlueMaterial\", scene);\n        this.debugMaterial.diffuseColor = new Color3(0.5,0.4,0.8);\n        this.debugMaterial.emissiveColor = new Color3(0.5,0.4,0.8);\n\n    }\n\n    \n    /**\n     * Update the world map based on the player's position\n     * @param x - player's x position\n     * @param z - player's z position\n     * @returns true if the world map was fully updated, false if needs more updates in the next cycle\n     */\n    public update(x: number, z: number): boolean {\n        if (this.lastX !== x || this.lastZ !== z || !this.noUpdateNeeded) {\n            this.lastX = x;\n            this.lastZ = z;\n            console.log(x, z)\n            positionDiv.innerHTML = x + \",\" + z;\n            districtDiv.innerHTML = this.cells.get(`${x}_${z}`)?.name || \"Failure\";\n            this.noUpdateNeeded = this.updateInternal(x, z);\n            return this.noUpdateNeeded;\n        } else {\n            return true;\n        }\n    }\n    \n    private updateInternal(x: number, z: number): boolean {\n        const indexes = [\n            [x + 1, z + 1],\n            [x + 1, z],\n            [x + 1, z - 1],\n            [x, z + 1],\n            [x, z],\n            [x, z - 1],\n            [x - 1, z + 1],\n            [x - 1, z],\n            [x - 1, z - 1],\n        ];\n        // const indexes = [ [x, z]];\n        for (const index of indexes) {\n            const xx = index[0]\n            const zz = index[1]\n            let cellKey = `${xx}_${zz}`;\n            if (!this.cells.has(cellKey)) {\n                this.cells.set(cellKey, null); // mark as pending\n                this.getCellData(xx, zz).then(data => {\n                    if (xx==x && zz==z) districtDiv.innerHTML = data.name;\n                    const cell = this.createCell(this.scene, xx, zz, data);\n                    this.cells.set(cellKey, cell);\n                    console.log(`Created cell ${cellKey}`);\n                    // only create one cell per update cycle\n                    // remaining cells will be created in the next cycle\n                    return false;\n                });\n            }\n        }\n        // Clean up cell cache\n        for (const key of this.cells.keys()) {\n            const [xs, zs] = key.split(\",\");\n            const xx = parseInt(xs);\n            const zz = parseInt(zs);\n            if (xx < (x - 1) || xx > (x + 1) || zz < (z - 1) || zz > (z + 1)) {\n                const cell = this.cells.get(key);\n                if (cell) {\n                    this.scene.removeMesh(cell.ground);\n                    cell.ground.dispose();\n                    this.cells.delete(key);\n                }\n            }\n        }\n        return true;\n    }\n\n    private createCell(scene: Scene, x: number, z: number, data: CellData): Cell {\n        const cellName = data.name;\n        const cellMaterial = data.material===\"grass\" ? this.grassMaterial : this.sandMaterial;\n        const cell = new Cell(scene, x, z, cellName, cellMaterial);\n\n        const halfCellSize = DEFAULT_CELL_SIZE/2;\n        \n        const ground = cell.ground;\n        // START: Dev boxes\n        const box = MeshBuilder.CreateBox(\"box\", { width: 1, depth: 1, height: 4 }, this.scene);\n        box.material = this.debugMaterial;\n        ground.addChild(box);\n        const box0 = MeshBuilder.CreateBox(\"box\", { width: 1, depth: 1, height: 8 }, this.scene);\n        box0.material = this.debugMaterial;\n        box0.position.set(x * DEFAULT_CELL_SIZE + halfCellSize, 4, z * DEFAULT_CELL_SIZE + halfCellSize);\n        ground.addChild(box0);\n        const box1 = MeshBuilder.CreateBox(\"box\", { width: 1, depth: 1, height: 8 }, this.scene);\n        box1.material = this.debugMaterial;\n        box1.position.set(x * DEFAULT_CELL_SIZE - halfCellSize, 4, z * DEFAULT_CELL_SIZE - halfCellSize);\n        ground.addChild(box1);\n        // END: Dev boxes\n        \n        new Boxes(this.scene).cellBoxes(DEFAULT_CELL_SIZE, ground);\n\n\n        return cell;\n    }\n    \n    async getCellData(x: number, z: number): Promise<CellData> {\n        let fileName = `world/tiles/${x}_${z}.json`;\n        // await delay(5000);\n        try {\n            let response = await fetch(fileName);\n            let data = await response.json();\n            console.log(data);\n            return data;\n        } catch (error) {\n            console.error(\"default cell data\");\n            return DEFAULT_CELL_DATA;\n        }\n    }\n    \n}\n"],"names":["Boxes","constructor","scene","this","blueMaterial","diffuseColor","emissiveColor","concreteMaterial","diffuseTexture","concrete","baseBoxes","createBox","Math","PI","randomBoxes","s","p","r","i","m","random","m3","m2","set","size","position","rotation","mass","box","CreateBox","width","x","depth","z","height","y","material","physicsImpostor","BoxImpostor","friction","restitution","cellBoxes","cellSize","cell","halfCellSize","parent","createCellBox","GameCamera","lockedTarget","super","reset","cameraAcceleration","maxCameraSpeed","attachControl","radius","heightOffset","rotationOffset","Car","pos","ammoModule","ZERO_QUATERNION","FRONT_LEFT","FRONT_RIGHT","BACK_LEFT","BACK_RIGHT","chassisWidth","chassisHeight","chassisLength","massVehicle","wheelAxisPositionBack","wheelRadiusBack","wheelWidthBack","wheelHalfTrackBack","wheelAxisHeightBack","wheelAxisFrontPosition","wheelHalfTrackFront","wheelAxisHeightFront","wheelRadiusFront","wheelWidthFront","suspension","stiffness","damping","compression","restLength","rollInfluence","steeringIncrement","steeringClamp","maxEngineForce","maxBreakingForce","incEngine","vehicleSteering","engineForce","breakingForce","wheelMeshes","vehicleReady","greenMaterial","blackMaterial","physicsWorld","getPhysicsEngine","getPhysicsPlugin","world","wheelDirectionCS0","btVector3","wheelAxleCS","geometry","btBoxShape","transform","btTransform","setIdentity","setOrigin","setRotation","btQuaternion","w","motionState","btDefaultMotionState","localInertia","calculateLocalInertia","chassisMesh","createChassisMesh","massOffset","transform2","compound","btCompoundShape","addChildShape","body","btRigidBody","btRigidBodyConstructionInfo","setActivationState","addRigidBody","tuning","btVehicleTuning","rayCaster","btDefaultVehicleRaycaster","vehicle","btRaycastVehicle","setCoordinateSystem","addAction","getChassisWorldTransform","addWheel","origin","setWorldTransform","l","h","mesh","rotationQuaternion","isFront","index","wheelInfo","set_m_suspensionStiffness","set_m_wheelsDampingRelaxation","set_m_wheelsDampingCompression","set_m_maxSuspensionForce","set_m_frictionSlip","set_m_rollInfluence","createWheelMesh","CreateCylinder","diameter","tessellation","actions","Map","keysActions","Controls","car","camera","window","addEventListener","keydown","keyup","update","speed","getCurrentSpeedKmHour","matrix","get","console","log","applyEngineForce","setBrake","setSteeringValue","n","getNumWheels","updateWheelTransform","getWheelTransformWS","getOrigin","getRotation","rotate","Z","X","e","code","ammoReadyPromise","Promise","resolve","then","res","preTasks","createScene","async","engine","canvas","intensity","enablePhysics","WorldMap","controls","activeCamera","registerBeforeRender","getDeltaTime","carPos","cellX","round","DEFAULT_CELL_SIZE","cellZ","fps","getFps","style","color","innerHTML","toFixed","DEFAULT_CELL_DATA","name","Cell","ground","CreateGround","subdivisions","cells","lastX","lastZ","noUpdateNeeded","sandMaterial","sandTexture","sand","vScale","uScale","grassMaterial","grassTexture","grass","fogMode","FOGMODE_LINEAR","fogStart","fogEnd","fogColor","fogDensity","clearColor","debugMaterial","updateInternal","indexes","xx","zz","cellKey","has","getCellData","data","createCell","key","keys","xs","zs","split","parseInt","removeMesh","dispose","delete","cellName","cellMaterial","addChild","box0","box1","fileName","response","fetch","json","error"],"sourceRoot":""}