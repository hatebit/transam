{"version":3,"file":"js/721.babylonBundle.js","mappings":"8LAkCO,SAASA,EAAoBC,GAehC,IAAIC,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC5I,MAAMC,EAAU,CACZ,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC1K,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAElDC,EAAM,GACZ,IAAIC,EAAY,GAChB,MAAMC,EAAQL,EAAQK,OAASL,EAAQM,MAAQ,EACzCC,EAASP,EAAQO,QAAUP,EAAQM,MAAQ,EAC3CE,EAAQR,EAAQQ,OAASR,EAAQM,MAAQ,EACzCG,EAAOT,EAAQS,OAAQ,EAC7B,IAAIC,OAAkC,IAAtBV,EAAQU,UAAuB,EAAIV,EAAQU,UACvDC,OAAwC,IAAzBX,EAAQW,aAA0B,EAAIX,EAAQW,aACjED,GAAaA,EAAY,GAAK,EAC9BC,GAAgBA,EAAe,GAAK,EAGpC,IAAIC,EAFa,CAAC,EAAG,EAAG,EAAG,GAEHF,GACpBG,EAFgB,CAAC,EAAG,EAAG,EAAG,GAEAF,GAC1BG,EAAgB,CAChB,GAAI,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,EACzK,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAEjF,GAAIL,EAAM,CACNR,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IACxFa,EAAgB,EACX,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAEzK,IAAIC,EAAmB,CACnB,CAAC,EAAG,EAAG,GACP,EAAE,EAAG,EAAG,GACR,EAAE,EAAG,GAAI,GACT,CAAC,EAAG,GAAI,IAERC,EAAsB,CACtB,EAAE,GAAI,EAAG,GACT,CAAC,GAAI,EAAG,GACR,CAAC,GAAI,GAAI,GACT,EAAE,GAAI,GAAI,IAEd,MAAMC,EAAoB,CAAC,GAAI,GAAI,GAAI,IACjCC,EAAuB,CAAC,GAAI,GAAI,GAAI,IAC1C,KAAON,EAAW,GACdG,EAAYI,QAAQJ,EAAYK,OAChCH,EAAaE,QAAQF,EAAaG,OAClCR,IAEJ,KAAOC,EAAc,GACjBG,EAAeG,QAAQH,EAAeI,OACtCF,EAAgBC,QAAQD,EAAgBE,OACxCP,IAEJE,EAAcA,EAAYM,OAC1BL,EAAiBA,EAAeK,OAChCP,EAAgBA,EAAcQ,OAAOP,GAAaO,OAAON,GACzDf,EAAQsB,KAAKN,EAAa,GAAIA,EAAa,GAAIA,EAAa,GAAIA,EAAa,GAAIA,EAAa,GAAIA,EAAa,IAC/GhB,EAAQsB,KAAKL,EAAgB,GAAIA,EAAgB,GAAIA,EAAgB,GAAIA,EAAgB,GAAIA,EAAgB,GAAIA,EAAgB,G,CAErI,MAAMM,EAAa,CAACnB,EAAQ,EAAGE,EAAS,EAAGC,EAAQ,GACnDJ,EAAYU,EAAcW,QAAO,CAACC,EAA4BC,EAAcC,IAAiBF,EAAYJ,OAAOK,EAAeH,EAAWI,EAAe,KAAK,IAE9J,MAAMC,EAA8C,IAA5B7B,EAAQ6B,gBAAwB,EAAI7B,EAAQ6B,iBAAmB,gBAEjFC,EAAoB9B,EAAQ8B,QAAU,IAAIC,MAAe,GACzDC,EAAahC,EAAQgC,WACrBC,EAAS,GAGf,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,SACDC,IAAdL,EAAOI,KACPJ,EAAOI,GAAK,IAAI,KAAQ,EAAG,EAAG,EAAG,IAEjCF,QAAgCG,IAAlBH,EAAWE,KACzBF,EAAWE,GAAK,IAAI,KAAO,EAAG,EAAG,EAAG,IAK5C,IAAK,IAAIE,EAAQ,EAAGA,EA/EJ,EA+EqBA,IAKjC,GAJAjC,EAAIoB,KAAKO,EAAOM,GAAOC,EAAG,8BAAiD,EAAMP,EAAOM,GAAOE,EAAIR,EAAOM,GAAOE,GACjHnC,EAAIoB,KAAKO,EAAOM,GAAOG,EAAG,8BAAiD,EAAMT,EAAOM,GAAOE,EAAIR,EAAOM,GAAOE,GACjHnC,EAAIoB,KAAKO,EAAOM,GAAOG,EAAG,8BAAiD,EAAMT,EAAOM,GAAOI,EAAIV,EAAOM,GAAOI,GACjHrC,EAAIoB,KAAKO,EAAOM,GAAOC,EAAG,8BAAiD,EAAMP,EAAOM,GAAOI,EAAIV,EAAOM,GAAOI,GAC7GR,EACA,IAAK,IAAIS,EAAI,EAAGA,EAAI,EAAGA,IACnBR,EAAOV,KAAKS,EAAWI,GAAOM,EAAGV,EAAWI,GAAOO,EAAGX,EAAWI,GAAOQ,EAAGZ,EAAWI,GAAOS,GAMzG,kBAAyBhB,EAAiBzB,EAAWH,EAASC,EAASC,EAAKH,EAAQ8C,SAAU9C,EAAQ+C,SAGtG,MAAMC,EAAa,IAAI,IAOvB,GALAA,EAAW/C,QAAUA,EACrB+C,EAAW5C,UAAYA,EACvB4C,EAAW9C,QAAUA,EACrB8C,EAAW7C,IAAMA,EAEb6B,EAAY,CACZ,MAAMiB,EAAcpB,IAAoB,eAAwBI,EAAOX,OAAOW,GAAUA,EACxFe,EAAWf,OAASgB,C,CAGxB,OAAOD,CACX,CA8BO,SAASE,EACZC,EACAnD,EAcI,CAAC,EACLoD,EAAyB,MAEzB,MAAMC,EAAM,IAAI,KAAKF,EAAMC,GAS3B,OAPApD,EAAQ6B,gBAAkB,gCAAgC7B,EAAQ6B,iBAClEwB,EAAIC,gCAAkCtD,EAAQ6B,gBAE3B9B,EAAoBC,GAE5BuD,YAAYF,EAAKrD,EAAQwD,WAE7BH,CACX,CAMO,MAAMI,EAAa,CAEtBP,aAIJ,cAAuBnD,EAEtB,eAAyB,CAACoD,EAAc7C,EAAc8C,EAAyB,KAAMI,EAAqB3B,IAOhGqB,EAAUC,EAND,CACZ7C,OACAuB,kBACA2B,aAG4BJ,E,gGC/N7B,SAASM,EACZ1D,EAAiC,CAC7B2D,aAAc,EACdC,aAAc,GACdrD,OAAQ,EACRsD,OAAQ,IACRC,gBAAiB,IAGrB,MAAMH,EAAeI,KAAKC,IAAIhE,EAAQ2D,aAAe3D,EAAQ2D,aAAe,EAAG,GACzEC,EAAeG,KAAKC,IAAIhE,EAAQ4D,aAAe5D,EAAQ4D,aAAe,GAAI,GAC1ErD,EAASwD,KAAKC,IAAIhE,EAAQO,OAASP,EAAQO,OAAS,EAAG,GACvDsD,EAASE,KAAKC,IAAIhE,EAAQ6D,OAAS7D,EAAQ6D,OAAS,IAAM,GAC1DI,EAAYF,KAAKC,IAAIhE,EAAQ8D,gBAAkB9D,EAAQ8D,gBAAkB,EAAG,GAE5EI,EAAiBN,EACjBO,EAAiBR,EAEjBS,EAAYL,KAAKC,IAAIhE,EAAQoE,UAAYpE,EAAQoE,UAAYP,EAAQ,GACrEQ,EAAeN,KAAKC,IAAIhE,EAAQqE,aAAerE,EAAQqE,aAAeR,EAAQ,GAE9ES,EAAkB/D,GAAU6D,EAAYC,GAGxCE,EAAc,EAAMR,KAAKS,GAEzBC,EAAkBV,KAAKC,IAAIhE,EAAQ0E,mBAAqB1E,EAAQ0E,mBAAqBT,EAAW,GAChGU,EAAqBZ,KAAKC,IAAIhE,EAAQ4E,sBAAwB5E,EAAQ4E,sBAAwBX,EAAW,GAEzGY,EAAQd,KAAKe,MAAMT,EAAeD,GAAa7D,GAErD,IAAIN,EAAU,GACd,MAAM8E,EAAW,GACX7E,EAAU,GACVC,EAAM,GAEZ,IAAIiC,EAAQ,EACZ,MAAM4C,EAAa,GACfC,EAA+B,GAAlBX,EACXY,EAAgB,GAAVnB,KAAKS,GAEjB,IAAIjC,EAAGC,EACP,MAAM2C,EAAS,WACTC,EAAS,WAETC,EAAWtB,KAAKuB,IAAIT,GACpBU,EAAWxB,KAAKyB,IAAIX,GAEpBY,EAAa,IAAI,KAAQrB,EAAYmB,EAAUN,EAAab,EAAYiB,GACzEK,SAAS,IAAI,KAAQrB,EAAekB,EAAwBlB,EAAegB,EAA5BJ,IAC/CU,SAGCC,EAAKxB,EAAYS,EAAQY,EAAapB,GAAgBa,EAAML,GAElE,IAAIgB,EAAI,EACR,IAAKrD,EAAI,EAAGA,GAAKiC,EAAiBjC,IAAK,CACnC,MAAMsD,EAAW,GAEXjD,EAAIqC,EAAML,GAASrC,EAAIiC,GAE7BoB,GAAMzB,EAAYS,EAASJ,EAE3B,MAAMsB,EAAOhC,KAAKuB,IAAIzC,GAChBmD,EAAOjC,KAAKyB,IAAI3C,GAGhBoD,EAAUF,EAAO3B,EAEvB,IAAK7B,EAAI,EAAGA,GAAK2B,EAAgB3B,IAAK,CAClC,MAAM2D,EAAI3D,EAAI2B,EACRiC,EAAQD,EAAI3B,EAhDP,EAiDL6B,EAAWrC,KAAKyB,IAAIW,GACpBE,EAAWtC,KAAKuB,IAAIa,GAE1Bf,EAAO7C,EAAI0D,EAAUG,EACrBhB,EAAO5C,EAAIyC,EAAae,EAAO5B,EAC/BgB,EAAO/C,EAAI4D,EAAUI,EACrBtB,EAASxD,KAAK6D,EAAO7C,EAAG6C,EAAO5C,EAAG4C,EAAO/C,GAEzC8C,EAAOmB,IAAIP,EAAOK,EAAUJ,EAAMD,EAAOM,GACzCnG,EAAQqB,KAAK4D,EAAO5C,EAAG4C,EAAO3C,EAAG2C,EAAO9C,GAExClC,EAAIoB,KAAK2E,EAAG,8BAAiDL,EAAID,EAAK,EAAIC,EAAID,GAE9EE,EAASvE,KAAKa,GAEdA,G,CAGJ4C,EAAWzD,KAAKuE,E,CAGpB,MAAMS,EAAahG,EAAS6D,EAAYC,EAAegB,EAAWjB,EAAYiB,EAAWhB,EACnFmC,EAASjB,GAAYlB,EAAeD,GAAcmC,EAExD,IAAK/D,EAAI,EAAGA,GAAK2B,EAAgB3B,IAAK,CAClC,MAAMsD,EAAW,GACjBD,GAAKJ,EAAatB,EAElB,MAAM8B,EAAUV,GAAa/C,GAAK6B,EAAeD,GAAcD,EAAiBC,GAChF,IAAK7B,EAAI,EAAGA,GAAK2B,EAAgB3B,IAAK,CAClC,MAAM2D,EAAI3D,EAAI2B,EACRiC,EAAQD,EAAI3B,EAhFP,EAiFL6B,EAAWrC,KAAKyB,IAAIW,GACpBE,EAAWtC,KAAKuB,IAAIa,GAE1Bf,EAAO7C,EAAI0D,EAAUG,EACrBhB,EAAO5C,EAAIyC,EAAaI,EAAWjB,EAAa5B,EAAI+D,EAAcpC,EAClEiB,EAAO/C,EAAI4D,EAAUI,EACrBtB,EAASxD,KAAK6D,EAAO7C,EAAG6C,EAAO5C,EAAG4C,EAAO/C,GAEzC8C,EAAOmB,IAAIF,EAAUI,EAAOH,GAAUI,YACtCvG,EAAQqB,KAAK4D,EAAO5C,EAAG4C,EAAO3C,EAAG2C,EAAO9C,GAExClC,EAAIoB,KAAK2E,EAAG,8BAAiDL,EAAID,EAAK,EAAIC,EAAID,GAE9EE,EAASvE,KAAKa,GAEdA,G,CAGJ4C,EAAWzD,KAAKuE,E,CAGpB,IAAKtD,EAAI,EAAGA,GAAKmC,EAAoBnC,IAAK,CACtC,MAAMsD,EAAW,GACXjD,EAAIqC,EAAML,GAASd,KAAKS,GAAKK,IAAUrC,EAAImC,GACjDkB,GAAMxB,EAAeQ,EAASF,EAC9B,MAAMoB,EAAOhC,KAAKuB,IAAIzC,GAChBmD,EAAOjC,KAAKyB,IAAI3C,GAEhBoD,EAAUF,EAAO1B,EACvB,IAAK9B,EAAI,EAAGA,GAAK2B,EAAgB3B,IAAK,CAClC,MAAM2D,EAAI3D,EAAI2B,EACRiC,EAAQD,EAAI3B,EAhHP,EAiHL6B,EAAWrC,KAAKyB,IAAIW,GACpBE,EAAWtC,KAAKuB,IAAIa,GAE1Bf,EAAO7C,EAAI0D,EAAUG,EACrBhB,EAAO5C,EAAkBwD,EAAO3B,EAApBY,EACZG,EAAO/C,EAAI4D,EAAUI,EACrBtB,EAASxD,KAAK6D,EAAO7C,EAAG6C,EAAO5C,EAAG4C,EAAO/C,GAEzC8C,EAAOmB,IAAIP,EAAOK,EAAUJ,EAAMD,EAAOM,GACzCnG,EAAQqB,KAAK4D,EAAO5C,EAAG4C,EAAO3C,EAAG2C,EAAO9C,GAExClC,EAAIoB,KAAK2E,EAAG,8BAAiDL,EAAID,EAAK,EAAIC,EAAID,GAE9EE,EAASvE,KAAKa,GAEdA,G,CAGJ4C,EAAWzD,KAAKuE,E,CAGpB,IAAKvD,EAAI,EAAGA,EAAI2B,EAAgB3B,IAC5B,IAAKC,EAAI,EAAGA,EAAIiC,EAAkBN,EAAiBQ,EAAoBnC,IAAK,CAExE,MAAMkE,EAAK1B,EAAWxC,GAAGD,GACnBoE,EAAK3B,EAAWxC,EAAI,GAAGD,GACvBqE,EAAK5B,EAAWxC,EAAI,GAAGD,EAAI,GAC3BsE,EAAK7B,EAAWxC,GAAGD,EAAI,GAE7BtC,EAAQsB,KAAKmF,GACbzG,EAAQsB,KAAKoF,GACb1G,EAAQsB,KAAKsF,GAEb5G,EAAQsB,KAAKoF,GACb1G,EAAQsB,KAAKqF,GACb3G,EAAQsB,KAAKsF,E,CAMrB,GAFA5G,EAAUA,EAAQ6G,UAEd9G,EAAQ+G,cAAgB/G,EAAQ+G,YAAYC,OAAO,UAAe,CAClE,MAAMC,EAAI,IAAI,KACdjH,EAAQ+G,YACHG,QACAC,MAAgB,GAAVpD,KAAKS,IACX4C,MAAM,UACNC,eACAC,iBAAiBL,GACtB,MAAMpB,EAAI,WACV,IAAK,IAAI0B,EAAI,EAAGA,EAAIxC,EAASY,OAAQ4B,GAAK,EACtC1B,EAAES,IAAIvB,EAASwC,GAAIxC,EAASwC,EAAI,GAAIxC,EAASwC,EAAI,IACjD,8BAAkC1B,EAAEqB,QAASD,EAAGpB,GAChDd,EAASwC,GAAK1B,EAAEtD,EAChBwC,EAASwC,EAAI,GAAK1B,EAAErD,EACpBuC,EAASwC,EAAI,GAAK1B,EAAExD,C,CAI5B,MAAMmF,EAAO,IAAI,IAMjB,OALAA,EAAKpH,UAAY2E,EACjByC,EAAKtH,QAAUA,EACfsH,EAAKrH,IAAMA,EACXqH,EAAKvH,QAAUA,EAERuH,CACX,CAgDO,SAASC,EACZtE,EACAnD,EAAiC,CAC7B+G,YAAa,SACbpD,aAAc,EACdC,aAAc,GACdrD,OAAQ,EACRsD,OAAQ,IACRC,gBAAiB,EACjBN,WAAW,GAEfJ,EAAyB,MAEzB,MAAMsE,EAAU,IAAI,KAAKvE,EAAMC,GAG/B,OAFmBM,EAAwB1D,GAChCuD,YAAYmE,EAAS1H,EAAQwD,WACjCkE,CACX,CAOO,MAAMC,EAAiB,CAE1BF,iBAWH,mBAA6B,CAACtE,EAAcnD,EAAgCoD,IAClEqE,EAActE,EAAMnD,EAASoD,GAGxC,kBAA2BM,C,6HCpQpB,SAASkE,EAAyB5H,GAiBrC,MAAMO,EAAiBP,EAAQO,QAAU,EACzC,IAAIsH,EAA8C,IAAxB7H,EAAQ6H,YAAoB,EAAI7H,EAAQ6H,aAAe7H,EAAQ8H,UAAY,EACjGC,EAAoD,IAA3B/H,EAAQ+H,eAAuB,EAAI/H,EAAQ+H,gBAAkB/H,EAAQ8H,UAAY,EAC9GD,EAAcA,GAAe,KAC7BE,EAAiBA,GAAkB,KACnC,MAAMnE,EAAuB5D,EAAQ4D,cAAgB,GAC/CD,EAAuB3D,EAAQ2D,cAAgB,EAC/CqE,IAAoBhI,EAAQgI,SAC5BC,IAAmBjI,EAAQiI,QAC3BC,EAAsB,IAAhBlI,EAAQkI,IAAY,EAAIlI,EAAQkI,KAAO,aAC7CC,EAAcnI,EAAQmI,MAAQnI,EAAQmI,KAAO,GAAKnI,EAAQmI,IAAM,GAAK,EAAMnI,EAAQmI,KAAO,EAC1FtG,EAAsD,IAA5B7B,EAAQ6B,gBAAwB,EAAI7B,EAAQ6B,iBAAmB,gBACzFC,EAAoB9B,EAAQ8B,QAAU,IAAIC,MAAe,GACzDC,EAAahC,EAAQgC,WAIrBoG,EAAoB,GAAK,GAFA,IAARD,GAAaF,EAAU,EAAI,KAC3BD,EAAWrE,EAAe,GAEjD,IAAIzB,EAEJ,IAAKA,EAAI,EAAGA,EAAIkG,EAAWlG,IACnBF,QAAgCG,IAAlBH,EAAWE,KACzBF,EAAWE,GAAK,IAAI,KAAO,EAAG,EAAG,EAAG,IAG5C,IAAKA,EAAI,EAAGA,EAAIkG,EAAWlG,IACnBJ,QAAwBK,IAAdL,EAAOI,KACjBJ,EAAOI,GAAK,IAAI,KAAQ,EAAG,EAAG,EAAG,IAIzC,MAAMjC,EAAU,IAAI8B,MACd3B,EAAY,IAAI2B,MAChB7B,EAAU,IAAI6B,MACd5B,EAAM,IAAI4B,MACVE,EAAS,IAAIF,MAEbsG,EAAuB,EAAVtE,KAAKS,GAAS2D,EAAOvE,EACxC,IAAI0E,EACAC,EACA1E,EACJ,MAAM2E,GAAOT,EAAiBF,GAAe,EAAItH,EAC3CkI,EAAsB,WACtBC,EAAsB,WACtBC,EAA2B,WAC3BC,EAA2B,WAC3BC,EAAsB,WACtBC,EAAa,OAGnB,IAAIvB,EACAwB,EACArG,EACAsG,EAAkB,EAClBC,EAAY,EACZC,EAAa,EACbrD,EAAY,EAEhB,IAAK0B,EAAI,EAAGA,GAAK5D,EAAc4D,IAI3B,IAHAgB,EAAIhB,EAAI5D,EACRE,GAAU0E,GAAKV,EAAcE,GAAkBA,GAAkB,EACjEiB,EAAUhB,GAAkB,IAANT,GAAWA,IAAM5D,EAAe,EAAI,EACrDjB,EAAI,EAAGA,EAAIsG,EAAStG,IAAK,CAO1B,IANIsF,IACAiB,GAAKvG,GAELuF,IACAgB,GAAK,EAAIvG,GAERqG,EAAI,EAAGA,GAAKnF,EAAcmF,IAC3BT,EAAQS,EAAIV,EAGZI,EAAWlG,EAAIwB,KAAKuB,KAAKgD,GAASzE,EAClC4E,EAAWjG,GAAKjC,EAAS,EAAIgI,EAAIhI,EACjCkI,EAAWpG,EAAI0B,KAAKyB,KAAK8C,GAASzE,EAGd,IAAhBgE,GAAqBN,IAAM5D,GAE3B+E,EAAWnG,EAAIrC,EAAQA,EAAQyF,OAA8B,GAApB/B,EAAe,IACxD8E,EAAWlG,EAAItC,EAAQA,EAAQyF,OAA8B,GAApB/B,EAAe,GAAS,GACjE8E,EAAWrG,EAAInC,EAAQA,EAAQyF,OAA8B,GAApB/B,EAAe,GAAS,KAEjE8E,EAAWnG,EAAIkG,EAAWlG,EAC1BmG,EAAWrG,EAAIoG,EAAWpG,EAC1BqG,EAAWlG,EAAIuB,KAAKoF,KAAKT,EAAWnG,EAAImG,EAAWnG,EAAImG,EAAWrG,EAAIqG,EAAWrG,GAAKmG,EACtFE,EAAWjC,aAIL,IAANsC,IACAJ,EAAgBS,SAASX,GACzBG,EAAgBQ,SAASV,IAG7BtI,EAAUmB,KAAKkH,EAAWlG,EAAGkG,EAAWjG,EAAGiG,EAAWpG,GACtDnC,EAAQqB,KAAKmH,EAAWnG,EAAGmG,EAAWlG,EAAGkG,EAAWrG,GAEhDwD,EADAmC,EACIkB,IAAOD,EAAInH,EAAOmH,GAAGzG,EAAIV,EAAOmH,GAAG3G,EAEnCR,EAAOmH,GAAGzG,GAAKV,EAAOmH,GAAG3G,EAAIR,EAAOmH,GAAGzG,GAAK+F,EAEpDpI,EAAIoB,KAAKO,EAAOmH,GAAG1G,GAAMT,EAAOmH,GAAG5G,EAAIP,EAAOmH,GAAG1G,GAAKwG,EAAKnF,EAAc,8BAAiD,EAAIiC,EAAIA,GAC9H7D,GACAC,EAAOV,KAAKS,EAAWiH,GAAGvG,EAAGV,EAAWiH,GAAGtG,EAAGX,EAAWiH,GAAGrG,EAAGZ,EAAWiH,GAAGpG,GAKzE,IAARsF,GAAaF,IACb7H,EAAUmB,KAAKkH,EAAWlG,EAAGkG,EAAWjG,EAAGiG,EAAWpG,GACtDjC,EAAUmB,KAAK,EAAGkH,EAAWjG,EAAG,GAChCpC,EAAUmB,KAAK,EAAGkH,EAAWjG,EAAG,GAChCpC,EAAUmB,KAAKoH,EAAgBpG,EAAGoG,EAAgBnG,EAAGmG,EAAgBtG,GACrE,eAAmByG,EAAGJ,EAAYG,GAClCA,EAAWpC,YACXvG,EAAQqB,KAAKsH,EAAWtG,EAAGsG,EAAWrG,EAAGqG,EAAWxG,EAAGwG,EAAWtG,EAAGsG,EAAWrG,EAAGqG,EAAWxG,GAC9F,eAAmBuG,EAAiBE,EAAGD,GACvCA,EAAWpC,YACXvG,EAAQqB,KAAKsH,EAAWtG,EAAGsG,EAAWrG,EAAGqG,EAAWxG,EAAGwG,EAAWtG,EAAGsG,EAAWrG,EAAGqG,EAAWxG,GAE1FwD,EADAmC,EACIkB,IAAOD,EAAInH,EAAOmH,EAAI,GAAGzG,EAAIV,EAAOmH,EAAI,GAAG3G,EAE3CR,EAAOmH,EAAI,GAAGzG,GAAKV,EAAOmH,EAAI,GAAG3G,EAAIR,EAAOmH,EAAI,GAAGzG,GAAK+F,EAEhEpI,EAAIoB,KAAKO,EAAOmH,EAAI,GAAG1G,EAAG,8BAAiD,EAAIsD,EAAIA,GACnF1F,EAAIoB,KAAKO,EAAOmH,EAAI,GAAG5G,EAAG,8BAAiD,EAAIwD,EAAIA,GAE/EA,EADAmC,EACIkB,IAAOD,EAAInH,EAAOmH,EAAI,GAAGzG,EAAIV,EAAOmH,EAAI,GAAG3G,EAE3CR,EAAOmH,EAAI,GAAGzG,GAAKV,EAAOmH,EAAI,GAAG3G,EAAIR,EAAOmH,EAAI,GAAGzG,GAAK+F,EAEhEpI,EAAIoB,KAAKO,EAAOmH,EAAI,GAAG1G,EAAG,8BAAiD,EAAIsD,EAAIA,GACnF1F,EAAIoB,KAAKO,EAAOmH,EAAI,GAAG5G,EAAG,8BAAiD,EAAIwD,EAAIA,GAC/E7D,IACAC,EAAOV,KAAKS,EAAWiH,EAAI,GAAGvG,EAAGV,EAAWiH,EAAI,GAAGtG,EAAGX,EAAWiH,EAAI,GAAGrG,EAAGZ,EAAWiH,EAAI,GAAGpG,GAC7FZ,EAAOV,KAAKS,EAAWiH,EAAI,GAAGvG,EAAGV,EAAWiH,EAAI,GAAGtG,EAAGX,EAAWiH,EAAI,GAAGrG,EAAGZ,EAAWiH,EAAI,GAAGpG,GAC7FZ,EAAOV,KAAKS,EAAWiH,EAAI,GAAGvG,EAAGV,EAAWiH,EAAI,GAAGtG,EAAGX,EAAWiH,EAAI,GAAGrG,EAAGZ,EAAWiH,EAAI,GAAGpG,GAC7FZ,EAAOV,KAAKS,EAAWiH,EAAI,GAAGvG,EAAGV,EAAWiH,EAAI,GAAGtG,EAAGX,EAAWiH,EAAI,GAAGrG,EAAGZ,EAAWiH,EAAI,GAAGpG,KAGjGqG,IAAOD,IACPC,EAAKD,E,CAMjB,MAAMI,EAAoB,IAARlB,GAAaF,EAAUrE,EAAe,EAAIA,EAE5D,IADA2D,EAAI,EACC0B,EAAI,EAAGA,EAAItF,EAAcsF,IAAK,CAC/B,IAAIK,EAAa,EACb5C,EAAa,EACbC,EAAa,EACbC,EAAa,EACjB,IAAKmC,EAAI,EAAGA,EAAInF,EAAcmF,IAC1BO,EAAK/B,GAAK8B,EAAI,GAAKN,EACnBrC,GAAMa,EAAI,IAAM8B,EAAI,GAAKN,EACzBpC,EAAKY,GAAK8B,EAAI,IAAMN,EAAI,GACxBnC,GAAMW,EAAI,IAAM8B,EAAI,IAAMN,EAAI,GAC9B9I,EAAQsB,KAAK+H,EAAI5C,EAAIC,GACrB1G,EAAQsB,KAAKqF,EAAID,EAAID,GAEb,IAARyB,GAAaF,IAEbhI,EAAQsB,KAAK+H,EAAK,EAAG5C,EAAK,EAAGC,EAAK,GAClC1G,EAAQsB,KAAKqF,EAAK,EAAGD,EAAK,EAAGD,EAAK,GAClCzG,EAAQsB,KAAK+H,EAAK,EAAG5C,EAAK,EAAGC,EAAK,GAClC1G,EAAQsB,KAAKqF,EAAK,EAAGD,EAAK,EAAGD,EAAK,IAEtCa,EAAIS,EAAWT,EAAI,EAAIA,EAAI,C,CAI/B,MAAMgC,EAAqBC,IACvB,MAAM3F,EAAS2F,EAAQ3B,EAAc,EAAIE,EAAiB,EAC1D,GAAe,IAAXlE,EACA,OAIJ,IAAIyE,EACAmB,EACAlC,EACJ,MAAMrB,EAAasD,EAAQ1H,EAAOsG,EAAY,GAAKtG,EAAO,GAC1D,IAAIW,EAAsB,KACtBT,IACAS,EAAI+G,EAAQxH,EAAWoG,EAAY,GAAKpG,EAAW,IAGvD,MAAM0H,EAAQtJ,EAAUuF,OAAS,EAC3BgE,EAASH,EAAQjJ,EAAS,GAAKA,EAAS,EACxCqJ,EAAS,IAAI,IAAQ,EAAGD,EAAQ,GACtCvJ,EAAUmB,KAAKqI,EAAOrH,EAAGqH,EAAOpH,EAAGoH,EAAOvH,GAC1CnC,EAAQqB,KAAK,EAAGiI,EAAQ,GAAK,EAAG,GAChC,MAAM3D,EAAIK,EAAE1D,EAAkB,IAAb0D,EAAE5D,EAAI4D,EAAE1D,GACzBrC,EAAIoB,KAAK2E,EAAE3D,EAAkB,IAAb2D,EAAE7D,EAAI6D,EAAE3D,GAAU,8BAAiD,EAAIsD,EAAIA,GACvFpD,GACAR,EAAOV,KAAKkB,EAAEC,EAAGD,EAAEE,EAAGF,EAAEG,EAAGH,EAAEI,GAGjC,MAAMgH,EAAe,IAAI,KAAQ,GAAK,IACtC,IAAKtC,EAAI,EAAGA,GAAK3D,EAAc2D,IAAK,CAChCe,EAAmB,EAAVvE,KAAKS,GAAS+C,EAAIY,EAAOvE,EAClC,MAAM0B,EAAMvB,KAAKuB,KAAKgD,GAChB9C,EAAMzB,KAAKyB,KAAK8C,GACtBmB,EAAe,IAAI,IAAQnE,EAAMzB,EAAQ8F,EAAQnE,EAAM3B,GACvD,MAAMiG,EAAoB,IAAI,KAAQxE,EAAMuE,EAAatH,EAAI,GAAKiD,EAAMqE,EAAarH,EAAI,IACzFpC,EAAUmB,KAAKkI,EAAalH,EAAGkH,EAAajH,EAAGiH,EAAapH,GAC5DnC,EAAQqB,KAAK,EAAGiI,EAAQ,GAAK,EAAG,GAChC,MAAM3D,EAAIK,EAAE1D,GAAK0D,EAAE5D,EAAI4D,EAAE1D,GAAKsH,EAAkBtH,EAChDrC,EAAIoB,KAAK2E,EAAE3D,GAAK2D,EAAE7D,EAAI6D,EAAE3D,GAAKuH,EAAkBvH,EAAG,8BAAiD,EAAIsD,EAAIA,GACvGpD,GACAR,EAAOV,KAAKkB,EAAEC,EAAGD,EAAEE,EAAGF,EAAEG,EAAGH,EAAEI,E,CAIrC,IAAK0E,EAAI,EAAGA,EAAI3D,EAAc2D,IACrBiC,GAKDvJ,EAAQsB,KAAKmI,GACbzJ,EAAQsB,KAAKmI,GAASnC,EAAI,IAC1BtH,EAAQsB,KAAKmI,GAASnC,EAAI,MAN1BtH,EAAQsB,KAAKmI,GACbzJ,EAAQsB,KAAKmI,GAASnC,EAAI,IAC1BtH,EAAQsB,KAAKmI,GAASnC,EAAI,I,EAUlCW,IAAQ,gBAAkBA,IAAQ,cAClCqB,GAAkB,GAElBrB,IAAQ,cAAgBA,IAAQ,cAChCqB,GAAkB,GAItB,kBAAyB1H,EAAiBzB,EAAWH,EAASC,EAASC,EAAKH,EAAQ8C,SAAU9C,EAAQ+C,SAEtG,MAAMC,EAAa,IAAI,IAUvB,OARAA,EAAW/C,QAAUA,EACrB+C,EAAW5C,UAAYA,EACvB4C,EAAW9C,QAAUA,EACrB8C,EAAW7C,IAAMA,EACb6B,IACAgB,EAAWf,OAASA,GAGjBe,CACX,CA8CO,SAAS+G,EACZ5G,EACAnD,EAiBI,CAAC,EACLoD,GAEA,MAAM4G,EAAW,IAAI,KAAK7G,EAAMC,GAShC,OAPApD,EAAQ6B,gBAAkB,gCAAgC7B,EAAQ6B,iBAClEmI,EAAS1G,gCAAkCtD,EAAQ6B,gBAEhC+F,EAAyB5H,GAEjCuD,YAAYyG,EAAUhK,EAAQwD,WAElCwG,CACX,CAMO,MAAMC,EAAkB,CAE3BF,kBAGJ,mBAA4BnC,EAE3B,oBAA8B,CAC3BzE,EACA5C,EACAsH,EACAE,EACAnE,EACAD,EACAP,EACAI,EACA3B,UAEcM,IAAViB,GAAyBA,aAAiB,WAC5BjB,IAAViB,IACAvB,EAAkB2B,GAAa,iBAC/BA,EAAYJ,GAEhBA,EAAeO,EACfA,EAAe,GAaZoG,EAAe5G,EAVN,CACZ5C,SACAsH,cACAE,iBACAnE,eACAD,eACA9B,kBACA2B,aAGiCJ,G,yGCzazC,MAAM8G,EAAS,IAAI,IAAQ,EAAG,EAAG,GAC3BC,EAAS,IAAI,KAAS,EAAG,EAAG,GAC5BC,EAAS,IAAI,IAAQ,EAAG,EAAG,GAC3BC,EAAS,IAAI,IAAQ,GAAI,EAAG,GAC5BC,EAAS,IAAI,IAAQ,EAAG,EAAG,GAC3BC,EAAS,IAAI,IAAQ,EAAG,GAAI,GAGlC,MAAMC,EACFC,YACWC,EAAoB,WACpBvF,EAAkB,SAClBwF,EAAc,YACdC,EAAoB,EACpBC,EAA4B,EAC5BC,EAA4C,KAC5CC,EAA0C,KAC1CC,EAA4C,KAC5CC,EAA4C,MAR5C,KAAAP,SAAAA,EACA,KAAAvF,OAAAA,EACA,KAAAwF,GAAAA,EACA,KAAAC,UAAAA,EACA,KAAAC,kBAAAA,EACA,KAAAC,sBAAAA,EACA,KAAAC,oBAAAA,EACA,KAAAC,sBAAAA,EACA,KAAAC,sBAAAA,CACR,CACI/D,Q,YACH,OAAO,IAAIsD,EACPU,KAAKR,SAASxD,QACdgE,KAAK/F,OAAO+B,QACZgE,KAAKP,GAAGzD,QACRgE,KAAKN,UACLM,KAAKL,kBACqB,QAA1B,EAAAK,KAAKJ,6BAAqB,eAAEK,QACJ,QAAxB,EAAAD,KAAKH,2BAAmB,eAAEI,QACA,QAA1B,EAAAD,KAAKF,6BAAqB,eAAEG,QACF,QAA1B,EAAAD,KAAKD,6BAAqB,eAAEE,QAEpC,EA4BG,SAASC,EACZjI,EACAkI,EACArL,GAEA,MAAMsL,IAAgBD,EAAWE,SAC3BC,EAAsBxL,EAAQyL,WAAaH,EAC3CI,EAAoF,OAAxDL,EAAoBM,sCAAqGxJ,IAAxDkJ,EAAoBM,gCAEjH1L,EAAwBoL,EAAWO,aACnCxL,EAAYkL,EAAcD,EAAWQ,iBAAgB,GAAM,GAAQR,EAAWS,gBAAgB,kBAC9F5L,EAAUoL,EAAcD,EAAWU,gBAAe,GAAM,GAAQV,EAAWS,gBAAgB,gBAC3FE,EAAiBR,EAAuBF,EAAcD,EAAWS,gBAAgB,kBAA6B1L,EAAa,KAC3H6L,EAAeT,EAAuBF,EAAcD,EAAWS,gBAAgB,gBAA2B5L,EAAW,KACrHC,EAAMkL,EAAWS,gBAAgB,YACjCI,EAAaZ,EAAcD,EAAWS,gBAAgB,yBAAoC,KAC1FK,EAAab,EAAcD,EAAWS,gBAAgB,yBAAoC,KAC1FM,EAAkBd,EAAcD,EAAWS,gBAAgB,8BAAyC,KACpGO,EAAkBf,EAAcD,EAAWS,gBAAgB,8BAAyC,KAEpGpB,EAAW1K,EAAQ0K,UAAY,WACrC,IAAIvF,EAASnF,EAAQmF,QAAU,SAC/B,MAAM7E,EAAON,EAAQM,MAAQ,UACvBgI,EAAQtI,EAAQsI,OAAS,EAG/B,IAAKnD,EAAQ,CACT,MAAMmH,EAAS,IAAI,IAAQ,EAAG,EAAG,GAC3BC,EAAiBlB,EAAWmB,WAAWC,aACvCC,EAAoB,yBAA6BJ,EAAQC,EAAOI,kBAEtExH,EAASoH,EAAOK,eAAelH,SAASgH,E,CAG5C,MAAMG,GAAO9I,KAAK+I,MAAM3H,EAAO9C,EAAG8C,EAAO5C,GAAKwB,KAAKS,GAAK,EAClDuI,EAAMhJ,KAAKoF,KAAKhE,EAAO5C,EAAI4C,EAAO5C,EAAI4C,EAAO9C,EAAI8C,EAAO9C,GACxD2K,EAAQjJ,KAAK+I,MAAM3H,EAAO3C,EAAGuK,GAG7BE,EAAmB,0BAA4BJ,EAAKG,EAAO1E,GAAO4E,SAAS,iBAAmBxC,EAASnI,EAAGmI,EAASlI,EAAGkI,EAASrI,IAC/H8K,EAA0B,YAAcF,GAExCG,EADkB/B,EAAWsB,iBACKO,SAASC,GAE3CnK,EAAa,IAAI,IACvBA,EAAW/C,QAAU,GACrB+C,EAAW5C,UAAY,GACvB4C,EAAW9C,QAAU,GACrB8C,EAAW7C,IAAM,GACjB6C,EAAWqK,gBAAkB/B,EAAc,GAAK,KAChDtI,EAAWsK,gBAAkBhC,EAAc,GAAK,KAChDtI,EAAWuK,qBAAuBnB,EAAkB,GAAK,KACzDpJ,EAAWwK,qBAAuBnB,EAAkB,GAAK,KAEzD,IAAIoB,EAAyB,EAE7B,MAAMC,EAAuBC,IACzB,MAAMC,EAAS,IAAIpD,EACnB,IAAKvK,IAAYG,IAAcF,EAC3B,OAAO0N,EAGX,MAAMC,EAAW5N,EAAQ0N,GAazB,GAXAC,EAAOhD,UAAuB,EAAXiD,EACnBD,EAAO/C,kBAA+B,EAAXgD,EAG3BD,EAAOlD,SAAW,IAAI,IAAQtK,EAAqB,EAAXyN,GAAezN,EAAqB,EAAXyN,EAAe,GAAIzN,EAAqB,EAAXyN,EAAe,IAC7G,8BAAkCD,EAAOlD,SAAU0C,EAAiBQ,EAAOlD,UAG3EkD,EAAOzI,OAAS,IAAI,IAAQjF,EAAmB,EAAX2N,GAAe3N,EAAmB,EAAX2N,EAAe,GAAI3N,EAAmB,EAAX2N,EAAe,IACrG,yBAA6BD,EAAOzI,OAAQiI,EAAiBQ,EAAOzI,QAEhEnF,EAAQ8N,YAAc3N,EAAK,CAC3B,MAAM0F,EAAI1F,EAAe,EAAX0N,EAAe,GAC7BD,EAAOjD,GAAK,IAAI,KAAQxK,EAAe,EAAX0N,GAAe,8BAAiD,EAAIhI,EAAIA,E,CAGxG,OAAO+H,CAAM,EAGXG,EAAa,CAAC,EAAG,EAAG,EAAG,GAGvBC,EAAO,CAACjJ,EAAyBkJ,KACnC,GAAwB,IAApBlJ,EAASY,OACT,OAAOZ,EAGX,MAAMmJ,EAAW,GAAMnK,KAAKoK,IAAI,QAAY7N,EAAM2N,IAE5CG,EAAU,CAACC,EAA4BC,EAAaC,EAAeC,KACrE,IAAK,IAAIjH,EAAI,EAAGA,EAAIiH,IAAOjH,EACvB,GAAI8G,EAAIE,EAAQhH,KAAO+G,EACnB,OAAOC,EAAQhH,EAGvB,OAAQ,CAAC,EAGPkH,EAAe,CAACC,EAAiBC,K,oCACnC,MAAMC,EAAa,kBAAsBF,EAAGhE,SAAUiE,EAAGjE,SAAUuD,EAAMC,GAEzE,IAAIjO,EAAU8N,EACVc,EAAUd,EAEd,GAAI7B,GAAcC,EAAY,CAC1B,MAAM2C,EAAYJ,EAAG1D,sBAAwB,EAAI0D,EAAG7D,kBAC9CkE,EAAoC,QAAxB,EAAAL,EAAG1D,6BAAqB,QAAIkB,EACxC8C,EAAoC,QAAxB,EAAAN,EAAGzD,6BAAqB,QAAIkB,EAExC8C,EAAYN,EAAG3D,sBAAwB,EAAI2D,EAAG9D,kBAC9CqE,EAAoC,QAAxB,EAAAP,EAAG3D,6BAAqB,QAAIkB,EACxCiD,EAAoC,QAAxB,EAAAR,EAAG1D,6BAAqB,QAAIkB,EAE9ClM,EAAU,CAAC,EAAG,EAAG,EAAG,GACpB4O,EAAU,CAAC,EAAG,EAAG,EAAG,GAEpB,IAAIzM,EAAQ,EACZ,IAAK,IAAImF,EAAI,EAAGA,EAAI,IAAKA,EACrB,GAAIyH,EAAUF,EAAYvH,GAAK,EAAG,CAC9B,MAAM6H,EAAMhB,EAAQc,EAAWH,EAAUD,EAAYvH,GAAI0H,EAAW,GACpEhP,EAAQmC,GAAS2M,EAAUD,EAAYvH,GACvCsH,EAAQzM,GAAS,SAAY4M,EAAUF,EAAYvH,GAAI6H,GAAO,EAAID,EAAUC,GAAO,EAAGR,GACtFxM,G,CAIR,IAAK,IAAImF,EAAI,EAAGA,EAAI,GAAKnF,EAAQ,IAAKmF,EAAG,CACrC,MAAM8H,EAAMH,EAAUD,EAAY1H,IACa,IAA3C6G,EAAQW,EAAWM,EAAKP,EAAW,KAEvC7O,EAAQmC,GAASiN,EACjBR,EAAQzM,GAAS,SAAY,EAAG+M,EAAUF,EAAY1H,GAAIqH,GAC1DxM,I,CAGJ,MAAMkN,EAAOT,EAAQ,GAAKA,EAAQ,GAAKA,EAAQ,GAAKA,EAAQ,GAE5DA,EAAQ,IAAMS,EACdT,EAAQ,IAAMS,EACdT,EAAQ,IAAMS,EACdT,EAAQ,IAAMS,C,CAGlB,MAAMC,EAAmBb,EAAG5D,sBAAwB4D,EAAG5D,sBAAsB,GAAmC,QAA9B,EAAAkB,aAAc,EAAdA,EAAiB0C,EAAG9D,kBAAU,QAAI,EAC9G4E,EAAmBd,EAAG5D,sBAAwB4D,EAAG5D,sBAAsB,GAAuC,QAAlC,EAAAkB,aAAc,EAAdA,EAAiB0C,EAAG9D,UAAY,UAAE,QAAI,EAClH6E,EAAmBf,EAAG5D,sBAAwB4D,EAAG5D,sBAAsB,GAAuC,QAAlC,EAAAkB,aAAc,EAAdA,EAAiB0C,EAAG9D,UAAY,UAAE,QAAI,EAElH8E,EAAmBf,EAAG7D,sBAAwB6D,EAAG7D,sBAAsB,GAAmC,QAA9B,EAAAkB,aAAc,EAAdA,EAAiB2C,EAAG/D,kBAAU,QAAI,EAC9G+E,EAAmBhB,EAAG7D,sBAAwB6D,EAAG7D,sBAAsB,GAAuC,QAAlC,EAAAkB,aAAc,EAAdA,EAAiB2C,EAAG/D,UAAY,UAAE,QAAI,EAClHgF,EAAmBjB,EAAG7D,sBAAwB6D,EAAG7D,sBAAsB,GAAuC,QAAlC,EAAAkB,aAAc,EAAdA,EAAiB2C,EAAG/D,UAAY,UAAE,QAAI,EAElHiF,EAAiBnB,EAAG3D,oBAAsB2D,EAAG3D,oBAAoB,GAAiC,QAA5B,EAAAkB,aAAY,EAAZA,EAAeyC,EAAG9D,kBAAU,QAAI,EACtGkF,EAAiBpB,EAAG3D,oBAAsB2D,EAAG3D,oBAAoB,GAAqC,QAAhC,EAAAkB,aAAY,EAAZA,EAAeyC,EAAG9D,UAAY,UAAE,QAAI,EAC1GmF,EAAiBrB,EAAG3D,oBAAsB2D,EAAG3D,oBAAoB,GAAqC,QAAhC,EAAAkB,aAAY,EAAZA,EAAeyC,EAAG9D,UAAY,UAAE,QAAI,EAM1GoF,EAAgBH,IAJClB,EAAG5D,oBAAsB4D,EAAG5D,oBAAoB,GAAiC,QAA5B,EAAAkB,aAAY,EAAZA,EAAe0C,EAAG/D,kBAAU,QAAI,GAInDiF,GAAkBjB,EACrEqB,EAAgBH,IAJCnB,EAAG5D,oBAAsB4D,EAAG5D,oBAAoB,GAAqC,QAAhC,EAAAkB,aAAY,EAAZA,EAAe0C,EAAG/D,UAAY,UAAE,QAAI,GAIvDkF,GAAkBlB,EACrEsB,EAAgBH,IAJCpB,EAAG5D,oBAAsB4D,EAAG5D,oBAAoB,GAAqC,QAAhC,EAAAkB,aAAY,EAAZA,EAAe0C,EAAG/D,UAAY,UAAE,QAAI,GAIvDmF,GAAkBnB,EAErEuB,EAAOpM,KAAKoF,KAAK6G,EAAgBA,EAAgBC,EAAgBA,EAAgBC,EAAgBA,GAEvG,OAAO,IAAI1F,EACP,SAAakE,EAAGhE,SAAUiE,EAAGjE,SAAUkE,GACvC,SAAaF,EAAGvJ,OAAQwJ,EAAGxJ,OAAQyJ,GAAYnI,YAC/C,UAAaiI,EAAG/D,GAAIgE,EAAGhE,GAAIiE,IAC1B,GACA,EACD5C,EACM,CACIuD,GAAoBG,EAAmBH,GAAoBX,EAC3DY,GAAoBG,EAAmBH,GAAoBZ,EAC3Da,GAAoBG,EAAmBH,GAAoBb,GAE/D,KACN3C,EAAe,CAAC+D,EAAgBG,EAAMF,EAAgBE,EAAMD,EAAgBC,GAAQ,KACpFlQ,EACA4O,EACH,EAGL,IAAIuB,EAAsC,KAEtCrL,EAASY,OAAS,IAClByK,EAAa,IAAIrO,OAGrB,IAAK,IAAIK,EAAQ,EAAGA,EAAQ2C,EAASY,OAAQvD,GAAS,EAAG,CACrD,IAAIiO,EAAQ,EACRC,EAA6B,KAC7BC,EAA6B,KAC7BC,EAA6B,KAC7BC,EAA6B,KAEjC,MAIMC,EAJK,QAAY3L,EAAS3C,GAAOsI,SAAUuD,GAAQC,EAItC,EACbyC,EAJK,QAAY5L,EAAS3C,EAAQ,GAAGsI,SAAUuD,GAAQC,EAI1C,EACb0C,EAJK,QAAY7L,EAAS3C,EAAQ,GAAGsI,SAAUuD,GAAQC,EAI1C,EAInB,OAFAmC,GAASK,EAAQ,EAAI,IAAMC,EAAQ,EAAI,IAAMC,EAAQ,EAAI,GAEjDP,GACJ,KAAK,EACGtL,EAASY,OAAS,GAClByK,EAAY7O,KAAKwD,EAAS3C,IAC1BgO,EAAY7O,KAAKwD,EAAS3C,EAAQ,IAClCgO,EAAY7O,KAAKwD,EAAS3C,EAAQ,KAElCgO,EAAarL,EAEjB,MACJ,KAAK,EASD,GARAqL,EAAaA,QAAAA,EAAc,IAAIrO,MAC3B2O,IACAJ,EAAMvL,EAAS3C,EAAQ,GACvBmO,EAAMxL,EAAS3C,EAAQ,GACvBoO,EAAM/B,EAAa1J,EAAS3C,GAAQkO,GACpCG,EAAMhC,EAAa1J,EAAS3C,GAAQmO,IAGpCI,EAAO,CACPL,EAAMvL,EAAS3C,GACfmO,EAAMxL,EAAS3C,EAAQ,GACvBoO,EAAM/B,EAAa1J,EAAS3C,EAAQ,GAAIkO,GACxCG,EAAMhC,EAAa1J,EAAS3C,EAAQ,GAAImO,GAExCH,EAAW7O,KAAKiP,GAChBJ,EAAW7O,KAAKgP,EAAIrJ,SACpBkJ,EAAW7O,KAAK+O,EAAIpJ,SAEpBkJ,EAAW7O,KAAKgP,EAAIrJ,SACpBkJ,EAAW7O,KAAKiP,EAAItJ,SACpBkJ,EAAW7O,KAAKkP,GAChB,K,CAEAG,IACAN,EAAMvL,EAAS3C,GACfmO,EAAMxL,EAAS3C,EAAQ,GACvBoO,EAAM/B,EAAa1J,EAAS3C,EAAQ,GAAIkO,GACxCG,EAAMhC,EAAa1J,EAAS3C,EAAQ,GAAImO,IAGxCD,GAAOC,GAAOC,GAAOC,IACrBL,EAAW7O,KAAK+O,EAAIpJ,SACpBkJ,EAAW7O,KAAKgP,EAAIrJ,SACpBkJ,EAAW7O,KAAKiP,GAEhBJ,EAAW7O,KAAKkP,GAChBL,EAAW7O,KAAKiP,EAAItJ,SACpBkJ,EAAW7O,KAAKgP,EAAIrJ,UAExB,MACJ,KAAK,EACDkJ,EAAaA,QAAAA,EAAc,IAAIrO,MAC1B2O,IACDJ,EAAMvL,EAAS3C,GAAO8E,QACtBqJ,EAAM9B,EAAa6B,EAAKvL,EAAS3C,EAAQ,IACzCoO,EAAM/B,EAAa6B,EAAKvL,EAAS3C,EAAQ,IACzCgO,EAAW7O,KAAK+O,GAChBF,EAAW7O,KAAKgP,GAChBH,EAAW7O,KAAKiP,IAEfG,IACDL,EAAMvL,EAAS3C,EAAQ,GAAG8E,QAC1BqJ,EAAM9B,EAAa6B,EAAKvL,EAAS3C,EAAQ,IACzCoO,EAAM/B,EAAa6B,EAAKvL,EAAS3C,IACjCgO,EAAW7O,KAAK+O,GAChBF,EAAW7O,KAAKgP,GAChBH,EAAW7O,KAAKiP,IAEfI,IACDN,EAAMvL,EAAS3C,EAAQ,GAAG8E,QAC1BqJ,EAAM9B,EAAa6B,EAAKvL,EAAS3C,IACjCoO,EAAM/B,EAAa6B,EAAKvL,EAAS3C,EAAQ,IACzCgO,EAAW7O,KAAK+O,GAChBF,EAAW7O,KAAKgP,GAChBH,EAAW7O,KAAKiP,I,CAQhC,OAAOJ,CAAU,EAGfS,EAAkB,IAAI9O,MAAmB,GAE/C,IAAK,IAAIK,EAAQ,EAAGA,EAAQnC,EAAQ0F,OAAQvD,GAAS,EAAG,CACpD,IAAI0O,EAAwCD,EAW5C,GATAC,EAAa,GAAKpD,EAAoBtL,GAClCsJ,GAA4BF,GAC5BsF,EAAa,GAAKpD,EAAoBtL,EAAQ,GAC9C0O,EAAa,GAAKpD,EAAoBtL,EAAQ,KAE9C0O,EAAa,GAAKpD,EAAoBtL,EAAQ,GAC9C0O,EAAa,GAAKpD,EAAoBtL,EAAQ,MAG9CpC,EAAQ+Q,gBAGHD,EAAa,GAAG3L,OAAO9C,GAAK,IAAMyO,EAAa,GAAG3L,OAAO9C,GAAK,IAAMyO,EAAa,GAAG3L,OAAO9C,GAAK,KAMzGyO,EAAe9C,EAAK8C,EAAc5G,GAC7B4G,IACLA,EAAe9C,EAAK8C,EAAc3G,GAC7B2G,IACLA,EAAe9C,EAAK8C,EAAc1G,GAC7B0G,IACLA,EAAe9C,EAAK8C,EAAczG,GAC7ByG,IACLA,EAAe9C,EAAK8C,EAAcxG,GAC7BwG,IACLA,EAAe9C,EAAK8C,EAAcvG,GAC7BuG,QAGL,IAAK,IAAIE,EAAS,EAAGA,EAASF,EAAanL,OAAQqL,IAAU,CACzD,MAAM5L,EAAS0L,EAAaE,GAoE5B,GAjEWhO,EAAW/C,QAASsB,KAAKkM,GAChCjC,GACIpG,EAAO0F,uBACP9H,EAAW5C,UAAmC,EAAzBqN,GAA8BrI,EAAO0F,sBAAsB,GAChF9H,EAAW5C,UAAmC,EAAzBqN,EAA6B,GAAKrI,EAAO0F,sBAAsB,GACpF9H,EAAW5C,UAAmC,EAAzBqN,EAA6B,GAAKrI,EAAO0F,sBAAsB,IAC7EkB,IACPhJ,EAAW5C,UAAmC,EAAzBqN,GAA8BzB,EAAe5G,EAAOwF,WACzE5H,EAAW5C,UAAmC,EAAzBqN,EAA6B,GAAKzB,EAAe5G,EAAOwF,UAAY,GACzF5H,EAAW5C,UAAmC,EAAzBqN,EAA6B,GAAKzB,EAAe5G,EAAOwF,UAAY,IAEzFxF,EAAO2F,qBACP/H,EAAW9C,QAAiC,EAAzBuN,GAA8BrI,EAAO2F,oBAAoB,GAC5E/H,EAAW9C,QAAiC,EAAzBuN,EAA6B,GAAKrI,EAAO2F,oBAAoB,GAChF/H,EAAW9C,QAAiC,EAAzBuN,EAA6B,GAAKrI,EAAO2F,oBAAoB,IACzEkB,IACPjJ,EAAW9C,QAAiC,EAAzBuN,GAA8BxB,EAAa7G,EAAOwF,WACrE5H,EAAW9C,QAAiC,EAAzBuN,EAA6B,GAAKxB,EAAa7G,EAAOwF,UAAY,GACrF5H,EAAW9C,QAAiC,EAAzBuN,EAA6B,GAAKxB,EAAa7G,EAAOwF,UAAY,MAGzFxF,EAAOsF,SAASuG,QAAQjO,EAAW5C,UAAoC,EAAzBqN,GAC9CrI,EAAOD,OAAO8L,QAAQjO,EAAW9C,QAAkC,EAAzBuN,IAE1CzK,EAAWqK,iBAAmBrK,EAAWsK,kBACrClI,EAAO4F,uBACPhI,EAAWqK,gBAAyC,EAAzBI,GAA8BrI,EAAO4F,sBAAsB,GACtFhI,EAAWqK,gBAAyC,EAAzBI,EAA6B,GAAKrI,EAAO4F,sBAAsB,GAC1FhI,EAAWqK,gBAAyC,EAAzBI,EAA6B,GAAKrI,EAAO4F,sBAAsB,GAC1FhI,EAAWqK,gBAAyC,EAAzBI,EAA6B,GAAKrI,EAAO4F,sBAAsB,KAEtFkB,IACAlJ,EAAWqK,gBAAyC,EAAzBI,GAA8BvB,EAAW9G,EAAOyF,mBAC3E7H,EAAWqK,gBAAyC,EAAzBI,EAA6B,GAAKvB,EAAW9G,EAAOyF,kBAAoB,GACnG7H,EAAWqK,gBAAyC,EAAzBI,EAA6B,GAAKvB,EAAW9G,EAAOyF,kBAAoB,GACnG7H,EAAWqK,gBAAyC,EAAzBI,EAA6B,GAAKvB,EAAW9G,EAAOyF,kBAAoB,IAEnGuB,GAAmBpJ,EAAWuK,uBAC9BvK,EAAWuK,qBAA8C,EAAzBE,GAA8BrB,EAAgBhH,EAAOyF,mBACrF7H,EAAWuK,qBAA8C,EAAzBE,EAA6B,GAAKrB,EAAgBhH,EAAOyF,kBAAoB,GAC7G7H,EAAWuK,qBAA8C,EAAzBE,EAA6B,GAAKrB,EAAgBhH,EAAOyF,kBAAoB,GAC7G7H,EAAWuK,qBAA8C,EAAzBE,EAA6B,GAAKrB,EAAgBhH,EAAOyF,kBAAoB,KAGjHzF,EAAO6F,uBACPjI,EAAWsK,gBAAyC,EAAzBG,GAA8BrI,EAAO6F,sBAAsB,GACtFjI,EAAWsK,gBAAyC,EAAzBG,EAA6B,GAAKrI,EAAO6F,sBAAsB,GAC1FjI,EAAWsK,gBAAyC,EAAzBG,EAA6B,GAAKrI,EAAO6F,sBAAsB,GAC1FjI,EAAWsK,gBAAyC,EAAzBG,EAA6B,GAAKrI,EAAO6F,sBAAsB,KAEtFkB,IACAnJ,EAAWsK,gBAAyC,EAAzBG,GAA8BtB,EAAW/G,EAAOyF,mBAC3E7H,EAAWsK,gBAAyC,EAAzBG,EAA6B,GAAKtB,EAAW/G,EAAOyF,kBAAoB,GACnG7H,EAAWsK,gBAAyC,EAAzBG,EAA6B,GAAKtB,EAAW/G,EAAOyF,kBAAoB,GACnG7H,EAAWsK,gBAAyC,EAAzBG,EAA6B,GAAKtB,EAAW/G,EAAOyF,kBAAoB,IAEnGwB,GAAmBrJ,EAAWwK,uBAC9BxK,EAAWwK,qBAA8C,EAAzBC,GAA8BpB,EAAgBjH,EAAOyF,mBACrF7H,EAAWwK,qBAA8C,EAAzBC,EAA6B,GAAKpB,EAAgBjH,EAAOyF,kBAAoB,GAC7G7H,EAAWwK,qBAA8C,EAAzBC,EAA6B,GAAKpB,EAAgBjH,EAAOyF,kBAAoB,GAC7G7H,EAAWwK,qBAA8C,EAAzBC,EAA6B,GAAKpB,EAAgBjH,EAAOyF,kBAAoB,MAKpH7K,EAAQ8N,WAKT1I,EAAOuF,GAAGsG,QAAQjO,EAAW7C,IAA8B,EAAzBsN,OALb,CACVzK,EAAW7C,IAAKoB,KAAK,GAAM6D,EAAOsF,SAASnI,EAAIjC,EAAKiC,GAC/D,MAAMsD,EAAI,GAAMT,EAAOsF,SAASlI,EAAIlC,EAAKkC,EAC9BQ,EAAW7C,IAAKoB,KAAK,8BAAiD,EAAIsE,EAAIA,E,CAI7F4H,G,EAKR,MAAMyD,EAAQ,IAAI,KAAK/N,EAAMkI,EAAWmB,YAcxC,OAbAxJ,EAAWO,YAAY2N,GAEnB1F,GACA0F,EAAM3F,SAAWF,EAAWE,SAC5B2F,EAAMC,OAAS9F,IAEf6F,EAAMxG,SAAWA,EAASxD,QAC1BgK,EAAME,SAAW,IAAI,IAAQpE,EAAOH,EAAKvE,IAG7C4I,EAAMG,oBAAmB,GACzBH,EAAMI,qBAAoB,GAAM,GAEzBJ,CACX,CAMO,MAAMK,EAAe,CAExBnG,eAGH,iBAA2B,CAACjI,EAAckI,EAA0BX,EAAmBvF,EAAiB7E,EAAegI,IAQ7G8C,EAAYjI,EAAMkI,EAPT,CACZX,WACAvF,SACA7E,OACAgI,S,uFC3eD,SAASkJ,EAAqBxR,GAQjC,MAAMI,EAAY,IAAI2B,MAChB9B,EAAU,IAAI8B,MACd7B,EAAU,IAAI6B,MACd5B,EAAM,IAAI4B,MAEV8B,EAAS7D,EAAQ6D,QAAU,GAC3BD,EAAe5D,EAAQ4D,cAAgB,GACvCuE,EAAcnI,EAAQmI,MAAQnI,EAAQmI,KAAO,GAAKnI,EAAQmI,IAAM,GAAK,EAAMnI,EAAQmI,KAAO,EAC1FtG,EAA8C,IAA5B7B,EAAQ6B,gBAAwB,EAAI7B,EAAQ6B,iBAAmB,gBAGvFzB,EAAUmB,KAAK,EAAG,EAAG,GACrBpB,EAAIoB,KAAK,GAAK,IAEd,MAAM4E,EAAkB,EAAVpC,KAAKS,GAAS2D,EACtBsJ,EAAe,IAARtJ,EAAYhC,EAAQvC,EAAeuC,GAASvC,EAAe,GACxE,IAAIf,EAAI,EACR,IAAK,IAAI6O,EAAI,EAAGA,EAAI9N,EAAc8N,IAAK,CACnC,MAAMnP,EAAIwB,KAAKuB,IAAIzC,GACbL,EAAIuB,KAAKyB,IAAI3C,GACbqD,GAAK3D,EAAI,GAAK,EACdsD,GAAK,EAAIrD,GAAK,EACpBpC,EAAUmB,KAAKsC,EAAStB,EAAGsB,EAASrB,EAAG,GACvCrC,EAAIoB,KAAK2E,EAAG,8BAAiD,EAAIL,EAAIA,GACrEhD,GAAK4O,C,CAEG,IAARtJ,IACA/H,EAAUmB,KAAKnB,EAAU,GAAIA,EAAU,GAAIA,EAAU,IACrDD,EAAIoB,KAAKpB,EAAI,GAAI,8BAAiD,EAAIA,EAAI,GAAKA,EAAI,KAIvF,MAAMwR,EAAWvR,EAAUuF,OAAS,EACpC,IAAK,IAAI4B,EAAI,EAAGA,EAAIoK,EAAW,EAAGpK,IAC9BtH,EAAQsB,KAAKgG,EAAI,EAAG,EAAGA,GAI3B,mBAA0BnH,EAAWH,EAASC,GAC9C,kBAAyB2B,EAAiBzB,EAAWH,EAASC,EAASC,EAAKH,EAAQ8C,SAAU9C,EAAQ+C,SAEtG,MAAMC,EAAa,IAAI,IAOvB,OALAA,EAAW/C,QAAUA,EACrB+C,EAAW5C,UAAYA,EACvB4C,EAAW9C,QAAUA,EACrB8C,EAAW7C,IAAMA,EAEV6C,CACX,CAuBO,SAAS4O,EACZzO,EACAnD,EAA0J,CAAC,EAC3JoD,EAAyB,MAEzB,MAAMyO,EAAO,IAAI,KAAK1O,EAAMC,GAS5B,OAPApD,EAAQ6B,gBAAkB,gCAAgC7B,EAAQ6B,iBAClEgQ,EAAKvO,gCAAkCtD,EAAQ6B,gBAE5B2P,EAAqBxR,GAE7BuD,YAAYsO,EAAM7R,EAAQwD,WAE9BqO,CACX,CAKO,MAAMC,EAAc,CAEvBF,cAGJ,eAAwBJ,EAEvB,gBAA0B,CAACrO,EAAcU,EAAgBD,EAAsBR,EAAyB,KAAMI,EAAqB3B,IAQzH+P,EAAWzO,EAPF,CACZU,SACAD,eACA/B,kBACA2B,aAG6BJ,E,oEChG9B,SAAS2O,EACZ5O,EACAnD,EAeAoD,EAAyB,MAEzB,IAAI6D,EAAYjH,EAAQiH,GAAK,EACzBA,IAAMlD,KAAKiO,MAAM/K,KACXlD,KAAKiO,MAAM/K,GACjB,SAAY,wCAEhB,IAAIgL,EAAYjS,EAAQiS,GAAK,EAK7B,GAJIA,IAAMlO,KAAKiO,MAAMC,KACXlO,KAAKiO,MAAMC,GACjB,SAAY,wCAEZA,EAAIhL,EAAG,CACP,MAAMiL,EAAOD,EACbA,EAAIhL,EACJA,EAAIiL,EACJ,SAAY,kC,CAEhB,MAAMC,EAA+B,IAAI,KACzCA,EAAQC,MAAMnL,EAAGgL,GACjB,MAEMI,EAAqB,CACvBC,OAHiB,uBAA+BH,GAIhD7R,KAAMN,EAAQM,KACdiS,MAAOvS,EAAQuS,MACfC,MAAOxS,EAAQwS,MACfC,MAAOzS,EAAQyS,MACf3Q,OAAQ9B,EAAQ8B,OAChBE,WAAYhC,EAAQgC,WACpBX,KAAMrB,EAAQqB,KACdmC,UAAWxD,EAAQwD,UACnB3B,gBAAiB7B,EAAQ6B,gBACzBiB,SAAU9C,EAAQ8C,SAClBC,QAAS/C,EAAQ+C,SAIrB,OAFiB,QAAiBI,EAAMkP,EAAYjP,EAGxD,C,6HCtCO,SAASsP,EAAyB1S,EAAmC2S,GACxE,MAAMrS,EAAON,EAAQM,KACfiS,EAAgBvS,EAAQuS,OAASjS,GAAQ,EACzCkS,EAAgBxS,EAAQwS,OAASlS,GAAQ,EACzCmS,EAAgBzS,EAAQyS,OAASnS,GAAQ,EACzCuB,EAA8C,IAA5B7B,EAAQ6B,gBAAwB,EAAI7B,EAAQ6B,iBAAmB,gBAEjFzB,EAAY,IAAI2B,MAChB9B,EAAU,IAAI8B,MACd7B,EAAU,IAAI6B,MACd5B,EAAM,IAAI4B,MAEhB,IAAI6Q,EAAOC,IACPC,GAAO,IACPC,EAAOF,IACPG,GAAO,IAEX,IAAK,IAAInN,EAAI,EAAGA,EAAI8M,EAAavN,OAAOO,OAAQE,IAC5C+M,EAAO7O,KAAKkP,IAAIL,EAAMD,EAAavN,OAAOS,GAAG,GAAK0M,GAClDO,EAAO/O,KAAKC,IAAI8O,EAAMH,EAAavN,OAAOS,GAAG,GAAK0M,GAClDQ,EAAOhP,KAAKkP,IAAIF,EAAMJ,EAAavN,OAAOS,GAAG,GAAK2M,GAClDQ,EAAOjP,KAAKC,IAAIgP,EAAML,EAAavN,OAAOS,GAAG,GAAK2M,GAGtD,IAAIpQ,EAAgB,EACpB,IAAK,IAAIF,EAAI,EAAGA,EAAIyQ,EAAaO,KAAKvN,OAAQzD,IAAK,CAC/C,MAAMiR,EAAQR,EAAaO,KAAKhR,GAC1BW,EAAI,cAAkB8P,EAAavN,OAAO+N,EAAM,KAChDvQ,EAAI,cAAkB+P,EAAavN,OAAO+N,EAAM,KAChD1Q,EAAI,cAAkBkQ,EAAavN,OAAO+N,EAAM,KAChDC,EAAKxQ,EAAE8C,SAAS7C,GAChBwQ,EAAK5Q,EAAEiD,SAAS7C,GAChBsN,EAAO,UAAckD,EAAID,GAAI3M,YACnC,IAAK,IAAIZ,EAAI,EAAGA,EAAIsN,EAAMxN,OAAQE,IAAK,CACnC3F,EAAQqB,KAAK4O,EAAK5N,EAAG4N,EAAK3N,EAAG2N,EAAK9N,GAClC,MAAMiR,EAAQX,EAAavN,OAAO+N,EAAMtN,IACxCzF,EAAUmB,KAAK+R,EAAM,GAAKf,EAAOe,EAAM,GAAKd,EAAOc,EAAM,GAAKb,GAC9D,MAAMc,GAAUD,EAAM,GAAKd,EAAQO,IAASC,EAAOD,GACnD5S,EAAIoB,MAAM+R,EAAM,GAAKf,EAAQK,IAASE,EAAOF,GAAO,8BAAiD,EAAIW,EAASA,E,CAEtH,IAAK,IAAI1N,EAAI,EAAGA,EAAIsN,EAAMxN,OAAS,EAAGE,IAClC5F,EAAQsB,KAAKa,EAAOA,EAAQyD,EAAI,EAAGzD,EAAQyD,EAAI,GAEnDzD,GAAS+Q,EAAMxN,M,CAGnB,kBAAyB9D,EAAiBzB,EAAWH,EAASC,EAASC,GAEvE,MAAM6C,EAAa,IAAI,IAKvB,OAJAA,EAAW5C,UAAYA,EACvB4C,EAAW/C,QAAUA,EACrB+C,EAAW9C,QAAUA,EACrB8C,EAAW7C,IAAMA,EACV6C,CACX,CAWO,SAASwQ,EAAerQ,EAAcnD,EAAiCoD,EAAyB,MACnG,MAAM9C,EAAON,EAAQM,KACfiS,EAAgBvS,EAAQuS,OAASjS,GAAQ,EACzCkS,EAAgBxS,EAAQwS,OAASlS,GAAQ,EACzCmS,EAAgBzS,EAAQyS,OAASnS,GAAQ,EAC/C,IAAI2G,EAAYjH,EAAQiH,GAAK,EACzBA,IAAMlD,KAAKiO,MAAM/K,KACXlD,KAAKiO,MAAM/K,GACjB,SAAY,wCAEhB,IAAIgL,EAAYjS,EAAQiS,GAAK,EAK7B,GAJIA,IAAMlO,KAAKiO,MAAMC,KACXlO,KAAKiO,MAAMC,GACjB,SAAY,wCAEZA,EAAIhL,EAAG,CACP,MAAMiL,EAAOD,EACbA,EAAIhL,EACJA,EAAIiL,EACJ,SAAY,kC,CAEhB,MAAMC,EAA+B,IAAI,KACzCA,EAAQC,MAAMnL,EAAGgL,GACjB,MAAMwB,EAAe,uBAA+BtB,GAC9CQ,EAAec,EAAaC,2BAE5BC,EAAW,IAAI,IAAaxQ,EAAMC,GAExCpD,EAAQ6B,gBAAkB,gCAAgC7B,EAAQ6B,iBAClE8R,EAASrQ,gCAAkCtD,EAAQ6B,gBAEhC6Q,EAAyB1S,EAAS2S,GAE1CpP,YAAYoQ,EAAU3T,EAAQwD,WAEzCmQ,EAAShB,aAAaiB,cAAgBH,EAAaI,YACnDF,EAAShB,aAAamB,gBAAkBL,EAAaM,UACrDJ,EAAShB,aAAaqB,cAAgBP,EAAaO,cACnDL,EAAShB,aAAasB,QAAUN,EAAShB,aAAaiB,cAAgBD,EAAShB,aAAamB,gBAC5FH,EAAShB,aAAauB,eAAiBP,EAAShB,aAAamB,gBAAkB,IAAM,GACrF,IAAK,IAAI5R,EAAI,EAAGA,EAAIuR,EAAarO,OAAOO,OAAQzD,IAC5CyR,EAAShB,aAAawB,YAAY5S,KAAK,cAAkBkS,EAAarO,OAAOlD,KAC7EyR,EAAShB,aAAawB,YAAYjS,GAAGK,GAAKgQ,EAC1CoB,EAAShB,aAAawB,YAAYjS,GAAGM,GAAKgQ,EAC1CmB,EAAShB,aAAawB,YAAYjS,GAAGG,GAAKoQ,EAC1CkB,EAAShB,aAAa3Q,WAAWT,KAAK,IAAI,KAAO,EAAG,EAAG,EAAG,IAG9D,IAAK,IAAIW,EAAI,EAAGA,EAAIyQ,EAAaO,KAAKvN,OAAQzD,IAAK,CAC/C,MAAMiR,EAAQR,EAAaO,KAAKhR,GAC1BW,EAAI,cAAkB8P,EAAavN,OAAO+N,EAAM,KAChDvQ,EAAI,cAAkB+P,EAAavN,OAAO+N,EAAM,KAChD1Q,EAAI,cAAkBkQ,EAAavN,OAAO+N,EAAM,KAChDC,EAAKxQ,EAAE8C,SAAS7C,GAChBwQ,EAAK5Q,EAAEiD,SAAS7C,GAChBsN,EAAO,UAAckD,EAAID,GAAI3M,YAC7BpE,EAAI,UAAcgR,EAAIlD,GAAM1J,YAClCkN,EAAShB,aAAayB,UAAU7S,KAAK8R,EAAG5M,aACxCkN,EAAShB,aAAa0B,UAAU9S,KAAK4O,GACrCwD,EAAShB,aAAa2B,UAAU/S,KAAKc,E,CAGzC,OAAOsR,CACX,CAEC,oBAA8BH,C,gGCjKxB,SAASe,EAA0BvU,GAWtC,MAAM6B,EAAkB7B,EAAQ6B,iBAAmB,gBAC7CgC,EAAS7D,EAAQ6D,QAAU,EAC3BxC,OAAwBc,IAAjBnC,EAAQqB,MAA4BrB,EAAQqB,KACnDsC,EAAe3D,EAAQ2D,cAAgB,EACvC6Q,EAAUxU,EAAQwU,SAAW3Q,EAC7B4Q,EAAUzU,EAAQyU,SAAW5Q,EAC7B6Q,EAAU1U,EAAQ0U,SAAW7Q,EAE7B6N,GAAK,EAAI3N,KAAKoF,KAAK,IAAM,EAGzBwL,EAAc,EACf,EACDjD,GACC,EACD,EACAA,EACA,GACC,GACAA,EACD,EACA,GACCA,EACD,EACA,GACC,GACAA,EACD,EACA,GACCA,EACD,GACC,EACDA,EACA,EACA,EACAA,EACAA,EACA,EACA,EACAA,EACA,GACC,GACAA,EACD,EACA,GACCA,EACD,GACC,GAICkD,EAAc,CAChB,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GACxK,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAG9BC,EAAsB,CACxB,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GAEA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,IAIEC,EAAe,CACjB,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAEA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GAoDEC,EAAS,CACX,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GAGE9U,EAAU,IAAI8B,MACd3B,EAAY,IAAI2B,MAChB7B,EAAU,IAAI6B,MACd5B,EAAM,IAAI4B,MAEhB,IAAIiT,EAAiB,EAErB,MAAMC,EAAkB,IAAIlT,MAAM,GAC5BmT,EAAiB,IAAInT,MAAM,GACjC,IAAIoT,EACJ,IAAKA,EAAO,EAAGA,EAAO,EAAGA,IACrBF,EAAgBE,GAAQ,WACxBD,EAAeC,GAAQ,YAG3B,IAAK,IAAIjC,EAAO,EAAGA,EAAO,GAAIA,IAAQ,CAElC,IAAKiC,EAAO,EAAGA,EAAO,EAAGA,IAAQ,CAE7B,MAAMC,EAAOR,EAAY,EAAI1B,EAAOiC,GAEpCF,EAAgBE,GAAME,eAClBV,EAAY,EAAIE,EAAoBO,IACpCT,EAAY,EAAIE,EAAoBO,GAAQ,GAC5CT,EAAY,EAAIE,EAAoBO,GAAQ,IAGhDH,EAAgBE,GAAM1O,YAGtByO,EAAeC,GAAME,eA/Df,WAgEFP,EAAa,EAAIM,GA9Db,WAIQ,SA0D+BL,EAAO7B,GA/DhD,YAgEF4B,EAAa,EAAIM,EAAO,GA9DpB,WAIQ,UA0DmCL,EAAO7B,G,CAyC9D,MAAMoC,EAAgB,CAAC5O,EAAYC,EAAY4O,EAAYC,KAIvD,MAAMC,EAAS,SAAaR,EAAgB,GAAIA,EAAgB,GAAItO,EAAKhD,GACnE+R,EAAS,SAAaT,EAAgB,GAAIA,EAAgB,GAAItO,EAAKhD,GACnEgS,EAAahS,IAAiBgD,EAAKsO,EAAgB,GAAK,SAAaQ,EAAQC,EAAQhP,GAAM/C,EAAegD,IAGhH,IAAIiP,EACJ,GAHAD,EAAWlP,YAGPpF,EAAM,CAEN,MAAMwU,EAAc,SAAaZ,EAAgB,GAAIA,EAAgB,GAAIO,EAAK7R,GACxEmS,EAAc,SAAab,EAAgB,GAAIA,EAAgB,GAAIO,EAAK7R,GAC9EiS,EAAgB,SAAaC,EAAaC,EAAaP,GAAM5R,EAAe6R,G,MAG5EI,EAAgB,IAAI,IAAQD,EAAWpT,EAAGoT,EAAWnT,EAAGmT,EAAWtT,GAGvEuT,EAAcrT,GAAKiS,EACnBoB,EAAcpT,GAAKiS,EACnBmB,EAAcvT,GAAKqS,EACnBkB,EAAcnP,YAEd,MAAMsP,EAAQ,UAAab,EAAe,GAAIA,EAAe,GAAIvO,EAAKhD,GAChEqS,EAAQ,UAAad,EAAe,GAAIA,EAAe,GAAIvO,EAAKhD,GAChEsS,EAAYtS,IAAiBgD,EAAKuO,EAAe,GAAK,UAAaa,EAAOC,EAAOtP,GAAM/C,EAAegD,IAC5GvG,EAAUmB,KAAKoU,EAAWpT,EAAIiS,EAASmB,EAAWnT,EAAIiS,EAASkB,EAAWtT,EAAIqS,GAC9ExU,EAAQqB,KAAKqU,EAAcrT,EAAGqT,EAAcpT,EAAGoT,EAAcvT,GAC7DlC,EAAIoB,KAAK0U,EAAU1T,EAAG,8BAAiD,EAAM0T,EAAUzT,EAAIyT,EAAUzT,GAGrGvC,EAAQsB,KAAKyT,GACbA,GAAgB,EAGpB,IAAK,IAAIrO,EAAK,EAAGA,EAAKhD,EAAcgD,IAChC,IAAK,IAAID,EAAK,EAAGA,EAAKC,EAAKhD,EAAc+C,IAGrC4O,EAAc5O,EAAIC,EAAID,EAAK,EAAM,EAAGC,EAAK,EAAM,GAC/C2O,EAAc5O,EAAK,EAAGC,EAAID,EAAK,EAAM,EAAGC,EAAK,EAAM,GACnD2O,EAAc5O,EAAIC,EAAK,EAAGD,EAAK,EAAM,EAAGC,EAAK,EAAM,GAC/CD,EAAKC,EAAK,EAAIhD,IAGd2R,EAAc5O,EAAK,EAAGC,EAAID,EAAK,EAAM,EAAGC,EAAK,EAAM,GACnD2O,EAAc5O,EAAK,EAAGC,EAAK,EAAGD,EAAK,EAAM,EAAGC,EAAK,EAAM,GACvD2O,EAAc5O,EAAIC,EAAK,EAAGD,EAAK,EAAM,EAAGC,EAAK,EAAM,G,CAOnE,kBAAyB9E,EAAiBzB,EAAWH,EAASC,EAASC,EAAKH,EAAQ8C,SAAU9C,EAAQ+C,SAGtG,MAAMC,EAAa,IAAI,IAKvB,OAJAA,EAAW/C,QAAUA,EACrB+C,EAAW5C,UAAYA,EACvB4C,EAAW9C,QAAUA,EACrB8C,EAAW7C,IAAMA,EACV6C,CACX,CA2BO,SAASkT,EACZ/S,EACAnD,EAWI,CAAC,EACLoD,EAAyB,MAEzB,MAAM+S,EAAS,IAAI,KAAKhT,EAAMC,GAS9B,OAPApD,EAAQ6B,gBAAkB,gCAAgC7B,EAAQ6B,iBAClEsU,EAAO7S,gCAAkCtD,EAAQ6B,gBAE9B0S,EAA0BvU,GAElCuD,YAAY4S,EAAQnW,EAAQwD,WAEhC2S,CACX,CAKO,MAAMC,EAAmB,CAE5BF,mBAGJ,oBAA6B3B,EAE5B,qBAA+B,CAC5BpR,EACAnD,EACAoD,IAEO8S,EAAgB/S,EAAMnD,EAASoD,E,2ECpanC,SAASiT,EACZlT,EACAnD,EAcAoD,EAAyB,MAEzB,MAAM+E,EAAcnI,EAAQmI,IAAOnI,EAAQmI,KAAO,GAAKnI,EAAQmI,IAAM,EAAI,EAAMnI,EAAQmI,IAAO,EACxFmO,OAAqCnU,IAAnBnC,EAAQsW,QAA8BtW,EAAQsW,OAChEC,EAAQvW,EAAQuW,MAChB1S,EAAS7D,EAAQ6D,QAAU,EAC3BD,EAAe5D,EAAQ4D,cAAgB,GACvCoK,EAAOhO,EAAQgO,MAAQ,EACvBxK,EAAYxD,EAAQwD,UACpB3B,EAAkB,gCAAgC7B,EAAQ6B,iBAC1DqG,EAAMlI,EAAQkI,KAAO,YACrBhD,EAAgB,EAAVnB,KAAKS,GACXgS,EAAQ,IAAIzU,MACZ0U,EAAWzW,EAAQyW,WAAY,EAErC,IAAIlP,EAAI,EACJmP,EAAI,EACR,MAAMjF,EAAQvM,EAAMtB,EAAgBuE,EACpC,IAAIwO,EACAC,EACJ,IAAKrP,EAAI,EAAGA,GAAK3D,EAAeoK,EAAMzG,IAAK,CAMvC,IALAqP,EAAO,GACH1O,GAAO,gBAAkBA,GAAO,eAChC0O,EAAKrV,KAAK,IAAI,IAAQ,EAAGgV,EAAM,GAAG/T,EAAG,IACrCoU,EAAKrV,KAAK,IAAI,IAAQwC,KAAKuB,IAAIiC,EAAIkK,GAAQ8E,EAAM,GAAGhU,EAAIsB,EAAQ0S,EAAM,GAAG/T,EAAGuB,KAAKyB,IAAI+B,EAAIkK,GAAQ8E,EAAM,GAAGhU,EAAIsB,KAE7G6S,EAAI,EAAGA,EAAIH,EAAM5Q,OAAQ+Q,IAC1BC,EAAU,IAAI,IAAQ5S,KAAKuB,IAAIiC,EAAIkK,GAAQ8E,EAAMG,GAAGnU,EAAIsB,EAAQ0S,EAAMG,GAAGlU,EAAGuB,KAAKyB,IAAI+B,EAAIkK,GAAQ8E,EAAMG,GAAGnU,EAAIsB,GAC9G+S,EAAKrV,KAAKoV,GAEVzO,GAAO,cAAgBA,GAAO,eAC9B0O,EAAKrV,KAAK,IAAI,IAAQwC,KAAKuB,IAAIiC,EAAIkK,GAAQ8E,EAAMA,EAAM5Q,OAAS,GAAGpD,EAAIsB,EAAQ0S,EAAMA,EAAM5Q,OAAS,GAAGnD,EAAGuB,KAAKyB,IAAI+B,EAAIkK,GAAQ8E,EAAMA,EAAM5Q,OAAS,GAAGpD,EAAIsB,IAC3J+S,EAAKrV,KAAK,IAAI,IAAQ,EAAGgV,EAAMA,EAAM5Q,OAAS,GAAGnD,EAAG,KAExDgU,EAAMjV,KAAKqV,E,CASf,OALc,QACVzT,EACA,CAAE0T,UAAWL,EAAOM,WAAYR,EAAQzU,gBAAiBA,EAAiB2B,UAAWA,EAAWiT,SAAUA,EAAU3T,SAAU9C,EAAQ8C,SAAUC,QAAS/C,EAAQ+C,SACjKK,EAGR,CAMO,MAAM2T,EAAe,CAExBV,eAGH,iBAA2B,CAAClT,EAAcoT,EAAkB1S,EAAgBD,EAAsBR,EAAcI,EAAqB3B,IAS3HwU,EAAYlT,EARH,CACZoT,MAAOA,EACP1S,OAAQA,EACRD,aAAcA,EACd/B,gBAAiBA,EACjB2B,UAAWA,GAGmBJ,E,uFC9F/B,SAAS4T,EAAsBhX,GAClC,MAAMC,EAAU,GACVG,EAAY,GACZF,EAAU,GACVC,EAAM,GAENE,EAAgBL,EAAQK,OAASL,EAAQM,MAAQ,EACjDC,EAAiBP,EAAQO,QAAUP,EAAQM,MAAQ,EACnDuB,EAA8C,IAA5B7B,EAAQ6B,gBAAwB,EAAI7B,EAAQ6B,iBAAmB,gBAGjFoV,EAAY5W,EAAQ,EACpB4E,EAAa1E,EAAS,EAE5BH,EAAUmB,MAAM0V,GAAYhS,EAAY,GACxC/E,EAAQqB,KAAK,EAAG,GAAI,GACpBpB,EAAIoB,KAAK,EAAK,8BAAiD,EAAM,GAErEnB,EAAUmB,KAAK0V,GAAYhS,EAAY,GACvC/E,EAAQqB,KAAK,EAAG,GAAI,GACpBpB,EAAIoB,KAAK,EAAK,8BAAiD,EAAM,GAErEnB,EAAUmB,KAAK0V,EAAWhS,EAAY,GACtC/E,EAAQqB,KAAK,EAAG,GAAI,GACpBpB,EAAIoB,KAAK,EAAK,8BAAiD,EAAM,GAErEnB,EAAUmB,MAAM0V,EAAWhS,EAAY,GACvC/E,EAAQqB,KAAK,EAAG,GAAI,GACpBpB,EAAIoB,KAAK,EAAK,8BAAiD,EAAM,GAGrEtB,EAAQsB,KAAK,GACbtB,EAAQsB,KAAK,GACbtB,EAAQsB,KAAK,GAEbtB,EAAQsB,KAAK,GACbtB,EAAQsB,KAAK,GACbtB,EAAQsB,KAAK,GAGb,kBAAyBM,EAAiBzB,EAAWH,EAASC,EAASC,EAAKH,EAAQ8C,SAAU9C,EAAQ+C,SAGtG,MAAMC,EAAa,IAAI,IAOvB,OALAA,EAAW/C,QAAUA,EACrB+C,EAAW5C,UAAYA,EACvB4C,EAAW9C,QAAUA,EACrB8C,EAAW7C,IAAMA,EAEV6C,CACX,CAwBO,SAASkU,EACZ/T,EACAnD,EAAyK,CAAC,EAC1KoD,EAAyB,MAEzB,MAAM+T,EAAQ,IAAI,KAAKhU,EAAMC,GAc7B,OAZApD,EAAQ6B,gBAAkB,gCAAgC7B,EAAQ6B,iBAClEsV,EAAM7T,gCAAkCtD,EAAQ6B,gBAE7BmV,EAAsBhX,GAE9BuD,YAAY4T,EAAOnX,EAAQwD,WAElCxD,EAAQoX,cACRD,EAAME,UAAUrX,EAAQoX,YAAYjS,QAASnF,EAAQoX,YAAYE,GACjEH,EAAMI,aAAavX,EAAQoX,YAAYjS,OAAOgC,OAAO,KAGlDgQ,CACX,CAMO,MAAMK,EAAe,CAExBN,eAGJ,gBAAyBF,EACxB,iBAA2B,CAAC7T,EAAc7C,EAAc8C,EAAcI,EAAqB3B,IASjFqV,EAAY/T,EARH,CACZ7C,OACAD,MAAOC,EACPC,OAAQD,EACRuB,kBACA2B,aAG8BJ,E,8IClH/B,SAASqU,EAAwBC,EAAe7V,EAAyB8V,EAAiBC,EAAoB9U,EAAoBC,EAAmB8U,GACxJ,MAAM/V,EAAoB6V,GAAO,IAAI5V,MAAe,GAC9CC,EAAa4V,EACb3V,EAAS,GACTxB,EAAgBoX,IAAO,EAG7B,IAAK,IAAI3V,EAAI,EAAGA,EAAI,EAAGA,SACDC,IAAdL,EAAOI,KACPJ,EAAOI,GAAK,IAAI,KAAQ,EAAG,EAAG,EAAG,IAEjCF,QAAgCG,IAAlBH,EAAWE,KACzBF,EAAWE,GAAK,IAAI,KAAO,EAAG,EAAG,EAAG,IAI5C,MAAM9B,EAAwBsX,EAAQ5L,gBAAgB,kBAChD5L,EAAsBwX,EAAQ5L,gBAAgB,gBAC9C3L,EAAkBuX,EAAQ5L,gBAAgB,YAC1C7L,EAAwByX,EAAQ9L,aAChCkM,EAAa1X,EAAUuF,OAAS,EACtC,IAAIoS,EAAO,EACPC,EAAQ,EACRC,EAAQ,EACRC,EAAO,EACPC,EAAW,EACf,MAAMC,EAAW,CAAC,GAClB,GAAI3X,EACA,IAAK,IAAI2O,EAAM0I,EAAY1I,EAAMhP,EAAUuF,OAAS,EAAGyJ,GAAO,EAC1D4I,EAAQ5X,EAAU,GAAKgP,EAAM,IAAMhP,EAAU,EAAIgP,GACjD6I,EAAQ7X,EAAU,GAAKgP,EAAM,GAAK,GAAKhP,EAAU,EAAIgP,EAAM,GAC3D8I,EAAOnU,KAAKoF,KAAK6O,EAAQA,EAAQC,EAAQA,GACzCE,GAAYD,EACZE,EAAS7W,KAAK4W,GAItB,IAAI/I,EAAc,EACd8D,EAAe,EACnB,IAAK,IAAI9Q,EAAQ,EAAGA,EAAQlC,EAAQyF,OAAQvD,GAAS,EAE7C2B,KAAKoK,IAAIjO,EAAQkC,EAAQ,IAAM,OAC/B8Q,EAAO,GAGPnP,KAAKoK,IAAIjO,EAAQkC,EAAQ,GAAK,GAAK,OACnC8Q,EAAO,GAGPnP,KAAKoK,IAAIjO,EAAQkC,EAAQ,GAAK,GAAK,OACnC8Q,EAAO,GAEX9D,EAAMhN,EAAQ,EACD,IAAT8Q,GACA6E,EAAO3I,EAAM0I,EAGL3X,EAAI,EAAIiP,GAFZ2I,EAAO,EAAI,IACPtX,EACeqB,EAAOoR,GAAM3Q,GAAMT,EAAOoR,GAAM7Q,EAAIP,EAAOoR,GAAM3Q,GAAK6V,EAASrU,KAAKiO,MAAM+F,EAAO,IAAOI,EAExFrW,EAAOoR,GAAM3Q,EAG5B9B,EACeqB,EAAOoR,GAAM3Q,GAAMT,EAAOoR,GAAM7Q,EAAIP,EAAOoR,GAAM3Q,GAAK6V,EAASrU,KAAKiO,MAAM+F,EAAO,GAAK,GAAMI,EAE5FrW,EAAOoR,GAAM7Q,EAIhClC,EAAI,EAAIiP,EAAM,GADd2I,EAAO,GAAM,EACM,8BAAiD,EAAMjW,EAAOoR,GAAM5Q,EAAIR,EAAOoR,GAAM5Q,EAErF,8BAAiD,EAAMR,EAAOoR,GAAM1Q,EAAIV,EAAOoR,GAAM1Q,IAG5GrC,EAAI,EAAIiP,IAAQ,EAAIjP,EAAI,EAAIiP,IAAQtN,EAAOoR,GAAM3Q,EAAIpC,EAAI,EAAIiP,GAAOtN,EAAOoR,GAAM7Q,EACjFlC,EAAI,EAAIiP,EAAM,IAAM,EAAIjP,EAAI,EAAIiP,EAAM,IAAMtN,EAAOoR,GAAM1Q,EAAIrC,EAAI,EAAIiP,EAAM,GAAKtN,EAAOoR,GAAM5Q,EAEzF,gCACAnC,EAAI,EAAIiP,EAAM,GAAK,EAAMjP,EAAI,EAAIiP,EAAM,KAG3CpN,GACAC,EAAOV,KAAKS,EAAWkR,GAAMxQ,EAAGV,EAAWkR,GAAMvQ,EAAGX,EAAWkR,GAAMtQ,EAAGZ,EAAWkR,GAAMrQ,GAKjG,kBAAyBhB,EAAiBzB,EAAWH,EAASC,EAASC,EAAK2C,EAAUC,GAGtF,MAAMC,EAAa,IAAI,IAMvB,GALAA,EAAW/C,QAAUA,EACrB+C,EAAW5C,UAAYA,EACvB4C,EAAW9C,QAAUA,EACrB8C,EAAW7C,IAAMA,EAEb6B,EAAY,CACZ,MAAMiB,EAAcpB,IAAoB,eAAwBI,EAAOX,OAAOW,GAAUA,EACxFe,EAAWf,OAASgB,C,CAGxB,OAAOD,CACX,CA2BO,SAASqV,EACZlV,EACAnD,EAaAoD,EAAyB,KACzBkV,EAAkBC,QAElBvY,EAAQ6B,gBAAkB,gCAAgC7B,EAAQ6B,iBAClE,MAAM0U,EAAQvW,EAAQuW,MAChBiC,EAAQxY,EAAQwY,OAAS,GACzBhY,EAAQR,EAAQQ,OAAS,EACzBiY,EAAqBzY,EAAQyY,oBAAsB,EACnDC,EAA2B,GACjC,IAAIC,EAAuB,GAE3B,IAAK,IAAIpR,EAAI,EAAGA,EAAIgP,EAAM5Q,OAAQ4B,IAC9BmR,EAASnR,GAAK,IAAI,KAAQgP,EAAMhP,GAAGhF,EAAGgU,EAAMhP,GAAGlF,GAG/CqW,EAAS,GAAGE,kBAAkBF,EAASA,EAAS/S,OAAS,GAD7C,OAEZ+S,EAAStX,MAGb,MAAMyX,EAAuB,IAAI,IAAmB1V,EAAMuV,EAAUtV,GAAS,qBAA+BkV,GAC5G,IAAK,IAAIQ,EAAM,EAAGA,EAAMN,EAAM7S,OAAQmT,IAAO,CACzCH,EAAO,GACP,IAAK,IAAII,EAAS,EAAGA,EAASP,EAAMM,GAAKnT,OAAQoT,IAC7CJ,EAAKpX,KAAK,IAAI,KAAQiX,EAAMM,GAAKC,GAAQxW,EAAGiW,EAAMM,GAAKC,GAAQ1W,IAEnEwW,EAAqBG,QAAQL,E,CAGjC,MAAMjB,EAAUmB,EAAqBzG,OAAM,EAAO5R,EAAOiY,GAKzD,OAJAf,EAAQpU,gCAAkCtD,EAAQ6B,gBAC/B4V,EAAwBC,EAAS1X,EAAQ6B,gBAAiB7B,EAAQ8B,OAAQ9B,EAAQgC,WAAYhC,EAAQ8C,SAAU9C,EAAQ+C,QAAS/C,EAAQS,MACjJ8C,YAAYmU,EAAS1X,EAAQwD,WAEjCkU,CACX,CAsBO,SAASuB,EACZ9V,EACAnD,EAYAoD,EAAyB,KACzBkV,EAAkBC,QAElB,OAAOF,EAAclV,EAAMnD,EAASoD,EAAOkV,EAC/C,CAKO,MAAMY,EAAiB,CAC1BD,iBACAZ,iBAGJ,kBAA2BZ,EAC1B,mBAA6B,CAC1BtU,EACAoT,EACAnT,EACAoV,EACAhV,EACA3B,EACAyW,EAAkBC,SAQXF,EAAclV,EANL,CACZoT,MAAOA,EACPiC,MAAOA,EACPhV,UAAWA,EACX3B,gBAAiBA,GAEeuB,EAAOkV,GAG9C,oBAA8B,CAC3BnV,EACAoT,EACA/V,EACA4C,EACAoV,EACAhV,EACA3B,EACAyW,EAAkBC,SASXU,EAAe9V,EAPN,CACZoT,MAAOA,EACPiC,MAAOA,EACPhY,MAAOA,EACPgD,UAAWA,EACX3B,gBAAiBA,GAEgBuB,EAAOkV,E,0GC1PzC,SAASa,EAA2BnZ,GAiBvC,MAAMoZ,EAAwD,GAC9DA,EAAU,GAAK,CACXhU,OAAQ,CACJ,CAAC,EAAG,EAAG,UACP,CAAC,SAAU,GAAI,UACf,EAAE,SAAW,UAAW,UACxB,EAAE,UAAY,UAAW,WAE7B8N,KAAM,CACF,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGfkG,EAAU,GAAK,CACXhU,OAAQ,CACJ,CAAC,EAAG,EAAG,UACP,CAAC,SAAU,EAAG,GACd,CAAC,EAAG,SAAU,GACd,EAAE,SAAU,EAAG,GACf,CAAC,GAAI,SAAU,GACf,CAAC,EAAG,GAAI,WAEZ8N,KAAM,CACF,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGfkG,EAAU,GAAK,CACXhU,OAAQ,CACJ,CAAC,EAAG,EAAG,UACP,CAAC,SAAW,EAAG,UACf,EAAE,SAAW,QAAU,UACvB,EAAE,UAAY,QAAU,UACxB,CAAC,SAAW,QAAU,UACtB,CAAC,UAAY,QAAU,UACvB,EAAE,SAAW,QAAU,UACvB,CAAC,SAAW,EAAG,UACf,CAAC,UAAY,EAAG,UAChB,EAAE,UAAY,QAAU,UACxB,CAAC,SAAW,SAAW,UACvB,CAAC,UAAY,SAAW,UACxB,EAAE,SAAW,SAAW,UACxB,EAAE,SAAW,GAAI,UACjB,EAAE,UAAY,GAAI,UAClB,EAAE,UAAY,SAAW,UACzB,CAAC,SAAW,SAAW,UACvB,CAAC,UAAY,SAAW,UACxB,EAAE,SAAW,GAAI,UACjB,CAAC,EAAG,GAAI,WAEZ8N,KAAM,CACF,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,GAAI,GAAI,GACf,CAAC,EAAG,EAAG,GAAI,GAAI,GACf,CAAC,EAAG,EAAG,GAAI,GAAI,GACf,CAAC,EAAG,GAAI,GAAI,GAAI,GAChB,CAAC,EAAG,EAAG,GAAI,GAAI,IACf,CAAC,EAAG,GAAI,GAAI,GAAI,GAChB,CAAC,GAAI,GAAI,GAAI,GAAI,IACjB,CAAC,GAAI,GAAI,GAAI,GAAI,IACjB,CAAC,GAAI,GAAI,GAAI,GAAI,MAGzBkG,EAAU,GAAK,CACXhU,OAAQ,CACJ,CAAC,EAAG,EAAG,UACP,CAAC,SAAU,EAAG,UACd,CAAC,SAAW,EAAG,UACf,EAAE,SAAW,QAAU,UACvB,EAAE,UAAY,QAAU,UACxB,CAAC,UAAY,EAAG,UAChB,CAAC,SAAW,SAAW,UACvB,CAAC,UAAY,SAAW,UACxB,EAAE,SAAW,GAAI,UACjB,EAAE,SAAU,GAAI,UAChB,EAAE,UAAY,GAAI,UAClB,CAAC,EAAG,GAAI,WAEZ8N,KAAM,CACF,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IACP,CAAC,EAAG,GAAI,GACR,CAAC,EAAG,GAAI,GACR,CAAC,EAAG,EAAG,IACP,CAAC,EAAG,GAAI,GACR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,GACR,CAAC,EAAG,GAAI,MAGhBkG,EAAU,GAAK,CACXhU,OAAQ,CACJ,CAAC,EAAG,EAAG,UACP,CAAC,SAAW,EAAG,UACf,EAAE,QAAU,SAAW,UACvB,EAAE,SAAW,SAAW,UACxB,EAAE,SAAW,SAAW,UACxB,CAAC,SAAW,SAAW,UACvB,CAAC,QAAS,SAAW,UACrB,CAAC,UAAY,SAAW,UACxB,EAAE,SAAW,EAAG,UAChB,EAAE,UAAY,GAAK,UACnB,EAAE,SAAW,GAAK,UAClB,EAAE,UAAY,EAAG,UACjB,CAAC,SAAW,GAAI,UAChB,CAAC,UAAY,IAAM,UACnB,CAAC,SAAW,IAAM,UAClB,CAAC,UAAY,GAAI,UACjB,EAAE,SAAW,UAAY,UACzB,EAAE,SAAU,UAAY,UACxB,EAAE,UAAY,UAAY,UAC1B,CAAC,QAAU,UAAY,UACvB,CAAC,UAAY,UAAY,UACzB,CAAC,SAAW,UAAY,UACxB,EAAE,SAAW,GAAI,UACjB,CAAC,EAAG,GAAI,WAEZ8N,KAAM,CACF,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IACP,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,GAAI,GACX,CAAC,EAAG,EAAG,GAAI,GACX,CAAC,EAAG,EAAG,GAAI,GACX,CAAC,EAAG,GAAI,GAAI,GACZ,CAAC,EAAG,GAAI,GAAI,GACZ,CAAC,EAAG,EAAG,GAAI,IACX,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,MAGrBkG,EAAU,GAAK,CACXhU,OAAQ,CACJ,CAAC,EAAG,EAAG,UACP,CAAC,SAAU,EAAG,UACd,EAAE,SAAW,SAAW,UACxB,CAAC,UAAY,SAAU,UACvB,CAAC,SAAW,UAAY,UACxB,EAAE,UAAY,UAAY,WAE9B8N,KAAM,CACF,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAGlBkG,EAAU,GAAK,CACXhU,OAAQ,CACJ,CAAC,EAAG,EAAG,UACP,CAAC,SAAU,EAAG,UACd,EAAE,SAAW,SAAW,UACxB,EAAE,UAAY,SAAW,UACzB,CAAC,SAAW,UAAY,WACxB,CAAC,UAAY,UAAY,UACzB,EAAE,SAAU,UAAY,WACxB,EAAE,UAAY,UAAW,UACzB,CAAC,SAAW,UAAY,UACxB,EAAE,UAAY,SAAW,WAE7B8N,KAAM,CACF,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,KAGrBkG,EAAU,GAAK,CACXhU,OAAQ,CACJ,CAAC,EAAG,EAAG,UACP,CAAC,SAAW,EAAG,UACf,EAAE,SAAW,SAAW,UACxB,EAAE,UAAY,SAAW,UACzB,CAAC,SAAW,SAAW,UACvB,CAAC,UAAW,UAAY,UACxB,EAAE,SAAU,SAAW,UACvB,EAAE,UAAY,UAAY,UAC1B,CAAC,SAAW,UAAY,UACxB,CAAC,UAAY,UAAY,UACzB,EAAE,SAAW,GAAI,UACjB,CAAC,EAAG,GAAI,WAEZ8N,KAAM,CACF,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,GAAI,GACX,CAAC,EAAG,EAAG,GAAI,GACX,CAAC,EAAG,GAAI,GAAI,GACZ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,KAG1BkG,EAAU,GAAK,CACXhU,OAAQ,CACJ,EAAE,QAAU,QAAU,SACtB,EAAE,SAAW,QAAU,SACvB,EAAE,SAAW,QAAU,SACvB,CAAC,QAAU,QAAU,SACrB,CAAC,SAAW,QAAU,UAE1B8N,KAAM,CACF,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,EAAG,KAGlBkG,EAAU,GAAK,CACXhU,OAAQ,CACJ,EAAE,SAAW,QAAU,QACvB,EAAE,QAAU,QAAU,QACtB,EAAE,QAAU,SAAW,SACvB,EAAE,QAAU,SAAU,SACtB,CAAC,QAAU,SAAW,SACtB,CAAC,SAAW,SAAW,UAE3B8N,KAAM,CACF,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,EAAG,EAAG,KAGrBkG,EAAU,IAAM,CACZhU,OAAQ,CACJ,EAAE,QAAU,QAAU,SACtB,EAAE,SAAW,QAAU,SACvB,EAAE,QAAU,OAAS,SACrB,CAAC,SAAW,MAAQ,SACpB,CAAC,QAAU,QAAU,UAEzB8N,KAAM,CACF,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGfkG,EAAU,IAAM,CACZhU,OAAQ,CACJ,EAAE,SAAU,SAAW,SACvB,EAAE,SAAW,QAAU,SACvB,EAAE,SAAW,SAAW,SACxB,CAAC,QAAU,SAAW,SACtB,CAAC,QAAU,QAAU,SACrB,CAAC,SAAW,QAAU,SACtB,CAAC,SAAU,SAAW,UAE1B8N,KAAM,CACF,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGfkG,EAAU,IAAM,CACZhU,OAAQ,CACJ,EAAE,QAAU,SAAW,SACvB,EAAE,QAAU,QAAU,SACtB,EAAE,MAAQ,SAAU,GACpB,EAAE,SAAW,SAAW,SACxB,EAAE,SAAW,QAAU,SACvB,CAAC,QAAU,SAAW,SACtB,CAAC,QAAU,QAAU,SACrB,CAAC,OAAS,SAAU,GACpB,CAAC,SAAW,SAAW,SACvB,CAAC,SAAW,QAAU,UAE1B8N,KAAM,CACF,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAGlBkG,EAAU,IAAM,CACZhU,OAAQ,CACJ,EAAE,QAAU,SAAW,SACvB,EAAE,QAAU,QAAU,SACtB,EAAE,SAAW,SAAW,SACxB,EAAE,QAAU,QAAU,GACtB,EAAE,SAAW,QAAU,SACvB,EAAE,QAAU,SAAW,SACvB,CAAC,SAAW,SAAW,SACvB,CAAC,QAAU,QAAU,SACrB,CAAC,SAAW,QAAU,GACtB,CAAC,QAAU,SAAW,SACtB,CAAC,SAAW,QAAU,SACtB,CAAC,SAAW,SAAW,UAE3B8N,KAAM,CACF,CAAC,GAAI,GAAI,GACT,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,GAAI,GACR,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,GAAI,EAAG,GACR,CAAC,EAAG,EAAG,GACP,CAAC,GAAI,GAAI,EAAG,GACZ,CAAC,GAAI,EAAG,EAAG,GACX,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,GAAI,EAAG,KAGnBkG,EAAU,IAAM,CACZhU,OAAQ,CACJ,EAAE,OAAS,SAAW,SACtB,EAAE,SAAW,SAAW,SACxB,EAAE,QAAU,QAAU,SACtB,EAAE,SAAW,QAAU,SACvB,EAAE,QAAU,SAAW,SACvB,EAAE,SAAW,SAAW,SACxB,EAAE,QAAU,OAAS,QACrB,EAAE,SAAW,SAAW,SACxB,EAAE,QAAU,SAAW,SACvB,EAAE,SAAW,QAAU,SACvB,EAAE,QAAU,QAAU,SACtB,EAAE,SAAW,SAAW,SACxB,CAAC,QAAU,QAAU,SACrB,CAAC,SAAW,SAAW,SACvB,CAAC,OAAS,SAAU,SACpB,CAAC,SAAW,QAAU,SACtB,CAAC,QAAU,QAAU,SACrB,CAAC,SAAW,SAAW,SACvB,CAAC,SAAW,QAAU,SACtB,CAAC,QAAU,OAAS,SACpB,CAAC,QAAU,QAAU,SACrB,CAAC,SAAW,QAAU,SACtB,CAAC,SAAW,SAAW,SACvB,CAAC,QAAU,QAAU,QACrB,CAAC,UAAW,OAAS,UAEzB8N,KAAM,CACF,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,EAAG,GAAI,GACR,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IACP,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,GAAI,GACX,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,EAAG,GACZ,CAAC,GAAI,EAAG,GAAI,IACZ,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,GAAI,GAAI,EAAG,GACf,CAAC,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,MAI1C,MAAMmG,EAAerZ,EAAQqZ,OAASrZ,EAAQqZ,KAAO,GAAKrZ,EAAQqZ,MAAQD,EAAUzT,QAAU,EAAI3F,EAAQqZ,MAAQ,EAC5G/Y,EAAON,EAAQM,KACfiS,EAAgBvS,EAAQuS,OAASjS,GAAQ,EACzCkS,EAAgBxS,EAAQwS,OAASlS,GAAQ,EACzCmS,EAAgBzS,EAAQyS,OAASnS,GAAQ,EACzCgZ,EAAmFtZ,EAAQsS,QAAU8G,EAAUC,GAC/GE,EAAUD,EAAKpG,KAAKvN,OACpB7D,EAAS9B,EAAQ8B,QAAU,IAAIC,MAAMwX,GACrCvX,EAAahC,EAAQgC,WACrBX,OAAwBc,IAAjBnC,EAAQqB,MAA4BrB,EAAQqB,KACnDQ,EAA8C,IAA5B7B,EAAQ6B,gBAAwB,EAAI7B,EAAQ6B,iBAAmB,gBAEjFzB,EAAY,IAAI2B,MAChB9B,EAAU,IAAI8B,MACd7B,EAAU,IAAI6B,MACd5B,EAAM,IAAI4B,MACVE,EAAS,IAAIF,MACnB,IAAIK,EAAQ,EACRoX,EAAU,EACd,MAAMC,EAAU,IAAI1X,MACpB,IAEImE,EAAWL,EAAW6T,EAAanX,EAAWC,EAAWmX,EAFzDpS,EAAI,EACJrF,EAAI,EAIR,GAAIb,EACA,IAAKa,EAAI,EAAGA,EAAIqX,EAASrX,IACjBF,QAAgCG,IAAlBH,EAAWE,KACzBF,EAAWE,GAAK,IAAI,KAAO,EAAG,EAAG,EAAG,IAEpCJ,QAAwBK,IAAdL,EAAOI,KACjBJ,EAAOI,GAAK,IAAI,KAAQ,EAAG,EAAG,EAAG,IAK7C,GAAKb,EAWD,IAAKa,EAAI,EAAGA,EAAIqX,EAASrX,IAAK,CAC1B,MAAM0X,EAAKN,EAAKpG,KAAKhR,GAAGyD,OAMxB,IALA+T,EAAO,EAAI3V,KAAKS,GAAMoV,EACtBrX,EAAI,GAAMwB,KAAKyE,IAAIkR,EAAM,GACzBlX,EAAI,GAGC+E,EAAI,EAAGA,EAAIqS,EAAIrS,IAEhBnH,EAAUmB,KAAK+X,EAAKlU,OAAOkU,EAAKpG,KAAKhR,GAAGqF,IAAI,GAAKgL,EAAO+G,EAAKlU,OAAOkU,EAAKpG,KAAKhR,GAAGqF,IAAI,GAAKiL,EAAO8G,EAAKlU,OAAOkU,EAAKpG,KAAKhR,GAAGqF,IAAI,GAAKkL,GACnIgH,EAAQlY,KAAKa,GACbA,IAEA8D,EAAIpE,EAAOI,GAAGK,GAAKT,EAAOI,GAAGG,EAAIP,EAAOI,GAAGK,IAAM,GAAMA,GACvDsD,EAAI/D,EAAOI,GAAGM,GAAKV,EAAOI,GAAGI,EAAIR,EAAOI,GAAGM,IAAMA,EAAI,IACrDrC,EAAIoB,KAAK2E,EAAG,8BAAiD,EAAML,EAAIA,GACvE8T,EAAMpX,EAAIwB,KAAKuB,IAAIoU,GAAOlX,EAAIuB,KAAKyB,IAAIkU,GACvClX,EAAID,EAAIwB,KAAKyB,IAAIkU,GAAOlX,EAAIuB,KAAKuB,IAAIoU,GACrCnX,EAAIoX,EAEA3X,GACAC,EAAOV,KAAKS,EAAWE,GAAGQ,EAAGV,EAAWE,GAAGS,EAAGX,EAAWE,GAAGU,EAAGZ,EAAWE,GAAGW,GAKrF,IAAK0E,EAAI,EAAGA,EAAIqS,EAAK,EAAGrS,IACpBtH,EAAQsB,KAAKkY,EAAQ,EAAID,GAAUC,EAAQlS,EAAI,EAAIiS,GAAUC,EAAQlS,EAAI,EAAIiS,IAEjFA,GAAWI,C,KAxCR,CACP,IAAKrS,EAAI,EAAGA,EAAI+R,EAAKlU,OAAOO,OAAQ4B,IAChCnH,EAAUmB,KAAK+X,EAAKlU,OAAOmC,GAAG,GAAKgL,EAAO+G,EAAKlU,OAAOmC,GAAG,GAAKiL,EAAO8G,EAAKlU,OAAOmC,GAAG,GAAKkL,GACzFtS,EAAIoB,KAAK,EAAG,8BAAiD,EAAM,GAEvE,IAAKW,EAAI,EAAGA,EAAIqX,EAASrX,IACrB,IAAKqF,EAAI,EAAGA,EAAI+R,EAAKpG,KAAKhR,GAAGyD,OAAS,EAAG4B,IACrCtH,EAAQsB,KAAK+X,EAAKpG,KAAKhR,GAAG,GAAIoX,EAAKpG,KAAKhR,GAAGqF,EAAI,GAAI+R,EAAKpG,KAAKhR,GAAGqF,EAAI,G,CAqChF,mBAA0BnH,EAAWH,EAASC,GAC9C,kBAAyB2B,EAAiBzB,EAAWH,EAASC,EAASC,EAAKH,EAAQ8C,SAAU9C,EAAQ+C,SAEtG,MAAMC,EAAa,IAAI,IAQvB,OAPAA,EAAW5C,UAAYA,EACvB4C,EAAW/C,QAAUA,EACrB+C,EAAW9C,QAAUA,EACrB8C,EAAW7C,IAAMA,EACb6B,GAAcX,IACd2B,EAAWf,OAASA,GAEjBe,CACX,CAkCO,SAAS6W,EACZ1W,EACAnD,EAcI,CAAC,EACLoD,EAAyB,MAEzB,MAAM0W,EAAa,IAAI,KAAK3W,EAAMC,GASlC,OAPApD,EAAQ6B,gBAAkB,gCAAgC7B,EAAQ6B,iBAClEiY,EAAWxW,gCAAkCtD,EAAQ6B,gBAElCsX,EAA2BnZ,GAEnCuD,YAAYuW,EAAY9Z,EAAQwD,WAEpCsW,CACX,CAMO,MAAMC,EAAoB,CAE7BF,oBAGJ,qBAA8BV,EAE7B,sBAAgC,CAC7BhW,EACAnD,EAYAoD,IAEOyW,EAAiB1W,EAAMnD,EAASoD,E,oHC/mBpC,SAAS4W,EAAyBha,GAerC,MAEM8B,EAAoB9B,EAAQ8B,QAAU,IAAIC,MAAe,GACzDC,EAAahC,EAAQgC,WAErBiY,EAAWja,EAAQka,SAAW,aAE9B7Z,EAAQL,EAAQK,OAASL,EAAQM,MAAQ,EACzCC,EAASP,EAAQO,QAAUP,EAAQM,MAAQ,EAC3CE,EAAQR,EAAQQ,OAASR,EAAQM,MAAQ,EACzC6Z,EAAYna,EAAQma,WAAana,EAAQoa,UAAY,EACrDC,EAAara,EAAQqa,YAAcra,EAAQoa,UAAY,EACvDE,EAASta,EAAQua,iBAAmB,EACpCC,EAASxa,EAAQya,eAAiB,EAElC5Y,EAA8C,IAA5B7B,EAAQ6B,gBAAwB,EAAI7B,EAAQ6B,iBAAmB,gBAGvF,IAAK,IAAIK,EAAI,EAAGA,EAlBA,EAkBaA,SACPC,IAAdL,EAAOI,KACPJ,EAAOI,GAAK,IAAI,KAAQ,EAAG,EAAG,EAAG,IAEjCF,QAAgCG,IAAlBH,EAAWE,KACzBF,EAAWE,GAAK,IAAI,KAAO,EAAG,EAAG,EAAG,IAI5C,MAAM+U,EAAY5W,EAAQ,EACpB4E,EAAa1E,EAAS,EACtBma,EAAYla,EAAQ,EAEpBma,EAAoC,GAE1C,IAAK,IAAIzY,EAAI,EAAGA,EAAI,EAAGA,IAEnByY,EAAezY,IAAK,QAA2B,CAC3CgY,QAASD,EACTE,UAAWA,EACXE,WAAYA,EACZha,MAAOA,EACPE,OAAQA,EACRka,cAAeD,EACfD,gBAAiBD,EACjBzY,gBAAiBA,IAIzB,IAAK,IAAIK,EAAI,EAAGA,EAAI,EAAGA,IAEnByY,EAAezY,IAAK,QAA2B,CAC3CgY,QAASD,EACTE,UAAWA,EACXE,WAAYA,EACZha,MAAOG,EACPD,OAAQA,EACRka,cAAeD,EACfD,gBAAiBD,EACjBzY,gBAAiBA,IAIzB,IAAI+Y,EAAaJ,EACbA,IAAW,YACXI,EAAa,SACNJ,IAAW,WAClBI,EAAa,aAGjB,IAAK,IAAI1Y,EAAI,EAAGA,EAAI,EAAGA,IAEnByY,EAAezY,IAAK,QAA2B,CAC3CgY,QAASD,EACTE,UAAWA,EACXE,WAAYA,EACZha,MAAOA,EACPE,OAAQC,EACRia,cAAeG,EACfL,gBAAiBD,EACjBzY,gBAAiBA,IAIzB,IAAIzB,EAA2B,GAC3BF,EAAyB,GACzBC,EAAqB,GACrBF,EAAyB,GAC7B,MAAMgC,EAAwB,GACxB4Y,EAAuC,GACvCC,EAAqC,GAErCC,EAAkC,GACxC,IAAIC,EAAa,EAEbC,EAAa,EAEjB,IAAK,IAAI/Y,EAAI,EAAGA,EA/FA,EA+FaA,IAAK,CAC9B,MAAM6K,EAAM4N,EAAezY,GAAG9B,UAAWuF,OACzCkV,EAAc3Y,GAAK,GACnB4Y,EAAY5Y,GAAK,GACjB,IAAK,IAAIwU,EAAI,EAAGA,EAAI3J,EAAM,EAAG2J,IACzBmE,EAAc3Y,GAAGX,KAAK,IAAI,IAAQoZ,EAAezY,GAAG9B,UAAW,EAAIsW,GAAIiE,EAAezY,GAAG9B,UAAW,EAAIsW,EAAI,GAAIiE,EAAezY,GAAG9B,UAAW,EAAIsW,EAAI,KACrJoE,EAAY5Y,GAAGX,KAAK,IAAI,IAAQoZ,EAAezY,GAAGhC,QAAS,EAAIwW,GAAIiE,EAAezY,GAAGhC,QAAS,EAAIwW,EAAI,GAAIiE,EAAezY,GAAGhC,QAAS,EAAIwW,EAAI,KAGjJsE,EAAKL,EAAezY,GAAG/B,IAAKwF,OAC5BoV,EAAU7Y,GAAK,GACf,IAAK,IAAIqF,EAAI,EAAGA,EAAIyT,EAAIzT,GAAK,EACzBwT,EAAU7Y,GAAGqF,GAAKzF,EAAOI,GAAGK,GAAKT,EAAOI,GAAGG,EAAIP,EAAOI,GAAGK,GAAKoY,EAAezY,GAAG/B,IAAKoH,GACrFwT,EAAU7Y,GAAGqF,EAAI,GAAKzF,EAAOI,GAAGM,GAAKV,EAAOI,GAAGI,EAAIR,EAAOI,GAAGM,GAAKmY,EAAezY,GAAG/B,IAAKoH,EAAI,GAEzF,gCACAwT,EAAU7Y,GAAGqF,EAAI,GAAK,EAAMwT,EAAU7Y,GAAGqF,EAAI,IAOrD,GAJApH,EAAMA,EAAImB,OAAOyZ,EAAU7Y,IAE3BjC,EAAUA,EAAQqB,OAAsBqZ,EAAezY,GAAGjC,QAASib,KAAK3Y,GAAcA,EAAI0Y,KAC1FA,GAAMJ,EAAc3Y,GAAGyD,OACnB3D,EACA,IAAK,IAAIS,EAAI,EAAGA,EAAI,EAAGA,IACnBR,EAAOV,KAAKS,EAAWE,GAAGQ,EAAGV,EAAWE,GAAGS,EAAGX,EAAWE,GAAGU,EAAGZ,EAAWE,GAAGW,E,CAKzF,MAAMsY,EAAO,IAAI,IAAQ,EAAG,EAAGT,GACzBU,EAAQ,eAAiBrX,KAAKS,IACpCpE,EAAYya,EAAc,GACrBK,KAAKG,GAAU,oBAAwBA,EAAOD,GAAOE,IAAIH,KACzDD,KAAKG,GAAU,CAACA,EAAM9Y,EAAG8Y,EAAM7Y,EAAG6Y,EAAMhZ,KACxCZ,QAAO,CAACC,EAA4BC,IAAiBD,EAAYJ,OAAOK,IAAe,IAC5FzB,EAAU4a,EAAY,GACjBI,KAAKG,GAAU,oBAAwBA,EAAOD,KAC9CF,KAAKG,GAAU,CAACA,EAAM9Y,EAAG8Y,EAAM7Y,EAAG6Y,EAAMhZ,KACxCZ,QAAO,CAACC,EAA4BC,IAAiBD,EAAYJ,OAAOK,IAAe,IAC5FvB,EAAYA,EAAUkB,OAClBuZ,EAAc,GACTK,KAAKG,GAAUA,EAAM3V,SAASyV,KAC9BD,KAAKG,GAAU,CAACA,EAAM9Y,EAAG8Y,EAAM7Y,EAAG6Y,EAAMhZ,KACxCZ,QAAO,CAACC,EAA4BC,IAAiBD,EAAYJ,OAAOK,IAAe,KAEhGzB,EAAUA,EAAQoB,OAAOwZ,EAAY,GAAGI,KAAKG,GAAU,CAACA,EAAM9Y,EAAG8Y,EAAM7Y,EAAG6Y,EAAMhZ,KAAIZ,QAAO,CAACC,EAA4BC,IAAiBD,EAAYJ,OAAOK,IAAe,KAE3K,MAAM4Z,EAAO,IAAI,IAAQtE,EAAW,EAAG,GACjCuE,EAAQ,gBAAkBzX,KAAKS,GAAK,GAC1CpE,EAAYA,EAAUkB,OAClBuZ,EAAc,GACTK,KAAKG,GAAU,oBAAwBA,EAAOG,GAAOF,IAAIC,KACzDL,KAAKG,GAAU,CAACA,EAAM9Y,EAAG8Y,EAAM7Y,EAAG6Y,EAAMhZ,KACxCZ,QAAO,CAACC,EAA4BC,IAAiBD,EAAYJ,OAAOK,IAAe,KAEhGzB,EAAUA,EAAQoB,OACdwZ,EAAY,GACPI,KAAKG,GAAU,oBAAwBA,EAAOG,KAC9CN,KAAKG,GAAU,CAACA,EAAM9Y,EAAG8Y,EAAM7Y,EAAG6Y,EAAMhZ,KACxCZ,QAAO,CAACC,EAA4BC,IAAiBD,EAAYJ,OAAOK,IAAe,KAEhG,MAAM8Z,EAAQ,eAAiB1X,KAAKS,GAAK,GACzCpE,EAAYA,EAAUkB,OAClBuZ,EAAc,GACTK,KAAKG,GAAU,oBAAwBA,EAAOI,GAAO/V,SAAS6V,KAC9DL,KAAKG,GAAU,CAACA,EAAM9Y,EAAG8Y,EAAM7Y,EAAG6Y,EAAMhZ,KACxCZ,QAAO,CAACC,EAA4BC,IAAiBD,EAAYJ,OAAOK,IAAe,KAEhGzB,EAAUA,EAAQoB,OACdwZ,EAAY,GACPI,KAAKG,GAAU,oBAAwBA,EAAOI,KAC9CP,KAAKG,GAAU,CAACA,EAAM9Y,EAAG8Y,EAAM7Y,EAAG6Y,EAAMhZ,KACxCZ,QAAO,CAACC,EAA4BC,IAAiBD,EAAYJ,OAAOK,IAAe,KAGhG,MAAM+Z,EAAO,IAAI,IAAQ,EAAGzW,EAAY,GAClC0W,EAAQ,eAAiB5X,KAAKS,GAAK,GACzCpE,EAAYA,EAAUkB,OAClBuZ,EAAc,GACTK,KAAKG,GAAU,oBAAwBA,EAAOM,GAAOL,IAAII,KACzDR,KAAKG,GAAU,CAACA,EAAM9Y,EAAG8Y,EAAM7Y,EAAG6Y,EAAMhZ,KACxCZ,QAAO,CAACC,EAA4BC,IAAiBD,EAAYJ,OAAOK,IAAe,KAEhGzB,EAAUA,EAAQoB,OACdwZ,EAAY,GACPI,KAAKG,GAAU,oBAAwBA,EAAOM,KAC9CT,KAAKG,GAAU,CAACA,EAAM9Y,EAAG8Y,EAAM7Y,EAAG6Y,EAAMhZ,KACxCZ,QAAO,CAACC,EAA4BC,IAAiBD,EAAYJ,OAAOK,IAAe,KAEhG,MAAMia,EAAQ,gBAAkB7X,KAAKS,GAAK,GAC1CpE,EAAYA,EAAUkB,OAClBuZ,EAAc,GACTK,KAAKG,GAAU,oBAAwBA,EAAOO,GAAOlW,SAASgW,KAC9DR,KAAKG,GAAU,CAACA,EAAM9Y,EAAG8Y,EAAM7Y,EAAG6Y,EAAMhZ,KACxCZ,QAAO,CAACC,EAA4BC,IAAiBD,EAAYJ,OAAOK,IAAe,KAEhGzB,EAAUA,EAAQoB,OACdwZ,EAAY,GACPI,KAAKG,GAAU,oBAAwBA,EAAOO,KAC9CV,KAAKG,GAAU,CAACA,EAAM9Y,EAAG8Y,EAAM7Y,EAAG6Y,EAAMhZ,KACxCZ,QAAO,CAACC,EAA4BC,IAAiBD,EAAYJ,OAAOK,IAAe,KAIhG,kBAAyBE,EAAiBzB,EAAWH,EAASC,EAASC,GAGvE,MAAM6C,EAAa,IAAI,IAOvB,GALAA,EAAW/C,QAAUA,EACrB+C,EAAW5C,UAAYA,EACvB4C,EAAW9C,QAAUA,EACrB8C,EAAW7C,IAAMA,EAEb6B,EAAY,CACZ,MAAMiB,EAAcpB,IAAoB,eAAwBI,EAAOX,OAAOW,GAAUA,EACxFe,EAAWf,OAASgB,C,CAGxB,OAAOD,CACX,CAoCO,SAAS6Y,EACZ1Y,EACAnD,EAeAoD,EAAyB,MAEzB,MAAMC,EAAM,IAAI,KAAKF,EAAMC,GAS3B,OAPApD,EAAQ6B,gBAAkB,gCAAgC7B,EAAQ6B,iBAClEwB,EAAIC,gCAAkCtD,EAAQ6B,gBAE3BmY,EAAyBha,GAEjCuD,YAAYF,EAAKrD,EAAQwD,WAE7BH,CACX,CAMO,MAAMyY,EAAkB,CAE3BD,kBAGJ,mBAA4B7B,C,6ECxTrB,SAAS+B,EAA2B/b,GAcvC,MAAMia,EAAWja,EAAQka,SAAW,aAC9BC,EAAYna,EAAQma,WAAana,EAAQoa,UAAY,EACrDC,EAAara,EAAQqa,YAAcra,EAAQoa,UAAY,EACvDE,EAASta,EAAQua,iBAAmB,EACpCC,EAASxa,EAAQya,eAAiB,EAElCpa,EAAQL,EAAQK,OAASL,EAAQM,MAAQ,EACzC0b,EAASjY,KAAKiO,MAAM3R,EAAQ8Z,GAClC,IAAI8B,EAAU5b,EAAQ2b,EAAS7B,EAE/B,MAAM5Z,EAASP,EAAQO,QAAUP,EAAQM,MAAQ,EAC3C4b,EAASnY,KAAKiO,MAAMzR,EAAS8Z,GACnC,IAAI8B,EAAU5b,EAAS2b,EAAS7B,EAEhC,MAAMpD,EAAakD,EAAY6B,EAAU,EACnC/W,EAAcoV,EAAa6B,EAAU,EAE3C,IAAIE,EAAU,EACVC,EAAU,EACVC,EAAS,EACTC,EAAS,EACTC,EAAO,EACPC,EAAO,EAGX,GAAIR,EAAU,GAAKE,EAAU,EAAG,CAM5B,OALAG,GAAUrF,EACVsF,GAAUtX,EACVuX,EAAOvF,EACPwF,EAAOxX,EAECqV,GACJ,KAAK,YACD2B,GAAW,EACXK,GAAUL,EACVO,GAAQP,EACR,MACJ,KAAK,UACDO,GAAQP,EACRG,GAAWH,EAAU,EACrB,MACJ,KAAK,WACDK,GAAUL,EACVG,EAAUH,EAAU,EAI5B,OAAQzB,GACJ,KAAK,YACD2B,GAAW,EACXI,GAAUJ,EACVM,GAAQN,EACR,MACJ,KAAK,YACDM,GAAQN,EACRE,GAAWF,EAAU,EACrB,MACJ,KAAK,SACDI,GAAUJ,EACVE,EAAUF,EAAU,E,CAKhC,MAAM/b,EAAY,GACZF,EAAU,GACVwc,EAAS,GACfA,EAAO,GAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClCA,EAAO,GAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC9BzC,IAAa,kBAAoBA,IAAa,kBAC9CyC,EAAO,GAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAElCzC,IAAa,gBAAkBA,IAAa,gBAC5CyC,EAAO,GAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAElCzC,IAAa,yBAA2BA,IAAa,yBACrDyC,EAAO,GAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAEtC,IAAIvc,EAAqB,GACzB,MAAM8B,EAAS,GACThC,EAAU,GAChB,IAAImC,EAAQ,EACZ,IAAK,IAAII,EAAI,EAAGA,EAAI0Z,EAAQ1Z,IACxB,IAAK,IAAID,EAAI,EAAGA,EAAIyZ,EAAQzZ,IACxBnC,EAAUmB,KAAkBgB,EAAI4X,EAAhBlD,EAA4BmF,EAAuB5Z,EAAI6X,EAAjBpV,EAA8BoX,EAAS,GAC7Fjc,EAAUmB,MAAmBgB,EAAI,GAAK4X,EAAtBlD,EAAkCmF,EAAuB5Z,EAAI6X,EAAjBpV,EAA8BoX,EAAS,GACnGjc,EAAUmB,MAAmBgB,EAAI,GAAK4X,EAAtBlD,EAAkCmF,GAAwB5Z,EAAI,GAAK6X,EAAvBpV,EAAoCoX,EAAS,GACzGjc,EAAUmB,KAAkBgB,EAAI4X,EAAhBlD,EAA4BmF,GAAwB5Z,EAAI,GAAK6X,EAAvBpV,EAAoCoX,EAAS,GACnGpc,EAAQsB,KAAKa,EAAOA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,GAEpEjC,EADA8Z,IAAa,gBAAkBA,IAAa,kBAAoBA,IAAa,wBACvE9Z,EAAImB,OAAOob,GAASna,EAAI,EAAMC,EAAI,GAAM,IACvCyX,IAAa,eAAiBA,IAAa,iBAAmBA,IAAa,uBAC5E9Z,EAAImB,OAAOob,EAAOla,EAAI,IAEtBrC,EAAImB,OAAOob,EAAO,IAE5Bza,EAAOV,KAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzDrB,EAAQqB,KAAK,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAClDa,GAAS,EAKjB,GAAI6Z,EAAU,GAAKE,EAAU,EAAG,CAC5B,MAAMQ,EAA4BR,EAAU,IAAM3B,IAAW,aAAeA,IAAW,UACjFoC,EAAyBT,EAAU,IAAM3B,IAAW,aAAeA,IAAW,aAC9EqC,EAA0BZ,EAAU,IAAM3B,IAAW,aAAeA,IAAW,YAC/EwC,EAA2Bb,EAAU,IAAM3B,IAAW,aAAeA,IAAW,WACtF,IACIzX,EAAGD,EAAGH,EAAG6U,EADTyF,EAAwB,GAiH5B,GA7GIJ,GAAoBE,IAEpBzc,EAAUmB,KAAK+a,EAASF,EAASG,EAASF,EAAS,GACnDjc,EAAUmB,MAAM0V,EAAYmF,EAASG,EAASF,EAAS,GACvDjc,EAAUmB,MAAM0V,EAAYmF,EAASG,EAASJ,EAAUE,EAAS,GACjEjc,EAAUmB,KAAK+a,EAASF,EAASG,EAASJ,EAAUE,EAAS,GAC7Dpc,EAAQsB,KAAKa,EAAOA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,GACxEA,GAAS,EACTS,EAAI,EAAIoZ,EAAU9B,EAClBvX,EAAI,EAAIuZ,EAAU9B,EAClB5X,EAAI,EACJ6U,EAAI,EACJyF,EAAS,CAACla,EAAGD,EAAGH,EAAGG,EAAGH,EAAG6U,EAAGzU,EAAGyU,GAC3B2C,IAAa,kBACb8C,EAAS,CAAC,EAAIla,EAAG,EAAID,EAAG,EAAIH,EAAG,EAAIG,EAAG,EAAIH,EAAG,EAAI6U,EAAG,EAAIzU,EAAG,EAAIyU,IAE/D2C,IAAa,gBACb8C,EAAS,CAAC,EAAIla,EAAGD,EAAG,EAAIH,EAAGG,EAAG,EAAIH,EAAG6U,EAAG,EAAIzU,EAAGyU,IAE/C2C,IAAa,yBACb8C,EAAS,CAACla,EAAG,EAAID,EAAGH,EAAG,EAAIG,EAAGH,EAAG,EAAI6U,EAAGzU,EAAG,EAAIyU,IAEnDnX,EAAMA,EAAImB,OAAOyb,GACjB9a,EAAOV,KAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzDrB,EAAQqB,KAAK,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,IAGlDob,GAAoBG,IAEpB1c,EAAUmB,KAAK0V,EAAYmF,EAASG,EAASF,EAAS,GACtDjc,EAAUmB,KAAKib,EAAOJ,EAASG,EAASF,EAAS,GACjDjc,EAAUmB,KAAKib,EAAOJ,EAASG,EAASJ,EAAUE,EAAS,GAC3Djc,EAAUmB,KAAK0V,EAAYmF,EAASG,EAASJ,EAAUE,EAAS,GAChEpc,EAAQsB,KAAKa,EAAOA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,GACxEA,GAAS,EACTS,EAAI,EACJD,EAAI,EAAIuZ,EAAU9B,EAClB5X,EAAIwZ,EAAU9B,EACd7C,EAAI,EACJyF,EAAS,CAACla,EAAGD,EAAGH,EAAGG,EAAGH,EAAG6U,EAAGzU,EAAGyU,IAC3B2C,IAAa,iBAAoBA,IAAa,kBAAoB+B,EAAS,GAAM,KACjFe,EAAS,CAAC,EAAIla,EAAG,EAAID,EAAG,EAAIH,EAAG,EAAIG,EAAG,EAAIH,EAAG,EAAI6U,EAAG,EAAIzU,EAAG,EAAIyU,KAE/D2C,IAAa,eAAkBA,IAAa,gBAAkB+B,EAAS,GAAM,KAC7Ee,EAAS,CAAC,EAAIla,EAAGD,EAAG,EAAIH,EAAGG,EAAG,EAAIH,EAAG6U,EAAG,EAAIzU,EAAGyU,KAE/C2C,IAAa,wBAA2BA,IAAa,yBAA2B+B,EAAS,GAAM,KAC/Fe,EAAS,CAACla,EAAG,EAAID,EAAGH,EAAG,EAAIG,EAAGH,EAAG,EAAI6U,EAAGzU,EAAG,EAAIyU,IAEnDnX,EAAMA,EAAImB,OAAOyb,GACjB9a,EAAOV,KAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzDrB,EAAQqB,KAAK,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,IAGlDqb,GAAiBC,IAEjBzc,EAAUmB,KAAK+a,EAASF,EAASnX,EAAaoX,EAAS,GACvDjc,EAAUmB,MAAM0V,EAAYmF,EAASnX,EAAaoX,EAAS,GAC3Djc,EAAUmB,MAAM0V,EAAYmF,EAASK,EAAOJ,EAAS,GACrDjc,EAAUmB,KAAK+a,EAASF,EAASK,EAAOJ,EAAS,GACjDpc,EAAQsB,KAAKa,EAAOA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,GACxEA,GAAS,EACTS,EAAI,EAAIoZ,EAAU9B,EAClBvX,EAAI,EACJH,EAAI,EACJ6U,EAAI6E,EAAU9B,EACd0C,EAAS,CAACla,EAAGD,EAAGH,EAAGG,EAAGH,EAAG6U,EAAGzU,EAAGyU,IAC1B2C,IAAa,iBAAmBiC,EAAS,GAAM,GAAOjC,IAAa,kBAAoBiC,EAAS,GAAM,KACvGa,EAAS,CAAC,EAAIla,EAAG,EAAID,EAAG,EAAIH,EAAG,EAAIG,EAAG,EAAIH,EAAG,EAAI6U,EAAG,EAAIzU,EAAG,EAAIyU,KAE9D2C,IAAa,eAAiBiC,EAAS,GAAM,GAAOjC,IAAa,gBAAkBiC,EAAS,GAAM,KACnGa,EAAS,CAAC,EAAIla,EAAGD,EAAG,EAAIH,EAAGG,EAAG,EAAIH,EAAG6U,EAAG,EAAIzU,EAAGyU,KAE9C2C,IAAa,wBAA0BiC,EAAS,GAAM,GAAOjC,IAAa,yBAA2BiC,EAAS,GAAM,KACrHa,EAAS,CAACla,EAAG,EAAID,EAAGH,EAAG,EAAIG,EAAGH,EAAG,EAAI6U,EAAGzU,EAAG,EAAIyU,IAEnDnX,EAAMA,EAAImB,OAAOyb,GACjB9a,EAAOV,KAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzDrB,EAAQqB,KAAK,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,IAGlDqb,GAAiBE,IAEjB1c,EAAUmB,KAAK0V,EAAYmF,EAASnX,EAAaoX,EAAS,GAC1Djc,EAAUmB,KAAKib,EAAOJ,EAASnX,EAAaoX,EAAS,GACrDjc,EAAUmB,KAAKib,EAAOJ,EAASK,EAAOJ,EAAS,GAC/Cjc,EAAUmB,KAAK0V,EAAYmF,EAASK,EAAOJ,EAAS,GACpDpc,EAAQsB,KAAKa,EAAOA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,GACxEA,GAAS,EACTS,EAAI,EACJD,EAAI,EACJH,EAAIwZ,EAAU9B,EACd7C,EAAI6E,EAAU9B,EACd0C,EAAS,CAACla,EAAGD,EAAGH,EAAGG,EAAGH,EAAG6U,EAAGzU,EAAGyU,IAC1B2C,IAAa,iBAAmBiC,EAAS,GAAM,GAAOjC,IAAa,mBAAqBiC,EAASF,GAAU,GAAM,KAClHe,EAAS,CAAC,EAAIla,EAAG,EAAID,EAAG,EAAIH,EAAG,EAAIG,EAAG,EAAIH,EAAG,EAAI6U,EAAG,EAAIzU,EAAG,EAAIyU,KAE9D2C,IAAa,eAAiBiC,EAAS,GAAM,GAAOjC,IAAa,iBAAmBiC,EAASF,GAAU,GAAM,KAC9Ge,EAAS,CAAC,EAAIla,EAAGD,EAAG,EAAIH,EAAGG,EAAG,EAAIH,EAAG6U,EAAG,EAAIzU,EAAGyU,KAE9C2C,IAAa,wBAA0BiC,EAAS,GAAM,GAAOjC,IAAa,0BAA4BiC,EAASF,GAAU,GAAM,KAChIe,EAAS,CAACla,EAAG,EAAID,EAAGH,EAAG,EAAIG,EAAGH,EAAG,EAAI6U,EAAGzU,EAAG,EAAIyU,IAEnDnX,EAAMA,EAAImB,OAAOyb,GACjB9a,EAAOV,KAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzDrB,EAAQqB,KAAK,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,IAIlDob,EAAkB,CAClB,MAAMK,EAAW,GACjBna,EAAI,EACJD,EAAI,EAAIuZ,EAAU9B,EAClB5X,EAAI,EACJ6U,EAAI,EACJ0F,EAAS,GAAK,CAACna,EAAGD,EAAGH,EAAGG,EAAGH,EAAG6U,EAAGzU,EAAGyU,GACpC0F,EAAS,GAAK,CAACna,EAAGD,EAAGH,EAAGG,EAAGH,EAAG6U,EAAGzU,EAAGyU,GAChC2C,IAAa,kBAAoBA,IAAa,kBAC9C+C,EAAS,GAAK,CAAC,EAAIna,EAAG,EAAID,EAAG,EAAIH,EAAG,EAAIG,EAAG,EAAIH,EAAG,EAAI6U,EAAG,EAAIzU,EAAG,EAAIyU,IAEpE2C,IAAa,gBAAkBA,IAAa,gBAC5C+C,EAAS,GAAK,CAAC,EAAIna,EAAGD,EAAG,EAAIH,EAAGG,EAAG,EAAIH,EAAG6U,EAAG,EAAIzU,EAAGyU,IAEpD2C,IAAa,yBAA2BA,IAAa,yBACrD+C,EAAS,GAAK,CAACna,EAAG,EAAID,EAAGH,EAAG,EAAIG,EAAGH,EAAG,EAAI6U,EAAGzU,EAAG,EAAIyU,IAExD,IAAK,IAAI/U,EAAI,EAAGA,EAAIyZ,EAAQzZ,IACxBnC,EAAUmB,KAAkBgB,EAAI4X,EAAhBlD,EAA4BmF,EAASG,EAASF,EAAS,GACvEjc,EAAUmB,MAAmBgB,EAAI,GAAK4X,EAAtBlD,EAAkCmF,EAASG,EAASF,EAAS,GAC7Ejc,EAAUmB,MAAmBgB,EAAI,GAAK4X,EAAtBlD,EAAkCmF,EAASG,EAASJ,EAAUE,EAAS,GACvFjc,EAAUmB,KAAkBgB,EAAI4X,EAAhBlD,EAA4BmF,EAASG,EAASJ,EAAUE,EAAS,GACjFpc,EAAQsB,KAAKa,EAAOA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,GACxEA,GAAS,EAELjC,EADA8Z,IAAa,gBAAkBA,IAAa,kBAAoBA,IAAa,wBACvE9Z,EAAImB,OAAO0b,GAAUza,EAAI,GAAK,IAC7B0X,IAAa,eAAiBA,IAAa,iBAAmBA,IAAa,uBAC5E9Z,EAAImB,OAAO0b,EAAS,IAEpB7c,EAAImB,OAAO0b,EAAS,IAE9B/a,EAAOV,KAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzDrB,EAAQqB,KAAK,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,E,CAI1D,GAAIqb,EAAe,CACf,MAAMK,EAAW,GACjBpa,EAAI,EACJD,EAAI,EACJH,EAAI,EACJ6U,EAAI6E,EAAU9B,EACd4C,EAAS,GAAK,CAACpa,EAAGD,EAAGH,EAAGG,EAAGH,EAAG6U,EAAGzU,EAAGyU,GACpC2F,EAAS,GAAK,CAACpa,EAAGD,EAAGH,EAAGG,EAAGH,EAAG6U,EAAGzU,EAAGyU,GAChC2C,IAAa,kBAAoBA,IAAa,kBAC9CgD,EAAS,GAAK,CAAC,EAAIpa,EAAG,EAAID,EAAG,EAAIH,EAAG,EAAIG,EAAG,EAAIH,EAAG,EAAI6U,EAAG,EAAIzU,EAAG,EAAIyU,IAEpE2C,IAAa,gBAAkBA,IAAa,gBAC5CgD,EAAS,GAAK,CAAC,EAAIpa,EAAGD,EAAG,EAAIH,EAAGG,EAAG,EAAIH,EAAG6U,EAAG,EAAIzU,EAAGyU,IAEpD2C,IAAa,yBAA2BA,IAAa,yBACrDgD,EAAS,GAAK,CAACpa,EAAG,EAAID,EAAGH,EAAG,EAAIG,EAAGH,EAAG,EAAI6U,EAAGzU,EAAG,EAAIyU,IAExD,IAAK,IAAI/U,EAAI,EAAGA,EAAIyZ,EAAQzZ,IACxBnC,EAAUmB,KAAkBgB,EAAI4X,EAAhBlD,EAA4BmF,EAASK,EAAON,EAAUE,EAAS,GAC/Ejc,EAAUmB,MAAmBgB,EAAI,GAAK4X,EAAtBlD,EAAkCmF,EAASK,EAAON,EAAUE,EAAS,GACrFjc,EAAUmB,MAAmBgB,EAAI,GAAK4X,EAAtBlD,EAAkCmF,EAASK,EAAOJ,EAAS,GAC3Ejc,EAAUmB,KAAkBgB,EAAI4X,EAAhBlD,EAA4BmF,EAASK,EAAOJ,EAAS,GACrEpc,EAAQsB,KAAKa,EAAOA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,GACxEA,GAAS,EAELjC,EADA8Z,IAAa,gBAAkBA,IAAa,kBAAoBA,IAAa,wBACvE9Z,EAAImB,OAAO2b,GAAU1a,EAAI2Z,GAAU,IAClCjC,IAAa,eAAiBA,IAAa,iBAAmBA,IAAa,uBAC5E9Z,EAAImB,OAAO2b,EAASf,EAAS,IAE7B/b,EAAImB,OAAO2b,EAAS,IAE9Bhb,EAAOV,KAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzDrB,EAAQqB,KAAK,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,E,CAI1D,GAAIsb,EAAgB,CAChB,MAAMK,EAAW,GACjBra,EAAI,EAAIoZ,EAAU9B,EAClBvX,EAAI,EACJH,EAAI,EACJ6U,EAAI,EACJ4F,EAAS,GAAK,CAACra,EAAGD,EAAGH,EAAGG,EAAGH,EAAG6U,EAAGzU,EAAGyU,GACpC4F,EAAS,GAAK,CAACra,EAAGD,EAAGH,EAAGG,EAAGH,EAAG6U,EAAGzU,EAAGyU,GAChC2C,IAAa,kBAAoBA,IAAa,kBAC9CiD,EAAS,GAAK,CAAC,EAAIra,EAAG,EAAID,EAAG,EAAIH,EAAG,EAAIG,EAAG,EAAIH,EAAG,EAAI6U,EAAG,EAAIzU,EAAG,EAAIyU,IAEpE2C,IAAa,gBAAkBA,IAAa,gBAC5CiD,EAAS,GAAK,CAAC,EAAIra,EAAGD,EAAG,EAAIH,EAAGG,EAAG,EAAIH,EAAG6U,EAAG,EAAIzU,EAAGyU,IAEpD2C,IAAa,yBAA2BA,IAAa,yBACrDiD,EAAS,GAAK,CAACra,EAAG,EAAID,EAAGH,EAAG,EAAIG,EAAGH,EAAG,EAAI6U,EAAGzU,EAAG,EAAIyU,IAExD,IAAK,IAAI9U,EAAI,EAAGA,EAAI0Z,EAAQ1Z,IACxBpC,EAAUmB,KAAK+a,EAASF,EAAuB5Z,EAAI6X,EAAjBpV,EAA8BoX,EAAS,GACzEjc,EAAUmB,KAAK+a,EAASL,EAAUG,EAAuB5Z,EAAI6X,EAAjBpV,EAA8BoX,EAAS,GACnFjc,EAAUmB,KAAK+a,EAASL,EAAUG,GAAwB5Z,EAAI,GAAK6X,EAAvBpV,EAAoCoX,EAAS,GACzFjc,EAAUmB,KAAK+a,EAASF,GAAwB5Z,EAAI,GAAK6X,EAAvBpV,EAAoCoX,EAAS,GAC/Epc,EAAQsB,KAAKa,EAAOA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,GACxEA,GAAS,EAELjC,EADA8Z,IAAa,gBAAkBA,IAAa,kBAAoBA,IAAa,wBACvE9Z,EAAImB,OAAO4b,GAAU1a,EAAI,GAAK,IAC7ByX,IAAa,eAAiBA,IAAa,iBAAmBA,IAAa,uBAC5E9Z,EAAImB,OAAO4b,EAAS1a,EAAI,IAExBrC,EAAImB,OAAO4b,EAAS,IAE9Bjb,EAAOV,KAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzDrB,EAAQqB,KAAK,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,E,CAI1D,GAAIub,EAAiB,CACjB,MAAMK,EAAW,GACjBta,EAAI,EACJD,EAAI,EACJH,EAAIwZ,EAAU5B,EACd/C,EAAI,EACJ6F,EAAS,GAAK,CAACta,EAAGD,EAAGH,EAAGG,EAAGH,EAAG6U,EAAGzU,EAAGyU,GACpC6F,EAAS,GAAK,CAACta,EAAGD,EAAGH,EAAGG,EAAGH,EAAG6U,EAAGzU,EAAGyU,GAChC2C,IAAa,kBAAoBA,IAAa,kBAC9CkD,EAAS,GAAK,CAAC,EAAIta,EAAG,EAAID,EAAG,EAAIH,EAAG,EAAIG,EAAG,EAAIH,EAAG,EAAI6U,EAAG,EAAIzU,EAAG,EAAIyU,IAEpE2C,IAAa,gBAAkBA,IAAa,gBAC5CkD,EAAS,GAAK,CAAC,EAAIta,EAAGD,EAAG,EAAIH,EAAGG,EAAG,EAAIH,EAAG6U,EAAG,EAAIzU,EAAGyU,IAEpD2C,IAAa,yBAA2BA,IAAa,yBACrDkD,EAAS,GAAK,CAACta,EAAG,EAAID,EAAGH,EAAG,EAAIG,EAAGH,EAAG,EAAI6U,EAAGzU,EAAG,EAAIyU,IAExD,IAAK,IAAI9U,EAAI,EAAGA,EAAI0Z,EAAQ1Z,IACxBpC,EAAUmB,KAAKib,EAAOP,EAAUG,EAAuB5Z,EAAI6X,EAAjBpV,EAA8BoX,EAAS,GACjFjc,EAAUmB,KAAKib,EAAOJ,EAAuB5Z,EAAI6X,EAAjBpV,EAA8BoX,EAAS,GACvEjc,EAAUmB,KAAKib,EAAOJ,GAAwB5Z,EAAI,GAAK6X,EAAvBpV,EAAoCoX,EAAS,GAC7Ejc,EAAUmB,KAAKib,EAAOP,EAAUG,GAAwB5Z,EAAI,GAAK6X,EAAvBpV,EAAoCoX,EAAS,GACvFpc,EAAQsB,KAAKa,EAAOA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,GACxEA,GAAS,EAELjC,EADA8Z,IAAa,gBAAkBA,IAAa,kBAAoBA,IAAa,wBACvE9Z,EAAImB,OAAO6b,GAAU3a,EAAIwZ,GAAU,IAClC/B,IAAa,eAAiBA,IAAa,iBAAmBA,IAAa,uBAC5E9Z,EAAImB,OAAO6b,EAAS3a,EAAI,IAExBrC,EAAImB,OAAO6b,EAAS,IAE9Blb,EAAOV,KAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzDrB,EAAQqB,KAAK,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,E,EAK9D,MAAMM,EAA8C,IAA5B7B,EAAQ6B,gBAAwB,EAAI7B,EAAQ6B,iBAAmB,gBAGvF,kBAAyBA,EAAiBzB,EAAWH,EAASC,EAASC,EAAKH,EAAQ8C,SAAU9C,EAAQ+C,SAGtG,MAAMC,EAAa,IAAI,IAEvBA,EAAW/C,QAAUA,EACrB+C,EAAW5C,UAAYA,EACvB4C,EAAW9C,QAAUA,EACrB8C,EAAW7C,IAAMA,EAEjB,MAAM8C,EAAcpB,IAAoB,eAAwBI,EAAOX,OAAOW,GAAUA,EAGxF,OAFAe,EAAWf,OAASgB,EAEbD,CACX,CAmCO,SAASoa,EACZja,EACAnD,EAeAoD,EAAyB,MAEzB,MAAM+T,EAAQ,IAAI,KAAKhU,EAAMC,GAS7B,OAPApD,EAAQ6B,gBAAkB,gCAAgC7B,EAAQ6B,iBAClEsV,EAAM7T,gCAAkCtD,EAAQ6B,gBAE7Bka,EAA2B/b,GAEnCuD,YAAY4T,EAAOnX,EAAQwD,WAE/B2T,CACX,CAMO,MAAMkG,EAAoB,CAE7BD,oBAGJ,qBAA8BrB,C,gGCpevB,SAASuB,EAAsBtd,GAClC,MAAMC,EAAU,GACVG,EAAY,GACZF,EAAU,GACVC,EAAM,GAEN2H,EAAW9H,EAAQ8H,UAAY,EAC/ByV,EAAYvd,EAAQud,WAAa,GACjC3Z,EAAe5D,EAAQ4D,cAAgB,GACvC/B,EAA8C,IAA5B7B,EAAQ6B,gBAAwB,EAAI7B,EAAQ6B,iBAAmB,gBAEjF2b,EAAS5Z,EAAe,EAE9B,IAAK,IAAI2D,EAAI,EAAGA,GAAK3D,EAAc2D,IAAK,CACpC,MAAMrB,EAAIqB,EAAI3D,EAER6Z,EAAclW,EAAIxD,KAAKS,GAAK,EAAOZ,EAAeG,KAAKS,GAAK,EAE5DkZ,EAAY,iBAAmB5V,EAAW,EAAK,EAAG,GAAGoF,SAAS,eAAiBuQ,IAErF,IAAK,IAAI1U,EAAI,EAAGA,GAAKnF,EAAcmF,IAAK,CACpC,MAAMlD,EAAI,EAAIkD,EAAInF,EAEZ+Z,EAAc5U,EAAIhF,KAAKS,GAAK,EAAOZ,EAAeG,KAAKS,GACvDoZ,EAAK7Z,KAAKuB,IAAIqY,GACdE,EAAK9Z,KAAKyB,IAAImY,GAGpB,IAAIxY,EAAS,IAAI,IAAQyY,EAAIC,EAAI,GAC7BnT,EAAWvF,EAAOgC,MAAMoW,EAAY,GACxC,MAAMzT,EAAoB,IAAI,KAAQ5D,EAAGL,GAEzC6E,EAAW,yBAA6BA,EAAUgT,GAClDvY,EAAS,oBAAwBA,EAAQuY,GAEzCtd,EAAUmB,KAAKmJ,EAASnI,EAAGmI,EAASlI,EAAGkI,EAASrI,GAChDnC,EAAQqB,KAAK4D,EAAO5C,EAAG4C,EAAO3C,EAAG2C,EAAO9C,GACxClC,EAAIoB,KAAKuI,EAAkBvH,EAAG,8BAAiD,EAAMuH,EAAkBtH,EAAIsH,EAAkBtH,GAG7H,MAAMsb,GAASvW,EAAI,GAAKiW,EAClBO,GAAShV,EAAI,GAAKyU,EAExBvd,EAAQsB,KAAKgG,EAAIiW,EAASzU,GAC1B9I,EAAQsB,KAAKgG,EAAIiW,EAASO,GAC1B9d,EAAQsB,KAAKuc,EAAQN,EAASzU,GAE9B9I,EAAQsB,KAAKgG,EAAIiW,EAASO,GAC1B9d,EAAQsB,KAAKuc,EAAQN,EAASO,GAC9B9d,EAAQsB,KAAKuc,EAAQN,EAASzU,E,EAKtC,kBAAyBlH,EAAiBzB,EAAWH,EAASC,EAASC,EAAKH,EAAQ8C,SAAU9C,EAAQ+C,SAGtG,MAAMC,EAAa,IAAI,IAOvB,OALAA,EAAW/C,QAAUA,EACrB+C,EAAW5C,UAAYA,EACvB4C,EAAW9C,QAAUA,EACrB8C,EAAW7C,IAAMA,EAEV6C,CACX,CAuBO,SAASgb,EACZ7a,EACAnD,EAAkK,CAAC,EACnKoD,GAEA,MAAM6a,EAAQ,IAAI,KAAK9a,EAAMC,GAS7B,OAPApD,EAAQ6B,gBAAkB,gCAAgC7B,EAAQ6B,iBAClEoc,EAAM3a,gCAAkCtD,EAAQ6B,gBAE7Byb,EAAsBtd,GAE9BuD,YAAY0a,EAAOje,EAAQwD,WAE/Bya,CACX,CAMO,MAAMC,EAAe,CAExBF,eAGJ,gBAAyBV,EAExB,iBAA2B,CAACna,EAAc2E,EAAkByV,EAAmB3Z,EAAsBR,EAAeI,EAAqB3B,IAS/Hmc,EAAY7a,EARH,CACZ2E,WACAyV,YACA3Z,eACA/B,kBACA2B,aAG8BJ,E,gGCtH/B,SAAS+a,EAA0Bne,GAWtC,MAAMC,EAAU,IAAI8B,MACd3B,EAAY,IAAI2B,MAChB7B,EAAU,IAAI6B,MACd5B,EAAM,IAAI4B,MAEV8B,EAAS7D,EAAQ6D,QAAU,EAC3Bua,EAAOpe,EAAQoe,MAAQ,GACvBla,EAAiBlE,EAAQkE,gBAAkB,GAC3Cma,EAAkBre,EAAQqe,iBAAmB,GAC7C3H,EAAI1W,EAAQ0W,GAAK,EACjB4H,EAAIte,EAAQse,GAAK,EACjBzc,EAA8C,IAA5B7B,EAAQ6B,gBAAwB,EAAI7B,EAAQ6B,iBAAmB,gBAGjF0c,EAAUjW,IACZ,MAAMkW,EAAKza,KAAKuB,IAAIgD,GACdmW,EAAK1a,KAAKyB,IAAI8C,GACdoW,EAAWJ,EAAI5H,EAAKpO,EACpBY,EAAKnF,KAAKuB,IAAIoZ,GAEdC,EAAK9a,GAAU,EAAIqF,GAAM,GAAMsV,EAC/BI,EAAK/a,GAAU,EAAIqF,GAAMuV,EAAK,GAC9BI,EAAKhb,EAASE,KAAKyB,IAAIkZ,GAAW,GAExC,OAAO,IAAI,IAAQC,EAAIC,EAAIC,EAAG,EAIlC,IAAItX,EACAwB,EACJ,IAAKxB,EAAI,EAAGA,GAAKrD,EAAgBqD,IAAK,CAClC,MACMrB,EADOqB,EAAIrD,EACCA,EAAkB,EAAIwS,EAAI3S,KAAKS,GAC3Csa,EAAKP,EAAOrY,GACZ6Y,EAAKR,EAAOrY,EAAI,KAChB8Y,EAAOD,EAAGrZ,SAASoZ,GACzB,IAAI7M,EAAI8M,EAAGzD,IAAIwD,GAEf,MAAMG,EAAQ,UAAcD,EAAM/M,GAMlC,IALAA,EAAI,UAAcgN,EAAOD,GAEzBC,EAAMxY,YACNwL,EAAExL,YAEGsC,EAAI,EAAGA,EAAIsV,EAAiBtV,IAAK,CAClC,MACMlD,EADOkD,EAAIsV,EACCA,EAAmB,EAAIta,KAAKS,GACxC0a,GAAMd,EAAOra,KAAKuB,IAAIO,GACtBsZ,EAAKf,EAAOra,KAAKyB,IAAIK,GAE3BzF,EAAUmB,KAAKud,EAAGvc,EAAI2c,EAAKjN,EAAE1P,EAAI4c,EAAKF,EAAM1c,GAC5CnC,EAAUmB,KAAKud,EAAGtc,EAAI0c,EAAKjN,EAAEzP,EAAI2c,EAAKF,EAAMzc,GAC5CpC,EAAUmB,KAAKud,EAAGzc,EAAI6c,EAAKjN,EAAE5P,EAAI8c,EAAKF,EAAM5c,GAE5ClC,EAAIoB,KAAKgG,EAAIrD,GACb/D,EAAIoB,KAAK,8BAAiD,EAAMwH,EAAIsV,EAAkBtV,EAAIsV,E,EAIlG,IAAK9W,EAAI,EAAGA,EAAIrD,EAAgBqD,IAC5B,IAAKwB,EAAI,EAAGA,EAAIsV,EAAiBtV,IAAK,CAClC,MAAMqW,GAASrW,EAAI,GAAKsV,EAClBxb,EAAI0E,EAAI8W,EAAkBtV,EAC1BnG,GAAK2E,EAAI,GAAK8W,EAAkBtV,EAChCtG,GAAK8E,EAAI,GAAK8W,EAAkBe,EAChC9H,EAAI/P,EAAI8W,EAAkBe,EAEhCnf,EAAQsB,KAAK+V,GACbrX,EAAQsB,KAAKqB,GACb3C,EAAQsB,KAAKsB,GACb5C,EAAQsB,KAAK+V,GACbrX,EAAQsB,KAAKkB,GACbxC,EAAQsB,KAAKqB,E,CAKrB,mBAA0BxC,EAAWH,EAASC,GAG9C,kBAAyB2B,EAAiBzB,EAAWH,EAASC,EAASC,EAAKH,EAAQ8C,SAAU9C,EAAQ+C,SAGtG,MAAMC,EAAa,IAAI,IAOvB,OALAA,EAAW/C,QAAUA,EACrB+C,EAAW5C,UAAYA,EACvB4C,EAAW9C,QAAUA,EACrB8C,EAAW7C,IAAMA,EAEV6C,CACX,CA2BO,SAASqc,EACZlc,EACAnD,EAWI,CAAC,EACLoD,GAEA,MAAMkc,EAAY,IAAI,KAAKnc,EAAMC,GASjC,OAPApD,EAAQ6B,gBAAkB,gCAAgC7B,EAAQ6B,iBAClEyd,EAAUhc,gCAAkCtD,EAAQ6B,gBAEjCsc,EAA0Bne,GAElCuD,YAAY+b,EAAWtf,EAAQwD,WAEnC8b,CACX,CAKO,MAAMC,EAAmB,CAE5BF,mBAGJ,oBAA6BlB,EAE5B,qBAA+B,CAC5Bhb,EACAU,EACAua,EACAla,EACAma,EACA3H,EACA4H,EACAlb,EACAI,EACA3B,IAaOwd,EAAgBlc,EAXP,CACZU,SACAua,OACAla,iBACAma,kBACA3H,IACA4H,IACAzc,kBACA2B,aAGkCJ,E,qFCnLnC,SAASoc,EACZrc,EACAnD,EAcAoD,EAAyB,MAEzB,MAAMwT,EAAO5W,EAAQ4W,KACrB,IAAI6I,EAAWzf,EAAQyf,SACnB5b,EAAS,OAEU1B,IAAnBnC,EAAQ6D,OACRA,EAAS7D,EAAQ6D,OACV4b,IACP5b,EAAS4b,EAASC,qBAAsB7b,QAG5C,MAAMD,EAAe5D,EAAQ4D,cAAgB,GACvC+b,EAAiB3f,EAAQ2f,gBAAkB,KACjD,IAAIzX,EAAMlI,EAAQkI,KAAO,YACzB,MAAMuO,EAAWzW,EAAQyW,WAAY,EAC/BjT,EAAYxD,EAAQwD,UACpB3B,EAAkB,gCAAgC7B,EAAQ6B,iBAChE7B,EAAQmI,IAAMnI,EAAQmI,MAAQnI,EAAQmI,KAAO,GAAOnI,EAAQmI,IAAM,GAAO,EAAMnI,EAAQmI,KAAO,EAG9F,MAAMyX,EAAgB,CAClBhJ,EACAiJ,EACAC,EACAjc,EACAD,EACA+b,EACAzX,EACAC,KAEA,MAAM4X,EAAWF,EAAOG,cAClB9f,EAAU2f,EAAOI,aACjBC,EAAYL,EAAOM,eAEnB1O,EADgB,EAAV1N,KAAKS,GACGZ,EAAgBuE,EAE9BiY,EAAiET,GADP,KAAM9b,GAGtE,IAAIwc,EACAC,EACAnb,EACAwR,EACJ,MAAM4J,EAAyB,eAC/B,IAAIne,EAAQ8F,IAAQ,aAAeA,IAAQ,aAAe,EAAI,EAC9D,IAAK,IAAIX,EAAI,EAAGA,EAAIqP,EAAKjR,OAAQ4B,IAAK,CAClC+Y,EAAMF,EAAoB7Y,EAAG2Y,EAAU3Y,IACvC8Y,EAAate,QACboD,EAASjF,EAAQqH,GACjB,IAAK,IAAImK,EAAI,EAAGA,EAAI9N,EAAc8N,IAC9B,uBAAyBqO,EAASxY,GAAIkK,EAAOC,EAAG6O,GAChD5J,EAAU0J,EAAW3O,GAAK2O,EAAW3O,GAAK,WAC1C,8BAAkCvM,EAAQob,EAAgB5J,GAC1DA,EAAQ6J,aAAaF,GAAKG,WAAW7J,EAAKrP,IAC1C8Y,EAAW3O,GAAKiF,EAEpBmJ,EAAY1d,GAASie,EACrBje,G,CAGJ,MAAMse,EAAU,CAACC,EAAkBC,KAC/B,MAAMC,EAAW9e,QACjB,IAAK,IAAIwF,EAAI,EAAGA,EAAIoZ,EAAUpZ,IAC1BsZ,EAAStf,KAAKqV,EAAKgK,IAEvB,OAAOC,CAAQ,EAEnB,OAAQ3Y,GACJ,KAAK,YACD,MACJ,KAAK,eACD4X,EAAY,GAAKY,EAAQ9c,EAAc,GACvCkc,EAAY,GAAKA,EAAY,GAAG3U,MAAM,GACtC,MACJ,KAAK,aACD2U,EAAY1d,GAAS0d,EAAY1d,EAAQ,GAAG+I,MAAM,GAClD2U,EAAY1d,EAAQ,GAAKse,EAAQ9c,EAAcgT,EAAKjR,OAAS,GAC7D,MACJ,KAAK,aACDma,EAAY,GAAKY,EAAQ9c,EAAc,GACvCkc,EAAY,GAAKA,EAAY,GAAG3U,MAAM,GACtC2U,EAAY1d,GAAS0d,EAAY1d,EAAQ,GAAG+I,MAAM,GAClD2U,EAAY1d,EAAQ,GAAKse,EAAQ9c,EAAcgT,EAAKjR,OAAS,GAKrE,OAAOma,CAAW,EAGtB,IAAID,EACAhJ,EACJ,GAAI4I,EAAU,CAEV,MAAMqB,EAAUrB,EAASC,qBACnBvX,EAAMnI,EAAQmI,KAAO2Y,EAAQ3Y,IAUnC,OATA0X,EAASiB,EAAQjB,OAAOkB,OAAOnK,GAC/BC,EAAY+I,EAAchJ,EAAMiJ,EAAQiB,EAAQjK,UAAWhT,EAAQid,EAAQld,aAAc+b,EAAgBmB,EAAQ5Y,IAAKC,GACtHsX,GAAW,QAAa,GAAI,CAAE5I,UAAWA,EAAW4I,SAAUA,IAE9DqB,EAAQjB,OAASA,EACjBiB,EAAQjK,UAAYA,EACpBiK,EAAQ3Y,IAAMA,EACd2Y,EAAQjd,OAASA,EAEV4b,C,CAIXI,EAAc,IAAI,KAAOjJ,GAEzB1O,EAAMA,EAAM,GAAKA,EAAM,EAAI,EAAIA,EAC/B2O,EAAY+I,EAAchJ,EAAMiJ,EAFX,IAAI9d,MAE6B8B,EAAQD,EAAc+b,EAAgBzX,EAAKlI,EAAQmI,KACzG,MAAMiW,GAAO,QACTjb,EACA,CACI0T,UAAWA,EACXmK,WAAW,EACXlK,YAAY,EACZtT,UAAWA,EACX3B,gBAAiBA,EACjB4U,SAAUA,EACV3T,SAAU9C,EAAQ8C,SAClBC,QAAS/C,EAAQ+C,SAErBK,GASJ,OAPAgb,EAAKsB,qBAAsB7I,UAAYA,EACvCuH,EAAKsB,qBAAsBG,OAASA,EACpCzB,EAAKsB,qBAAsB9b,aAAeA,EAC1Cwa,EAAKsB,qBAAsBxX,IAAMA,EACjCkW,EAAKsB,qBAAsBvX,IAAMnI,EAAQmI,IACzCiW,EAAKsB,qBAAsB7b,OAASA,EAE7Bua,CACX,CAMO,MAAM6C,EAAc,CAEvBzB,cAGH,gBAA0B,CACvBrc,EACAyT,EACA/S,EACAD,EACA+b,EACAzX,EACA9E,EACAI,EACA3B,EACA4d,IAaOD,EAAWrc,EAXF,CACZyT,KAAMA,EACN/S,OAAQA,EACRD,aAAcA,EACd+b,eAAgBA,EAChBxX,IAAK,EACLD,IAAKA,EACL1E,UAAWA,EACX3B,gBAAiBA,EACjB4d,SAAUA,GAEmBrc,E,gGCzN9B,MAAM8d,EAMTzW,YAEWlI,EAAY,EAEZC,EAAY,GAFZ,KAAAD,EAAAA,EAEA,KAAAC,EAAAA,EAEHD,IAAMwB,KAAKiO,MAAMzP,KACXwB,KAAKiO,MAAMzP,GACjB,SAAY,uCAEZC,IAAMuB,KAAKiO,MAAMxP,KACXuB,KAAKiO,MAAMxP,GACjB,SAAY,sCAEpB,CAQO0E,QACH,OAAO,IAAIga,EAAWhW,KAAK3I,EAAG2I,KAAK1I,EACvC,CAQO2e,cAAcC,GAEjB,MAAM7e,EAAY2I,KAAK3I,EAGvB,OAFA2I,KAAK3I,EAAI6e,EAAM7e,EAAI6e,EAAM5e,EAAI0I,KAAK1I,EAClC0I,KAAK1I,EAAID,EAAI2I,KAAK1I,EAAI4e,EAAM7e,EACrB2I,IACX,CAQOmW,iBAAiBD,GACpB,MAAM7e,EAAI2I,KAAK3I,EAGf,OAFA2I,KAAK3I,EAAIA,EAAI2I,KAAK1I,EAAI4e,EAAM5e,EAC5B0I,KAAK1I,EAAI4e,EAAM7e,EAAI6e,EAAM5e,EAAID,EACtB2I,IACX,CAUOoW,UAAUra,EAAWgL,GAEpBhL,IAAMlD,KAAKiO,MAAM/K,KACXlD,KAAKiO,MAAM/K,GACjB,SAAY,wCAEZgL,IAAMlO,KAAKiO,MAAMC,KACXlO,KAAKiO,MAAMC,GACjB,SAAY,wCAEhB,MAAM1P,EAAI2I,KAAK3I,EAGf,OAFA2I,KAAK3I,EAAI0E,EAAI1E,EAAI2I,KAAK1I,EACtB0I,KAAK1I,EAAIyP,EAAI1P,EACN2I,IACX,CAUOqW,aAAata,EAAWgL,GAEvBhL,IAAMlD,KAAKiO,MAAM/K,KACXlD,KAAKiO,MAAM/K,GACjB,SAAY,uCAEZgL,IAAMlO,KAAKiO,MAAMC,KACXlO,KAAKiO,MAAMC,GACjB,SAAY,yCAEhB,MAAM1P,EAAI2I,KAAK3I,EAGf,OAFA2I,KAAK3I,EAAI2I,KAAK1I,EAAIyP,EAClB/G,KAAK1I,EAAIyE,EAAIgL,EAAI1P,EAAI2I,KAAK1I,EACnB0I,IACX,CAQOsW,kBAAkBC,EAAoBC,GACzC,MAAMC,EAAQ,WAGd,OAFAA,EAAMpf,EAAIkf,EAAOlf,EAAI,EAAI2I,KAAK3I,EAAImf,EAAcxW,KAAK1I,EAAIkf,EACzDC,EAAMnf,EAAIif,EAAOjf,EAAIuB,KAAKoF,KAAK,GAAK+B,KAAK1I,EAAIkf,EACtCC,CACX,CAQOC,cACH,OAAO,IAAIV,EAAW,EAAG,EAC7B,EC/HG,MAAMW,EAAb,cAIW,KAAAC,UAAuB,GACvB,KAAA/c,SAAyB,GACzB,KAAAf,IAAgB,GAChB,KAAAiP,IAAgB,GAGhB,KAAA8O,UAAwB,GAExB,KAAAC,YAA0B,GAC1B,KAAAC,YAA8B,GAC9B,KAAAC,YAA8B,GAC9B,KAAAC,YAA8B,GAC9B,KAAAC,YAA0B,GAQ1B,KAAAC,MAAwB,IAAIC,EAC/B,cACA,UACA,CACI,CAAC,EAAG,MAAM,GACV,EAAE,KAAK,EAAG,GACV,EAAE,EAAG,GAAI,MACT,CAAC,EAAG,GAAI,MACR,CAAC,KAAK,EAAG,GACT,CAAC,EAAG,KAAK,GACT,EAAE,EAAG,EAAG,MACR,EAAE,MAAM,EAAG,GACX,CAAC,GAAI,MAAM,GACX,CAAC,MAAM,EAAG,GACV,CAAC,EAAG,EAAG,MACP,CAAC,GAAI,KAAK,IAEd,CACI,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,GAAI,EAAG,GACR,CAAC,EAAG,GAAI,GACR,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,GAAI,GACR,CAAC,EAAG,EAAG,GACP,CAAC,GAAI,EAAG,GACR,CAAC,GAAI,EAAG,GACR,CAAC,GAAI,EAAG,GACR,CAAC,GAAI,EAAG,IACR,CAAC,GAAI,GAAI,IAsdrB,CA3cWC,aACH,IAAIC,EAAa,GACjB,MAAMC,EAAsC,CAAC,EACvCxb,EAAIiE,KAAKjE,EACTgL,EAAI/G,KAAK+G,EACf,IASIyQ,EACAC,EACAC,EACAC,EACAC,EAbAngB,EAAIsE,EACJ8b,EAAK,EACLC,EAAK,EACC,IAAN/Q,IACAtP,EAAI,QAAWsE,EAAGgL,IAEtB8Q,EAAK9b,EAAItE,EACTqgB,EAAK/Q,EAAItP,EAOT,MAAMsgB,EAAmB/B,EAAWgC,OAC9BC,EAAO,IAAIjC,EAAWja,EAAGgL,GACzBmR,EAAO,IAAIlC,GAAYjP,EAAGhL,EAAIgL,GAC9BoR,EAAoBnC,EAAWgC,OAC/BI,EAAoBpC,EAAWgC,OAC/BK,EAAoBrC,EAAWgC,OACrC,IACI9T,EACAoU,EACAC,EACAC,EAJAvQ,EAAkB,GAMtB,MAAM4O,EAAwB,GACxB4B,EAAQzY,KAAK0Y,WAEbC,EAAW,CAAC3hB,EAAWwgB,EAAYe,EAAeC,KACpDtU,EAAMlN,EAAI,IAAMuhB,EAChBD,EAAOd,EAAK,IAAMgB,EACZtU,KAAOqT,GAAYe,KAAQf,EAItBrT,KAAOqT,KAAce,KAAQf,GACpCA,EAASe,GAAQf,EAASrT,GACnBoU,KAAQf,KAAcrT,KAAOqT,KACpCA,EAASrT,GAAOqT,EAASe,KANzBf,EAASrT,GAAOoT,EAChBC,EAASe,GAAQhB,EACjBA,KAMAmB,EAAMF,GAAO,GAAK,EAClB1B,EAAUU,EAASrT,IAAQ,EAAEuU,EAAMF,GAAO,GAAIE,EAAMF,GAAO,GAAIhB,EAASrT,IAExE2S,EAAUU,EAASrT,IAAQ,CAAC+D,EAAMwQ,EAAMF,GAAO,IAAKE,EAAMF,GAAO,GAAIhB,EAASrT,G,EAItFlE,KAAKmX,MAAMyB,UAAY,CACnB,CAAC,EAAG,KACJ,CAAC,EAAG,KACJ,CAAC,EAAG,KACJ,CAAC,EAAG,KACJ,CAAC,EAAG,KACJ,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,EAAG,KACJ,CAAC,EAAG,KACJ,CAAC,EAAG,KACJ,CAAC,EAAG,KACJ,CAAC,EAAG,KACJ,CAAC,GAAI,IAAK,EAAG,KACb,CAAC,GAAI,IAAK,EAAG,KACb,CAAC,GAAI,IAAK,EAAG,KACb,CAAC,GAAI,IAAK,EAAG,KACb,CAAC,GAAI,IAAK,EAAG,MAIjB,IAAK,IAAI5hB,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAgCzB,GA7BAiR,EAAQjI,KAAKmX,MAAMnP,KAAKhR,GACxB0gB,EAAIzP,EAAM,GACV0P,EAAI1P,EAAM,GACV2P,EAAI3P,EAAM,GAEVsQ,EAAQR,EAAK1gB,EAAI,IAAM0gB,EAAKzgB,EAC5B4M,EAAMlN,EAAI,IAAMuhB,EACVrU,KAAOqT,IACTA,EAASrT,GAAOwT,EAChBb,EAAUa,GAAK,CAACzP,EAAMwQ,EAAMF,GAAO,IAAKE,EAAMF,GAAO,KAGzDA,EAAQN,EAAK5gB,EAAI,IAAM4gB,EAAK3gB,EAC5B4M,EAAMlN,EAAI,IAAMuhB,EACVrU,KAAOqT,IACTA,EAASrT,GAAOyT,EAChBd,EAAUc,GAAK,CAAC1P,EAAMwQ,EAAMF,GAAO,IAAKE,EAAMF,GAAO,KAGzDA,EAAQL,EAAK7gB,EAAI,IAAM6gB,EAAK5gB,EAC5B4M,EAAMlN,EAAI,IAAMuhB,EACVrU,KAAOqT,IACTA,EAASrT,GAAO0T,EAChBf,EAAUe,GAAK,CAAC3P,EAAMwQ,EAAMF,GAAO,IAAKE,EAAMF,GAAO,KAIzDf,EAAaxX,KAAKmX,MAAMyB,UAAU5hB,GAAG,GACrCygB,EAAczX,KAAKmX,MAAMyB,UAAU5hB,GAAG,GAC1B,MAARygB,EACA,IAAK,IAAIpb,EAAI,EAAGA,EAAI5E,EAAG4E,IACnB+b,EAAM/gB,EAAI0E,EAAIM,GAAKwb,EAAKC,GACxBM,EAAM9gB,EAAIyP,EAAI1K,EAAIwb,EAClBQ,EAAMhhB,GAAKgF,EAAIyb,EACfO,EAAM/gB,EAAI+E,GAAKwb,EAAKC,GACpBS,EAAQH,EAAM/gB,EAAI,IAAM+gB,EAAM9gB,EAC9BkhB,EAASH,EAAMhhB,EAAI,IAAMghB,EAAM/gB,EAC/BqhB,EAAS3hB,EAAGwgB,EAAIe,EAAOC,GAI/B,GAAY,MAARf,EACA,IAAK,IAAIpb,EAAI,EAAGA,EAAI5E,EAAG4E,IACnBgc,EAAMhhB,GAAKgF,EAAIyb,EACfO,EAAM/gB,EAAI+E,GAAKwb,EAAKC,GACpBK,EAAM9gB,EAAIgF,EAAIwb,EACdM,EAAM7gB,EAAI+E,EAAIyb,EACdS,EAAQF,EAAMhhB,EAAI,IAAMghB,EAAM/gB,EAC9BkhB,EAASL,EAAM9gB,EAAI,IAAM8gB,EAAM7gB,EAC/BqhB,EAAS3hB,EAAGwgB,EAAIe,EAAOC,GAM/B,GAFAhB,EAAaxX,KAAKmX,MAAMyB,UAAU5hB,GAAG,GACrCygB,EAAczX,KAAKmX,MAAMyB,UAAU5hB,GAAG,GAClCygB,GAAe,MAARA,EACP,IAAK,IAAIpb,EAAI,EAAGA,EAAI5E,EAAG4E,IACnB8b,EAAM9gB,EAAIgF,EAAIwb,EACdM,EAAM7gB,EAAI+E,EAAIyb,EACdM,EAAM/gB,EAAI0E,GAAKtE,EAAI4E,IAAMwb,EAAKC,GAC9BM,EAAM9gB,EAAIyP,GAAKtP,EAAI4E,GAAKwb,EACxBU,EAAQJ,EAAM9gB,EAAI,IAAM8gB,EAAM7gB,EAC9BkhB,EAASJ,EAAM/gB,EAAI,IAAM+gB,EAAM9gB,EAC/BqhB,EAAS3hB,EAAGwgB,EAAIe,EAAOC,GAI/B,IAAK,IAAInc,EAAI,EAAGA,EAAI2D,KAAKnG,SAASY,OAAQ4B,IACtCkc,EAAQvY,KAAKnG,SAASwC,GAAGhF,EAAI,IAAM2I,KAAKnG,SAASwC,GAAG/E,EACpD4M,EAAMlN,EAAI,IAAMuhB,EACVrU,KAAOqT,IACTA,EAASrT,GAAOoT,IACZmB,EAAMF,GAAO,GAAK,EAClB1B,EAAUU,EAASrT,IAAQ,EAAEuU,EAAMF,GAAO,GAAIE,EAAMF,GAAO,GAAIhB,EAASrT,IAExE2S,EAAUU,EAASrT,IAAQ,CAAC+D,EAAMwQ,EAAMF,GAAO,IAAKE,EAAMF,GAAO,GAAIhB,EAASrT,I,CAM9FlE,KAAK6W,UAAYA,EACjB7W,KAAKuX,SAAWA,CACpB,CAEOsB,aACH,MAAM9c,EAAIiE,KAAKjE,EACTgL,EAAI/G,KAAK+G,EACT+R,EAAUjgB,KAAKoF,KAAK,GAAK,EAEzB8a,EAAOhd,EAAIA,EAAIgL,EAAIA,EAAIhL,EAAIgL,EAEjC/G,KAAKgZ,MAAQjd,EAAIgL,GAAKgS,EACtB/Y,KAAKiZ,MAAQlS,EAAIgS,EACjB/Y,KAAKkZ,MAASJ,GAAW/c,EAAIgL,GAAMgS,EACnC/Y,KAAKmZ,KAAQL,GAAW,EAAI/c,EAAIgL,GAAMgS,CAC1C,CAEOK,oBACH,MAAMrd,EAAIiE,KAAKjE,EACTgL,EAAI/G,KAAK+G,EACf,IAAK,IAAIzP,EAAI,EAAGA,EAAIyP,EAAIhL,EAAI,EAAGzE,IAC3B,IAAK,IAAID,EAAI2I,KAAK+H,IAAIzQ,GAAID,EAAI2I,KAAKlH,IAAIxB,GAAK,EAAGD,IACvCA,EAAI2I,KAAKlH,IAAIxB,IAAMD,EAAI2I,KAAKlH,IAAIxB,EAAI,GAAK,GACzC0I,KAAK8W,YAAYzgB,KAAK,CAAC,IAAMgB,EAAI,IAAMC,EAAG,IAAMD,EAAI,KAAOC,EAAI,GAAI,KAAOD,EAAI,GAAK,IAAMC,IAEzFA,EAAI,GAAKD,EAAI2I,KAAKlH,IAAIxB,EAAI,IAAMD,EAAI,EAAI2I,KAAKlH,IAAIxB,GAAK,GACtD0I,KAAK8W,YAAYzgB,KAAK,CAAC,IAAMgB,EAAI,IAAMC,EAAG,KAAOD,EAAI,GAAK,IAAMC,EAAG,KAAOD,EAAI,GAAK,KAAOC,EAAI,IAI9G,CAEO+hB,eACH,MAAMtd,EAAIiE,KAAKjE,EACTgL,EAAI/G,KAAK+G,EAET6Q,EAAI,IAAI5B,GAAYjP,EAAGhL,EAAIgL,GAEjC,IAAK,IAAIzP,EAAI,EAAGA,EAAIyE,EAAIgL,EAAGzP,IAAK,CAC5B,MAAMmf,EAAQ,IAAIT,EAAWhW,KAAK+H,IAAIzQ,GAAIA,GACpCgiB,EAAO,IAAItD,EAAWhW,KAAK+H,IAAIzQ,EAAI,GAAIA,EAAI,GAC3CiiB,EAAO,IAAIvD,EAAWhW,KAAK+H,IAAIzQ,EAAI,GAAIA,EAAI,GAC3CkiB,EAAS/C,EAAMza,QACfyd,EAAQH,EAAKtd,QACb0d,EAAQH,EAAKvd,QAEnBwd,EAAOvD,cAAc2B,GACrB6B,EAAMxD,cAAc2B,GACpB8B,EAAMzD,cAAc2B,GAEpB,MAAM+B,EAAW,IAAI3D,EAAWhW,KAAKlH,IAAI0gB,EAAOliB,GAAIkiB,EAAOliB,GACrDsiB,EAAU,IAAI5D,EAAWhW,KAAKlH,IAAI0gB,EAAOliB,EAAI,GAAIkiB,EAAOliB,EAAI,GAC5DuiB,EAAc,IAAI7D,EAAWhW,KAAKlH,IAAI0gB,EAAOliB,EAAI,GAAK,EAAGkiB,EAAOliB,EAAI,GAEtEkiB,EAAOniB,IAAMsiB,EAAStiB,GAAKmiB,EAAOliB,IAAMqiB,EAASriB,IAC7CkiB,EAAOniB,IAAMuiB,EAAQviB,GAGrB2I,KAAKkX,YAAY7gB,KAAK,CAAC,EAAG,EAAG,IAC7B2J,KAAK+W,YAAY1gB,KAAK,CAACogB,EAAOmD,EAASC,IAEvC7Z,KAAKkX,YAAY7gB,KAAK,CAAC,EAAG,EAAG,IAC7B2J,KAAK+W,YAAY1gB,KAAK,CAACogB,EAAOoD,EAAaF,KACpCH,EAAOliB,IAAMoiB,EAAMpiB,GAG1B0I,KAAKkX,YAAY7gB,KAAK,CAAC,EAAG,EAAG,IAC7B2J,KAAK+W,YAAY1gB,KAAK,CAACogB,EAAO6C,EAAMM,IAEpC5Z,KAAKkX,YAAY7gB,KAAK,CAAC,EAAG,EAAG,IAC7B2J,KAAK+W,YAAY1gB,KAAK,CAACogB,EAAOmD,EAASL,MAIvCvZ,KAAKkX,YAAY7gB,KAAK,CAAC,EAAG,EAAG,IAC7B2J,KAAK+W,YAAY1gB,KAAK,CAACogB,EAAO6C,EAAMM,IAEpC5Z,KAAKkX,YAAY7gB,KAAK,CAAC,EAAG,EAAG,IAC7B2J,KAAK+W,YAAY1gB,KAAK,CAACogB,EAAOmD,EAASD,K,CAIvD,CAEOG,gBACH,MAAMrD,EAAQ,IAAIT,EAAW,EAAG,GAChC,IAAK,IAAI3Z,EAAI,EAAGA,EAAI2D,KAAK+W,YAAYtc,OAAQ4B,IAAK,CAC9C,MAAM2K,EAAO,GACb,IAAK,IAAInJ,EAAI,EAAGA,EAAI,EAAGA,IACnB4Y,EAAMpf,EAAI2I,KAAK+W,YAAY1a,GAAGwB,GAAGxG,EACjCof,EAAMnf,EAAI0I,KAAK+W,YAAY1a,GAAGwB,GAAGvG,EACF,IAA3B0I,KAAKkX,YAAY7a,GAAGwB,IACpB4Y,EAAMJ,aAAarW,KAAKjE,EAAGiE,KAAK+G,GAEpCC,EAAK3Q,KAAKogB,EAAMza,SAEpBgE,KAAKgX,YAAY3gB,KAAK2Q,E,CAE9B,CAEO+S,gBACH,MAAMtD,EAAQ,IAAIT,EAAW,EAAG,GAChC,IAAK,IAAI3Z,EAAI,EAAGA,EAAI2D,KAAK+W,YAAYtc,OAAQ4B,IAAK,CAC9C,MAAM2K,EAAO,GACb,IAAK,IAAInJ,EAAI,EAAGA,EAAI,EAAGA,IACnB4Y,EAAMpf,EAAI2I,KAAK+W,YAAY1a,GAAGwB,GAAGxG,EACjCof,EAAMnf,EAAI0I,KAAK+W,YAAY1a,GAAGwB,GAAGvG,EACF,IAA3B0I,KAAKkX,YAAY7a,GAAGwB,IACpB4Y,EAAML,UAAUpW,KAAKjE,EAAGiE,KAAK+G,GAEjCC,EAAK3Q,KAAKogB,EAAMza,SAEpBgE,KAAKiX,YAAY5gB,KAAK2Q,E,CAE9B,CAGOgT,UAAUC,EAAgB1R,GAC7B,MAAM2R,EAAIla,KAAKmX,MAAMnP,KAAKiS,GACpBE,EAAOD,EAAE,GACTE,EAAOF,EAAE,GACTG,EAAOH,EAAE,GAETxC,EAAI,cAAkB1X,KAAKmX,MAAMjd,OAAOigB,IACxCxC,EAAI,cAAkB3X,KAAKmX,MAAMjd,OAAOkgB,IACxCxC,EAAI,cAAkB5X,KAAKmX,MAAMjd,OAAOmgB,IAExCC,EAAK3C,EAAEnd,SAASkd,GAChB6C,EAAK3C,EAAEpd,SAASkd,GAEhBrgB,EAAaijB,EAAGre,MAAM+D,KAAKgZ,MAAM5I,IAAImK,EAAGte,MAAM+D,KAAKiZ,OACnD3hB,EAAagjB,EAAGre,MAAM+D,KAAKkZ,MAAM9I,IAAImK,EAAGte,MAAM+D,KAAKmZ,OAEnDqB,EAAS,GAEf,IAAItW,EACAuW,EAAmB,gBACvB,IAAK,IAAIpe,EAAI,EAAGA,EAAI2D,KAAK4W,UAAUnc,OAAQ4B,IACvCoe,EAAUpjB,EAAE4E,MAAM+D,KAAK4W,UAAUva,GAAGhF,GAAG+Y,IAAI9Y,EAAE2E,MAAM+D,KAAK4W,UAAUva,GAAG/E,IAAI8Y,IAAIsH,GAC7E8C,EAAOne,GAAK,CAACoe,EAAQpjB,EAAGojB,EAAQnjB,EAAGmjB,EAAQtjB,GAC3C+M,EAAM+V,EAAS,IAAMja,KAAKnG,SAASwC,GAAGhF,EAAI,IAAM2I,KAAKnG,SAASwC,GAAG/E,EACjEiR,EAAarO,OAAO8F,KAAKuX,SAASrT,IAAQ,CAACuW,EAAQpjB,EAAGojB,EAAQnjB,EAAGmjB,EAAQtjB,EAEjF,CAOO+P,MAAMnL,EAAWgL,GACpB,MAAMlN,EAAW,IAAIhD,MAEf6gB,EAAgB1B,EAAWgC,OAC3BL,EAAgB,IAAI3B,EAAWja,EAAGgL,GAClC6Q,EAAgB,IAAI5B,GAAYjP,EAAGhL,EAAIgL,GAC7ClN,EAASxD,KAAKqhB,EAAGC,EAAGC,GAGpB,IAAK,IAAItgB,EAAIyP,EAAGzP,EAAIyE,EAAI,EAAGzE,IACvB,IAAK,IAAID,EAAI,EAAGA,EAAI0E,EAAI,EAAIzE,EAAGD,IAC3BwC,EAASxD,KAAK,IAAI2f,EAAW3e,EAAGC,IAKxC,GAAIyP,EAAI,EAAG,CACP,MAAMtP,EAAI,QAAWsE,EAAGgL,GAClB8Q,EAAK9b,EAAItE,EACTqgB,EAAK/Q,EAAItP,EAEf,IAAK,IAAI4E,EAAI,EAAGA,EAAI5E,EAAG4E,IACnBxC,EAASxD,KAAK,IAAI2f,EAAW3Z,EAAIwb,EAAIxb,EAAIyb,IACzCje,EAASxD,KAAK,IAAI2f,GAAY3Z,EAAIyb,EAAIzb,GAAKwb,EAAKC,KAChDje,EAASxD,KAAK,IAAI2f,EAAWja,EAAIM,GAAKwb,EAAKC,GAAK/Q,EAAI1K,EAAIwb,IAI5D,MAAM6C,EAAQ3e,EAAIgL,EAClB,IAAK,IAAIzP,EAAI,EAAGA,EAAIyP,EAAGzP,IACnB,IAAK,IAAID,EAAI,EAAGA,EAAIC,EAAIojB,EAAOrjB,IAC3BwC,EAASxD,KAAK,IAAI2f,EAAW3e,EAAGC,IAChCuC,EAASxD,KAAK,IAAI2f,EAAW3e,EAAGC,GAAG8e,UAAUra,EAAGgL,IAChDlN,EAASxD,KAAK,IAAI2f,EAAW3e,EAAGC,GAAG+e,aAAata,EAAGgL,G,CAK/DlN,EAAS8gB,MAAK,CAAChjB,EAAGD,IACPC,EAAEN,EAAIK,EAAEL,IAGnBwC,EAAS8gB,MAAK,CAAChjB,EAAGD,IACPC,EAAEL,EAAII,EAAEJ,IAGnB,MAAMyQ,EAAM,IAAIlR,MAAckF,EAAIgL,EAAI,GAChCjO,EAAM,IAAIjC,MAAckF,EAAIgL,EAAI,GACtC,IAAK,IAAI1K,EAAI,EAAGA,EAAI0L,EAAItN,OAAQ4B,IAC5B0L,EAAI1L,GAAKsL,IACT7O,EAAIuD,IAAK,IAGb,IAAI/E,EAAY,EACZD,EAAY,EAEhB,MAAMwK,EAAchI,EAASY,OAC7B,IAAK,IAAI4B,EAAI,EAAGA,EAAIwF,EAAKxF,IACrBhF,EAAIwC,EAASwC,GAAGhF,EAChBC,EAAIuC,EAASwC,GAAG/E,EAChByQ,EAAIzQ,GAAKuB,KAAKkP,IAAI1Q,EAAG0Q,EAAIzQ,IACzBwB,EAAIxB,GAAKuB,KAAKC,IAAIzB,EAAGyB,EAAIxB,IAI7B,MAAMsjB,EAAW,CAACC,EAAkBC,KAChC,MAAMngB,EAAIkgB,EAAK7e,QAOf,MANiB,MAAb8e,GACAngB,EAAE0b,aAAata,EAAGgL,GAEL,MAAb+T,GACAngB,EAAEyb,UAAUra,EAAGgL,GAEfpM,EAAEtD,EAAI,EACCsD,EAAErD,EAENqD,EAAEtD,EAAIsD,EAAErD,CAAC,EAGdsf,EAAuB,GACvBmE,EAAsB,GACtBC,EAAsB,GACtBC,EAAsB,GACtBvC,EAA0C,CAAC,EAC3CwC,EAAuB,GAC7B,IAAIC,GAAmB,EACnBnO,GAAgB,EACpB,IAAK,IAAI3Q,EAAI,EAAGA,EAAIwF,EAAKxF,IACrBua,EAAUva,GAAKxC,EAASwC,GAAGia,kBAAkB,IAAIN,EAAW,EAAG,GAAI,IACnE+E,EAAU1e,GAAKue,EAAS/gB,EAASwC,GAAI,KACrC2e,EAAU3e,GAAKue,EAAS/gB,EAASwC,GAAI,KACrC4e,EAAU5e,GAAKue,EAAS/gB,EAASwC,GAAI,KAEjC0e,EAAU1e,KAAO2e,EAAU3e,IAAM2e,EAAU3e,KAAO4e,EAAU5e,IAC5D8e,EAAU,EACVnO,EAAO+N,EAAU1e,IACV0e,EAAU1e,KAAO2e,EAAU3e,IAClC8e,EAAU,EACVnO,EAAO+N,EAAU1e,IACV2e,EAAU3e,KAAO4e,EAAU5e,IAClC8e,EAAU,EACVnO,EAAOgO,EAAU3e,IACV4e,EAAU5e,KAAO0e,EAAU1e,KAClC8e,EAAU,EACVnO,EAAO+N,EAAU1e,IAEjB0e,EAAU1e,GAAK2e,EAAU3e,IAAM0e,EAAU1e,GAAK4e,EAAU5e,KACxD8e,EAAU,EACVnO,EAAO+N,EAAU1e,IAEjB2e,EAAU3e,GAAK0e,EAAU1e,IAAM2e,EAAU3e,GAAK4e,EAAU5e,KACxD8e,EAAU,EACVnO,EAAOgO,EAAU3e,IAEjB4e,EAAU5e,GAAK2e,EAAU3e,IAAM4e,EAAU5e,GAAK0e,EAAU1e,KACxD8e,EAAU,EACVnO,EAAOiO,EAAU5e,IAErB6e,EAAS7kB,KAAK,CAAC8kB,EAASnO,EAAMnT,EAASwC,GAAGhF,EAAGwC,EAASwC,GAAG/E,IAG7D4jB,EAASP,MAAK,CAAChjB,EAAGD,IACPC,EAAE,GAAKD,EAAE,KAEpBwjB,EAASP,MAAK,CAAChjB,EAAGD,IACPC,EAAE,GAAKD,EAAE,KAEpBwjB,EAASP,MAAK,CAAChjB,EAAGD,IACPC,EAAE,GAAKD,EAAE,KAEpBwjB,EAASP,MAAK,CAAChjB,EAAGD,IACPC,EAAE,GAAKD,EAAE,KAGpB,IAAK,IAAIiD,EAAI,EAAGA,EAAIugB,EAASzgB,OAAQE,IACjC+d,EAAWwC,EAASvgB,GAAG,GAAK,IAAMugB,EAASvgB,GAAG,IAAM,CAACugB,EAASvgB,GAAG,GAAIugB,EAASvgB,GAAG,GAAIA,GAWzF,OARAqF,KAAKjE,EAAIA,EACTiE,KAAK+G,EAAIA,EACT/G,KAAKnG,SAAWA,EAChBmG,KAAK0Y,WAAaA,EAClB1Y,KAAK4W,UAAYA,EACjB5W,KAAK+H,IAAMA,EACX/H,KAAKlH,IAAMA,EAEJkH,IACX,EAOG,MAAMoX,EAGT7X,YAAmBtH,EAAqBmjB,EAAyBlhB,EAA2B8N,GAAzE,KAAA/P,KAAAA,EAAqB,KAAAmjB,SAAAA,EAAyB,KAAAlhB,OAAAA,EAA2B,KAAA8N,KAAAA,CAAmB,EAM5G,MAAMqT,UAAqBjE,EAoBvBkE,YAAYtT,EAAcf,GAC7B,IAAK,IAAI5K,EAAI,EAAGA,EAAI4K,EAAQ6P,YAAYrc,OAAQ4B,IAC5C2D,KAAKgI,KAAK3R,KAAK4Q,EAAQ6P,YAAYza,GAAG2T,KAAKuL,GAAOtU,EAAQsQ,SAASvP,EAAOuT,KAElF,CAIOC,cAAcvB,EAAgBhT,GACjC,MAAMuQ,EAAKvQ,EAAQkQ,MAAMyB,UAAUqB,GAAQ,GAC3C,IAAK,IAAI5d,EAAI,EAAGA,EAAI4K,EAAQ8P,YAAYtc,OAAQ4B,IAAK,CACjD,MAAM2K,EAAO,GACb,IAAK,IAAInJ,EAAI,EAAGA,EAAI,EAAGA,IACe,IAA9BoJ,EAAQiQ,YAAY7a,GAAGwB,GACvBmJ,EAAK3Q,KAAK4jB,EAAS,IAAMhT,EAAQ8P,YAAY1a,GAAGwB,GAAGxG,EAAI,IAAM4P,EAAQ8P,YAAY1a,GAAGwB,GAAGvG,GAEvF0P,EAAK3Q,KAAKmhB,EAAK,IAAMvQ,EAAQ8P,YAAY1a,GAAGwB,GAAGxG,EAAI,IAAM4P,EAAQ8P,YAAY1a,GAAGwB,GAAGvG,GAG3F0I,KAAKgI,KAAK3R,KAAK,CAAC4Q,EAAQsQ,SAASvQ,EAAK,IAAKC,EAAQsQ,SAASvQ,EAAK,IAAKC,EAAQsQ,SAASvQ,EAAK,K,CAEpG,CAIOyU,cAAcxB,EAAgBhT,GACjC,MAAMuQ,EAAKvQ,EAAQkQ,MAAMyB,UAAUqB,GAAQ,GAC3C,IAAK,IAAI5d,EAAI,EAAGA,EAAI4K,EAAQ+P,YAAYvc,OAAQ4B,IAAK,CACjD,MAAM2K,EAAO,GACb,IAAK,IAAInJ,EAAI,EAAGA,EAAI,EAAGA,IACe,IAA9BoJ,EAAQiQ,YAAY7a,GAAGwB,GACvBmJ,EAAK3Q,KAAK4jB,EAAS,IAAMhT,EAAQ+P,YAAY3a,GAAGwB,GAAGxG,EAAI,IAAM4P,EAAQ+P,YAAY3a,GAAGwB,GAAGvG,GAEvF0P,EAAK3Q,KAAKmhB,EAAK,IAAMvQ,EAAQ+P,YAAY3a,GAAGwB,GAAGxG,EAAI,IAAM4P,EAAQ+P,YAAY3a,GAAGwB,GAAGvG,GAG3F0I,KAAKgI,KAAK3R,KAAK,CAAC4Q,EAAQsQ,SAASvQ,EAAK,IAAKC,EAAQsQ,SAASvQ,EAAK,IAAKC,EAAQsQ,SAASvQ,EAAK,K,CAEpG,CAIO0U,cAAczB,EAAgBhT,GACjC,MAAMuQ,EAAKvQ,EAAQkQ,MAAMyB,UAAUqB,GAAQ,GAC3C,IAAK,IAAI5d,EAAI,EAAGA,EAAI4K,EAAQgQ,YAAYxc,OAAQ4B,IAAK,CACjD,MAAM2K,EAAO,GACb,IAAK,IAAInJ,EAAI,EAAGA,EAAI,EAAGA,IACe,IAA9BoJ,EAAQiQ,YAAY7a,GAAGwB,GACvBmJ,EAAK3Q,KAAK4jB,EAAS,IAAMhT,EAAQgQ,YAAY5a,GAAGwB,GAAGxG,EAAI,IAAM4P,EAAQgQ,YAAY5a,GAAGwB,GAAGvG,GAEvF0P,EAAK3Q,KAAKmhB,EAAK,IAAMvQ,EAAQgQ,YAAY5a,GAAGwB,GAAGxG,EAAI,IAAM4P,EAAQgQ,YAAY5a,GAAGwB,GAAGvG,GAG3F0I,KAAKgI,KAAK3R,KAAK,CAAC4Q,EAAQsQ,SAASvQ,EAAK,IAAKC,EAAQsQ,SAASvQ,EAAK,IAAKC,EAAQsQ,SAASvQ,EAAK,K,CAEpG,CAIO2U,UAAU1U,GACb,MAAM2U,EAAuB,GAC7B,IAAK,IAAIvf,EAAI,EAAGA,EAAI,GAAIA,IACpBuf,EAAOvf,GAAK,GAEhB,MAAMwf,EAAoB5U,EAAQ4P,UAClC,IAAK,IAAIxa,EAAI,EAAGA,EAAIwf,EAAMphB,OAAQ4B,IAC1Bwf,EAAMxf,GAAG,IAAM,EACXwf,EAAMxf,GAAG,GAAK,GACduf,EAAOC,EAAMxf,GAAG,IAAIhG,KAAK,CAACgG,EAAGwf,EAAMxf,GAAG,KAG1Cuf,EAAO,IAAIvlB,KAAK,CAACgG,EAAGwf,EAAMxf,GAAG,KAIrC,MAAMyf,EAAiB,GACvB,IAAK,IAAIzf,EAAI,EAAGA,EAAI,GAAIA,IACpByf,EAAKzf,GAAKA,EAEd,IAAI0f,EAAY,GAChB,IAAK,IAAI1f,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzBuf,EAAOvf,GAAGse,MAAK,CAAChjB,EAAaD,IAClBC,EAAE,GAAKD,EAAE,KAEpB,IAAK,IAAImG,EAAI,EAAGA,EAAI+d,EAAOvf,GAAG5B,OAAQoD,IAClCie,EAAKF,EAAOvf,GAAGwB,GAAG,IAAMke,G,CAIhC,IAAK,IAAIle,EAAI,EAAGA,EAAI+d,EAAO,IAAInhB,OAAQoD,IACnCie,EAAKF,EAAO,IAAI/d,GAAG,IAAMke,IAG7B,IAAK,IAAI1f,EAAI,EAAGA,EAAI2D,KAAK9F,OAAOO,OAAQ4B,IACpC2D,KAAK9F,OAAOmC,GAAGhG,KAAKylB,EAAKzf,IAG7B2D,KAAK9F,OAAOygB,MAAK,CAAChjB,EAAGD,IACVC,EAAE,GAAKD,EAAE,KAGpB,IAAK,IAAI2E,EAAI,EAAGA,EAAI2D,KAAK9F,OAAOO,OAAQ4B,IACpC2D,KAAK9F,OAAOmC,GAAGnG,MAGnB,IAAK,IAAImG,EAAI,EAAGA,EAAI2D,KAAKgI,KAAKvN,OAAQ4B,IAClC,IAAK,IAAIwB,EAAI,EAAGA,EAAImC,KAAKgI,KAAK3L,GAAG5B,OAAQoD,IACrCmC,KAAKgI,KAAK3L,GAAGwB,GAAKie,EAAK9b,KAAKgI,KAAK3L,GAAGwB,IAI5CmC,KAAK2I,YAAciT,EAAO,IAAInhB,OAC9BuF,KAAK6I,UAAY7I,KAAK9F,OAAOO,OAASuF,KAAK2I,WAC/C,CAKOqT,SAASjgB,EAAWkgB,GACvB,MAAMC,EAAqB,GACrBC,EAAsB,GAC5B,IAAInU,EAAuBiU,EAAM/lB,MACjCimB,EAAU9lB,KAAK2R,GACf,IAAI9Q,EAAQ8I,KAAKgI,KAAKA,GAAM9E,QAAQnH,GACpC7E,GAASA,EAAQ,GAAK,EACtB,IAAIyD,EAAIqF,KAAKgI,KAAKA,GAAM9Q,GACxBglB,EAAS7lB,KAAKsE,GACd,IAAI3D,EAAI,EACR,KAAOilB,EAAMxhB,OAAS,GAClBuN,EAAOiU,EAAMjlB,GACTgJ,KAAKgI,KAAKA,GAAM9E,QAAQvI,IAAM,GAE9BzD,GAAS8I,KAAKgI,KAAKA,GAAM9E,QAAQvI,GAAK,GAAK,EAC3CA,EAAIqF,KAAKgI,KAAKA,GAAM9Q,GACpBglB,EAAS7lB,KAAKsE,GACdwhB,EAAU9lB,KAAK2R,GACfiU,EAAMG,OAAOplB,EAAG,GAChBA,EAAI,GAEJA,IAIR,OADAgJ,KAAK8I,cAAczS,KAAK6lB,GACjBC,CACX,CAIO3T,2BACH,MAAM6T,EAAyC,IAAIjF,EAAe,UAAW,WAAY,GAAI,IAC7FiF,EAAuBpkB,KAAO,UAC9B,MAAMqkB,EAAqBtc,KAAK9F,OAAOO,OACjCuV,EAAM,IAAInZ,MAAMylB,GACtB,IAAK,IAAI3hB,EAAI,EAAGA,EAAI2hB,EAAY3hB,IAC5BqV,EAAIrV,GAAK,GAEb,IAAK,IAAI3D,EAAI,EAAGA,EAAIgJ,KAAKgI,KAAKvN,OAAQzD,IAClC,IAAK,IAAIqF,EAAI,EAAGA,EAAI,EAAGA,IACnB2T,EAAIhQ,KAAKgI,KAAKhR,GAAGqF,IAAIhG,KAAKW,GAGlC,IAAIgd,EAAK,EACLC,EAAK,EACLsI,EAAK,EACLvU,EAAO,GACP9N,EAAS,GACb8F,KAAK8I,cAAgB,GACrB,IAAK,IAAI/M,EAAI,EAAGA,EAAIiU,EAAIvV,OAAQsB,IAC5BsgB,EAAuBrU,KAAKjM,GAAKiE,KAAKgc,SAASjgB,EAAGiU,EAAIjU,GAAG3F,OAAO,KAChE4Z,EAAIjU,GAAGygB,SAASjB,IACZvH,EAAK,EACLC,EAAK,EACLsI,EAAK,EACLvU,EAAOhI,KAAKgI,KAAKuT,GACjB,IAAK,IAAIlf,EAAI,EAAGA,EAAI,EAAGA,IACnBnC,EAAS8F,KAAK9F,OAAO8N,EAAK3L,IAC1B2X,GAAM9Z,EAAO,GACb+Z,GAAM/Z,EAAO,GACbqiB,GAAMriB,EAAO,GAEjBmiB,EAAuBniB,OAAOqhB,GAAM,CAACvH,EAAK,EAAGC,EAAK,EAAGsI,EAAK,EAAE,IAGpE,OAAOF,CACX,CAQO3F,yBAAyBzP,GAC5B,MAAMsB,EAAe,IAAI8S,EACrB,eACA,WACA,CACI,CAAC,EAAG,MAAM,GACV,EAAE,KAAK,EAAG,GACV,EAAE,EAAG,GAAI,MACT,CAAC,EAAG,GAAI,MACR,CAAC,KAAK,EAAG,GACT,CAAC,EAAG,KAAK,GACT,EAAE,EAAG,EAAG,MACR,EAAE,MAAM,EAAG,GACX,CAAC,GAAI,MAAM,GACX,CAAC,MAAM,EAAG,GACV,CAAC,EAAG,EAAG,MACP,CAAC,GAAI,KAAK,IAEd,IAGJpU,EAAQoQ,aACRpQ,EAAQ4R,aACR5R,EAAQmS,oBACRnS,EAAQoS,eACRpS,EAAQ6S,gBACR7S,EAAQ8S,gBAER,IAAK,IAAI/iB,EAAI,EAAGA,EAAIiQ,EAAQkQ,MAAMnP,KAAKvN,OAAQzD,IAC3CiQ,EAAQ+S,UAAUhjB,EAAGuR,GACrBA,EAAa+S,YAAYtkB,EAAGiQ,GACU,MAAlCA,EAAQkQ,MAAMyB,UAAU5hB,GAAG,IAC3BuR,EAAaiT,cAAcxkB,EAAGiQ,GAEI,MAAlCA,EAAQkQ,MAAMyB,UAAU5hB,GAAG,IAC3BuR,EAAakT,cAAczkB,EAAGiQ,GAEI,MAAlCA,EAAQkQ,MAAMyB,UAAU5hB,GAAG,IAC3BuR,EAAamT,cAAc1kB,EAAGiQ,GAiBtC,OAbAsB,EAAaoT,UAAU1U,GAEvBsB,EAAarO,OAASqO,EAAarO,OAAO8V,KAAI,SAAUuL,GACpD,MAAM5jB,EAAI4jB,EAAG,GACP7jB,EAAI6jB,EAAG,GACPhkB,EAAIgkB,EAAG,GACPnP,EAAIvT,KAAKoF,KAAKtG,EAAIA,EAAID,EAAIA,EAAIH,EAAIA,GAIxC,OAHAgkB,EAAG,IANQ,EAMOnP,EAClBmP,EAAG,IAPQ,EAOOnP,EAClBmP,EAAG,IARQ,EAQOnP,EACXmP,CACX,IAEOhT,CACX,E,uFChzBJ,yBAA2B,CAACkU,EAAiBvkB,IAClCwkB,EAAaC,MAAMF,EAAYvkB,GAqDnC,MAAMwkB,UAAqB,KAAlC,c,oBAIW,KAAAjV,aAA6B,CAChC3Q,WAAY,GACZmS,YAAa,GACbG,UAAW,GACXF,UAAW,GACXC,UAAW,GACXT,cAAe,EACfE,gBAAiB,EACjBG,QAAS,EACTC,cAAe,EACfF,cAAe,GA+NvB,CAtNW8T,oBAAoBC,EAAsBC,GAC7C,YAAiB,IAAbA,GACID,EAAe7c,KAAKyH,aAAamB,gBAAkB,IACnD,SAAY,yCACZiU,EAAe7c,KAAKyH,aAAamB,gBAAkB,GAEhD5I,KAAKyH,aAAamB,gBAAkBiU,IAE3CA,EAAe,KACf,SAAY,kBACZA,EAAe,IAEfC,EAAW9c,KAAKyH,aAAauB,cAAgB,IAC7C,SAAY,0CACZ8T,EAAW9c,KAAKyH,aAAauB,cAAgB,GAG1C,GAAK6T,EAAe7c,KAAKyH,aAAauB,cAAgB8T,EACjE,CAEQC,0BAA0BC,GAC9B,IAAK,IAAI3gB,EAAI,EAAGA,EAAI2gB,EAAWviB,OAAQ4B,IAAK,CACxC,MAAM0L,EAAsBiV,EAAW3gB,GAAG,GACpCvD,EAAsBkkB,EAAW3gB,GAAG,GACpC4gB,EAAsBD,EAAW3gB,GAAG,GAC1C,IAAK,IAAIrF,EAAI+Q,EAAK/Q,EAAI8B,EAAM,EAAG9B,IAC3BgJ,KAAKyH,aAAa3Q,WAAWE,GAAKimB,C,CAI1C,MAAMC,EAAoB,GAC1B,IAAK,IAAIlmB,EAAI,EAAGA,EAAI,GAAIA,IACpB,IAAK,IAAIqF,EAAI,EAAGA,EAAI,EAAGA,IACnB6gB,EAAQ7mB,KAAK2J,KAAKyH,aAAa3Q,WAAWE,GAAGQ,EAAGwI,KAAKyH,aAAa3Q,WAAWE,GAAGS,EAAGuI,KAAKyH,aAAa3Q,WAAWE,GAAGU,EAAGsI,KAAKyH,aAAa3Q,WAAWE,GAAGW,GAG9J,IAAK,IAAIX,EAAI,GAAIA,EAAIgJ,KAAKyH,aAAa3Q,WAAW2D,OAAQzD,IACtD,IAAK,IAAIqF,EAAI,EAAGA,EAAI,EAAGA,IACnB6gB,EAAQ7mB,KAAK2J,KAAKyH,aAAa3Q,WAAWE,GAAGQ,EAAGwI,KAAKyH,aAAa3Q,WAAWE,GAAGS,EAAGuI,KAAKyH,aAAa3Q,WAAWE,GAAGU,EAAGsI,KAAKyH,aAAa3Q,WAAWE,GAAGW,GAG9J,OAAOulB,CACX,CAMOC,sBAAsBH,GACzB,MAAME,EAAUld,KAAK+c,0BAA0BC,GAC/Chd,KAAKod,gBAAgB,cAAwBF,EACjD,CAMOG,yBAAyBL,GAC5B,MAAME,EAAUld,KAAK+c,0BAA0BC,GAC/Chd,KAAKsd,mBAAmB,cAAwBJ,EACpD,CAEQK,uBAAuBC,GAC3B,MAAMvoB,EAAkB+K,KAAKY,gBAAgB,YAC7C,IAAK,IAAIvE,EAAI,EAAGA,EAAImhB,EAAQ/iB,OAAQ4B,IAAK,CACrC,MAAM0L,EAAsByV,EAAQnhB,GAAG,GACjCvD,EAAsB0kB,EAAQnhB,GAAG,GACjCqC,EAA2B8e,EAAQnhB,GAAG,GACtC1D,EAAyB6kB,EAAQnhB,GAAG,GACpCe,EAAwBogB,EAAQnhB,GAAG,GACnCohB,EAAoB,GACpBC,EAAoB,GAC1B,IAAI1iB,EACAL,EACJ,IAAK,IAAI6Q,EAAI,EAAGA,EAAI,EAAGA,IACnBxQ,EAAI0D,EAAOrH,EAAIsB,EAASE,KAAKuB,IAAIgD,EAASoO,EAAI3S,KAAKS,GAAM,KACzDqB,EAAI+D,EAAOpH,EAAIqB,EAASE,KAAKyB,IAAI8C,EAASoO,EAAI3S,KAAKS,GAAM,KACrD0B,EAAI,IACJA,EAAI,GAEJA,EAAI,IACJA,EAAI,GAERyiB,EAAQpnB,KAAK2E,EAAGL,GAEpB,IAAK,IAAI6Q,EAAI,EAAGA,EAAI,EAAGA,IACnBxQ,EAAI0D,EAAOrH,EAAIsB,EAASE,KAAKuB,IAAIgD,EAASoO,EAAI3S,KAAKS,GAAM,GACzDqB,EAAI+D,EAAOpH,EAAIqB,EAASE,KAAKyB,IAAI8C,EAASoO,EAAI3S,KAAKS,GAAM,GACrD0B,EAAI,IACJA,EAAI,GAEJA,EAAI,IACJA,EAAI,GAER0iB,EAAQrnB,KAAK2E,EAAGL,GAEpB,IAAK,IAAI3D,EAAI+Q,EAAK/Q,EAAI6B,KAAKkP,IAAI,GAAIjP,EAAM,GAAI9B,IACzC,IAAK,IAAIwU,EAAI,EAAGA,EAAI,EAAGA,IACnBvW,EAAI,GAAK+B,EAAI,EAAIwU,GAAKiS,EAAQ,EAAIjS,GAClCvW,EAAI,GAAK+B,EAAI,EAAIwU,EAAI,GAAKiS,EAAQ,EAAIjS,EAAI,GAGlD,IAAK,IAAIxU,EAAI6B,KAAKC,IAAI,GAAIiP,GAAM/Q,EAAI8B,EAAM,EAAG9B,IACzC,IAAK,IAAIwU,EAAI,EAAGA,EAAI,EAAGA,IAEnBvW,EAAI,GAAK+B,EAAI,GAAK,EAAIwU,GAAKkS,EAAQ,EAAIlS,GACvCvW,EAAI,GAAK+B,EAAI,GAAK,EAAIwU,GAAKkS,EAAQ,EAAIlS,EAAI,E,CAIvD,OAAOvW,CACX,CAMO0oB,mBAAmBH,GACtB,MAAMI,EAAqB5d,KAAKud,uBAAuBC,GACvDxd,KAAKod,gBAAgB,WAAqBQ,EAC9C,CAMOC,sBAAsBL,GACzB,MAAMI,EAAS5d,KAAKud,uBAAuBC,GAC3Cxd,KAAKsd,mBAAmB,WAAqBM,EACjD,CAQOE,sBAAsBC,EAAY/V,EAAcxI,GACnD,MAAM3D,EAAc,qBAAyBmE,KAAKyH,aAAayB,UAAUlB,GAAOhI,KAAKyH,aAAa0B,UAAUnB,GAAOhI,KAAKyH,aAAa2B,UAAUpB,IAC/I+V,EAAK7X,SAAWrK,EAChBkiB,EAAKve,SAAWQ,KAAKyH,aAAawB,YAAYjB,GACzCoI,IAAIpQ,KAAKyH,aAAayB,UAAUlB,GAAM/L,MAAMuD,EAASnI,IACrD+Y,IAAIpQ,KAAKyH,aAAa0B,UAAUnB,GAAM/L,MAAMuD,EAASlI,IACrD8Y,IAAIpQ,KAAKyH,aAAa2B,UAAUpB,GAAM/L,MAAMuD,EAASrI,GAC9D,CAMO6mB,UAAUC,GACbC,MAAMF,UAAUC,GAChBA,EAAoB9P,KAAO,eAE3B,MAAM1G,EAAoB,CAAC,EAO3B,GANAA,EAAaqB,cAAgB9I,KAAKyH,aAAaqB,cAC/CrB,EAAaiB,cAAgB1I,KAAKyH,aAAaiB,cAC/CjB,EAAamB,gBAAkB5I,KAAKyH,aAAamB,gBACjDnB,EAAasB,QAAU/I,KAAKyH,aAAasB,QACzCtB,EAAauB,cAAgBhJ,KAAKyH,aAAauB,cAE3ChJ,KAAKyH,aAAa3Q,WAAY,CAC9B2Q,EAAa3Q,WAAa,GAC1B,IAAK,MAAMqnB,KAASne,KAAKyH,aAAa3Q,WAClC2Q,EAAa3Q,WAAWT,KAAK8nB,EAAMC,U,CAG3C,GAAIpe,KAAKyH,aAAawB,YAAa,CAC/BxB,EAAawB,YAAc,GAC3B,IAAK,MAAMoV,KAAUre,KAAKyH,aAAawB,YACnCxB,EAAawB,YAAY5S,KAAKgoB,EAAOD,U,CAG7C,GAAIpe,KAAKyH,aAAa2B,UAAW,CAC7B3B,EAAa2B,UAAY,GACzB,IAAK,MAAMiV,KAAUre,KAAKyH,aAAa2B,UACnC3B,EAAa2B,UAAU/S,KAAKgoB,EAAOD,U,CAG3C,GAAIpe,KAAKyH,aAAa0B,UAAW,CAC7B1B,EAAa0B,UAAY,GACzB,IAAK,MAAMkV,KAAUre,KAAKyH,aAAa0B,UACnC1B,EAAa0B,UAAU9S,KAAKgoB,EAAOD,U,CAG3C,GAAIpe,KAAKyH,aAAayB,UAAW,CAC7BzB,EAAayB,UAAY,GACzB,IAAK,MAAMmV,KAAUre,KAAKyH,aAAayB,UACnCzB,EAAayB,UAAU7S,KAAKgoB,EAAOD,U,CAI3CH,EAAoBxW,aAAeA,CACvC,CAQOiP,aAAa+F,EAAiBvkB,GACjC,MAAMuP,EAAegV,EAAWhV,aAChCA,EAAa3Q,WAAa2Q,EAAa3Q,WAAWkZ,KAAKuL,GAAiB,eAAiBA,KACzF9T,EAAawB,YAAcxB,EAAawB,YAAY+G,KAAKuL,GAAiB,cAAkBA,KAC5F9T,EAAa2B,UAAY3B,EAAa2B,UAAU4G,KAAKuL,GAAiB,cAAkBA,KACxF9T,EAAayB,UAAYzB,EAAayB,UAAU8G,KAAKuL,GAAiB,cAAkBA,KACxF9T,EAAa0B,UAAY1B,EAAa0B,UAAU6G,KAAKuL,GAAiB,cAAkBA,KAExF,MAAM9S,EAAW,IAAIiU,EAAaD,EAAWxkB,KAAMC,GAGnD,OAFAuQ,EAAShB,aAAeA,EAEjBgB,CACX,E,iQChRG,MAAM6V,EAAc,CACvBtmB,UAAS,KACT2Y,eAAc,KACd4N,aAAY,KACZ7X,WAAU,KACVsE,gBAAe,KACfwT,aAAY,KACZ3f,eAAc,KACdiU,YAAW,KACXqB,gBAAe,KACfsK,iBAAgB,KAChBC,YAAW,KACXC,kBAAiB,KACjBC,aAAY,KACZC,mBAAkB,KAClB1T,YAAW,IACX+G,iBAAgB,KAChBlG,YAAW,KACX8S,aAAY,KACZC,kBAAiB,KACjBC,0BAAyB,IACzB7R,cAAa,KACbY,eAAc,KACduG,WAAU,IACV3F,iBAAgB,KAChB9H,eAAc,IACdyB,eAAc,IACdpI,YAAW,IACX3D,cAAa,K,0HCxCjB,MAAM0iB,UAAuB,KACzB1f,YACI2f,EAEOhoB,GAEPgnB,MAAMgB,EAAS7nB,EAAG6nB,EAAS5nB,GAFpB,KAAAJ,MAAAA,CAGX,EAMJ,MAAMioB,EAAN,cACI,KAAAC,SAAW,IAAIvoB,KAwCnB,CAtCIuZ,IAAIiP,GACA,MAAM3c,EAAS,IAAI7L,MAOnB,OANAwoB,EAAe7C,SAAS/F,IACpB,MAAM6I,EAAW,IAAIL,EAAexI,EAAOzW,KAAKof,SAAS3kB,QACzDiI,EAAOrM,KAAKipB,GACZtf,KAAKof,SAAS/oB,KAAKipB,EAAS,IAGzB5c,CACX,CAEA6c,gBACI,MAAMC,EAAO,IAAI,KAAQxf,KAAKof,SAAS,GAAG/nB,EAAG2I,KAAKof,SAAS,GAAG9nB,GACxDmoB,EAAO,IAAI,KAAQzf,KAAKof,SAAS,GAAG/nB,EAAG2I,KAAKof,SAAS,GAAG9nB,GAkB9D,OAhBA0I,KAAKof,SAAS5C,SAAS/F,IAEfA,EAAMpf,EAAImoB,EAAKnoB,EACfmoB,EAAKnoB,EAAIof,EAAMpf,EACRof,EAAMpf,EAAIooB,EAAKpoB,IACtBooB,EAAKpoB,EAAIof,EAAMpf,GAIfof,EAAMnf,EAAIkoB,EAAKloB,EACfkoB,EAAKloB,EAAImf,EAAMnf,EACRmf,EAAMnf,EAAImoB,EAAKnoB,IACtBmoB,EAAKnoB,EAAImf,EAAMnf,E,IAIhB,CACHyQ,IAAKyX,EACL1mB,IAAK2mB,EACLtqB,MAAOsqB,EAAKpoB,EAAImoB,EAAKnoB,EACrBhC,OAAQoqB,EAAKnoB,EAAIkoB,EAAKloB,EAE9B,EAOG,MAAMooB,EASThJ,iBAAiBiJ,EAAcC,EAAcC,EAAcC,GACvD,MAAO,CAAC,IAAI,KAAQH,EAAMC,GAAO,IAAI,KAAQC,EAAMD,GAAO,IAAI,KAAQC,EAAMC,GAAO,IAAI,KAAQH,EAAMG,GACzG,CAUApJ,cAAc/d,EAAgBqb,EAAa,EAAGC,EAAa,EAAG8L,EAAwB,IAClF,MAAMrd,EAAS,IAAI7L,MAEnB,IAAIuG,EAAQ,EACZ,MAAM4iB,EAAuB,EAAVnnB,KAAKS,GAAUymB,EAElC,IAAK,IAAI1jB,EAAI,EAAGA,EAAI0jB,EAAe1jB,IAC/BqG,EAAOrM,KAAK,IAAI,KAAQ2d,EAAKnb,KAAKuB,IAAIgD,GAASzE,EAAQsb,EAAKpb,KAAKyB,IAAI8C,GAASzE,IAC9EyE,GAAS4iB,EAGb,OAAOtd,CACX,CAOAgU,aAAauJ,GACT,MAAMC,EAASD,EACVE,MAAM,eACNnQ,IAAIoQ,YACJC,QAAQjd,IAASkd,MAAMld,KAC5B,IAAI/G,EACJ,MAAMqG,EAAS,GACf,IAAKrG,EAAI,EAAGA,GAAqB,WAAhB6jB,EAAOzlB,QAAsB4B,GAAK,EAC/CqG,EAAOrM,KAAK,IAAI,KAAQ6pB,EAAO7jB,GAAI6jB,EAAO7jB,EAAI,KAElD,OAAOqG,CACX,CAQAgU,kBAAkBrf,EAAWC,GACzB,OAAO,gBAAiBD,EAAGC,EAC/B,EAOG,MAAMipB,EA6BThhB,YAAYtH,EAAcuV,EAAmCtV,EAAekV,EAAkBC,QAK1F,IAAImT,EAjCA,KAAAC,QAAU,IAAItB,EACd,KAAAuB,eAAiB,IAAIvB,EACrB,KAAAwB,OAAS,IAAI9pB,MAKb,KAAA+pB,SAAqB,IAAI/pB,MACzB,KAAAgqB,QAAoB,IAAIhqB,MAqB5BmJ,KAAK8gB,UAAY1T,EACjBpN,KAAK+gB,MAAQ9oB,EACb+H,KAAKghB,OAAS9oB,GAAS,qBAInBsoB,EADAhT,aAAoB,KACHA,EAAUyT,YAEPzT,EAGxBxN,KAAKkhB,aAAaV,GAElBxgB,KAAKygB,QAAQrQ,IAAIoQ,GACjBxgB,KAAK0gB,eAAetQ,IAAIoQ,QAEM,IAAnBxgB,KAAK8gB,WACZ,SAAY,uDAEpB,CAtCQI,aAAaV,GACjB,IAAK,MAAMhV,KAAKgV,EACZxgB,KAAK4gB,SAASvqB,KAAKmV,EAAEnU,EAAGmU,EAAElU,EAElC,CAyCAwW,QAAQL,GACJzN,KAAKygB,QAAQrQ,IAAI3C,GACjB,MAAM0T,EAAa,IAAIhC,EAOvB,OANAgC,EAAW/Q,IAAI3C,GACfzN,KAAK2gB,OAAOtqB,KAAK8qB,GAEjBnhB,KAAK6gB,QAAQxqB,KAAK2J,KAAK4gB,SAASnmB,OAAS,GACzCuF,KAAKkhB,aAAazT,GAEXzN,IACX,CASAkH,MAAM5O,GAAqB,EAAOhD,EAAgB,EAAGiY,EAA6B,GAC9E,MAAM7K,EAAS,IAAI,KAAK1C,KAAK+gB,MAAO/gB,KAAKghB,QAEnClpB,EAAakI,KAAKohB,gBAAgB9rB,EAAOiY,GAO/C,OALA7K,EAAO0a,gBAAgB,iBAAqCtlB,EAAW5C,UAAWoD,GAClFoK,EAAO0a,gBAAgB,eAAmCtlB,EAAW9C,QAASsD,GAC9EoK,EAAO0a,gBAAgB,WAA+BtlB,EAAW7C,IAAKqD,GACtEoK,EAAO2U,WAAqBvf,EAAW/C,SAEhC2N,CACX,CAQA0e,gBAAgB9rB,EAAgB,EAAGiY,EAA6B,GAC5D,MAAM7K,EAAS,IAAI,IAEb1N,EAAU,IAAI6B,MACd3B,EAAY,IAAI2B,MAChB5B,EAAM,IAAI4B,MAEVwqB,EAASrhB,KAAKygB,QAAQlB,gBAC5Bvf,KAAKygB,QAAQrB,SAAS5C,SAAShR,IAC3BxW,EAAQqB,KAAK,EAAG,EAAK,GACrBnB,EAAUmB,KAAKmV,EAAEnU,EAAG,EAAGmU,EAAElU,GACzBrC,EAAIoB,MAAMmV,EAAEnU,EAAIgqB,EAAOtZ,IAAI1Q,GAAKgqB,EAAOlsB,OAAQqW,EAAElU,EAAI+pB,EAAOtZ,IAAIzQ,GAAK+pB,EAAOhsB,OAAO,IAGvF,MAAMN,EAAU,IAAI8B,MAEdyqB,EAAMthB,KAAK8gB,UAAU9gB,KAAK4gB,SAAU5gB,KAAK6gB,QAAS,GAExD,IAAK,IAAIxkB,EAAI,EAAGA,EAAIilB,EAAI7mB,OAAQ4B,IAC5BtH,EAAQsB,KAAKirB,EAAIjlB,IAGrB,GAAI/G,EAAQ,EAAG,CACX,MAAMisB,EAAiBrsB,EAAUuF,OAAS,EAE1CuF,KAAKygB,QAAQrB,SAAS5C,SAAShR,IAE3BxW,EAAQqB,KAAK,GAAI,EAAK,GACtBnB,EAAUmB,KAAKmV,EAAEnU,GAAI/B,EAAOkW,EAAElU,GAC9BrC,EAAIoB,KAAK,GAAKmV,EAAEnU,EAAIgqB,EAAOtZ,IAAI1Q,GAAKgqB,EAAOlsB,MAAO,GAAKqW,EAAElU,EAAI+pB,EAAOtZ,IAAIzQ,GAAK+pB,EAAOhsB,OAAO,IAG/F,MAAMmsB,EAAazsB,EAAQ0F,OAC3B,IAAK,IAAI4B,EAAI,EAAGA,EAAImlB,EAAYnlB,GAAK,EAAG,CACpC,MAAM+B,EAAKrJ,EAAQsH,EAAI,GACjBb,EAAKzG,EAAQsH,EAAI,GACjBZ,EAAK1G,EAAQsH,EAAI,GAEvBtH,EAAQsB,KAAKoF,EAAK8lB,GAClBxsB,EAAQsB,KAAKmF,EAAK+lB,GAClBxsB,EAAQsB,KAAK+H,EAAKmjB,E,CAItBvhB,KAAKyhB,SAASvsB,EAAWF,EAASC,EAAKF,EAASssB,EAAQrhB,KAAK0gB,eAAgBprB,GAAO,EAAOiY,GAE3FvN,KAAK2gB,OAAOnE,SAAS/O,IACjBzN,KAAKyhB,SAASvsB,EAAWF,EAASC,EAAKF,EAASssB,EAAQ5T,EAAMnY,GAAO,EAAMiY,EAAmB,G,CAStG,OALA7K,EAAO3N,QAAUA,EACjB2N,EAAOxN,UAAYA,EACnBwN,EAAO1N,QAAUA,EACjB0N,EAAOzN,IAAMA,EAENyN,CACX,CAcQ+e,SAASvsB,EAAkBF,EAAgBC,EAAYF,EAAgBssB,EAAab,EAAuBlrB,EAAeosB,EAAenU,GAC7I,IAAIX,EAAqB1X,EAAUuF,OAAS,EACxCknB,EAAkB,EACtB,IAAK,IAAItlB,EAAY,EAAGA,EAAImkB,EAAOpB,SAAS3kB,OAAQ4B,IAAK,CACrD,MAAMmP,EAAoBgV,EAAOpB,SAAS/iB,GACpCuX,EAAqB4M,EAAOpB,UAAU/iB,EAAI,GAAKmkB,EAAOpB,SAAS3kB,QAErEvF,EAAUmB,KAAKmV,EAAEnU,EAAG,EAAGmU,EAAElU,GACzBpC,EAAUmB,KAAKmV,EAAEnU,GAAI/B,EAAOkW,EAAElU,GAC9BpC,EAAUmB,KAAKud,EAAGvc,EAAG,EAAGuc,EAAGtc,GAC3BpC,EAAUmB,KAAKud,EAAGvc,GAAI/B,EAAOse,EAAGtc,GAEhC,MAAMsqB,EAAqBpB,EAAOpB,UAAU/iB,EAAImkB,EAAOpB,SAAS3kB,OAAS,GAAK+lB,EAAOpB,SAAS3kB,QACxFoZ,EAAqB2M,EAAOpB,UAAU/iB,EAAI,GAAKmkB,EAAOpB,SAAS3kB,QAErE,IAAIonB,EAAK,IAAI,MAAUjO,EAAGtc,EAAIkU,EAAElU,GAAI,EAAGsc,EAAGvc,EAAImU,EAAEnU,GAC5CyqB,EAAK,IAAI,MAAUtW,EAAElU,EAAIsqB,EAAGtqB,GAAI,EAAGkU,EAAEnU,EAAIuqB,EAAGvqB,GAC5C0qB,EAAK,IAAI,MAAUlO,EAAGvc,EAAIsc,EAAGtc,GAAI,EAAGuc,EAAGxc,EAAIuc,EAAGvc,GAE7CqqB,IACDG,EAAKA,EAAG5lB,OAAO,GACf6lB,EAAKA,EAAG7lB,OAAO,GACf8lB,EAAKA,EAAG9lB,OAAO,IAGnB,MAAM+lB,EAAUH,EAAGI,iBACnB,IAAIC,EAAUJ,EAAGG,iBACbE,EAAUJ,EAAGE,iBAEjB,MAAMG,EAAO,QAAYF,EAASF,GAG1BE,EAFJE,EAAO7U,EACH6U,EAAO,KAAU,EACP,IAAI,IAAQ5W,EAAEnU,EAAG,EAAGmU,EAAElU,GAAGkD,SAAS,IAAI,IAAQoZ,EAAGvc,EAAG,EAAGuc,EAAGtc,IAAIiE,YAG9DumB,EAAG1R,IAAIyR,GAAItmB,YAGfymB,EAGd,MAAMK,EAAO,QAAYN,EAAIF,GAIrBM,EAHJE,EAAO9U,EACH8U,EAAO,KAAU,EAEP,IAAI,IAAQzO,EAAGvc,EAAG,EAAGuc,EAAGtc,GAAGkD,SAAS,IAAI,IAAQgR,EAAEnU,EAAG,EAAGmU,EAAElU,IAAIiE,YAG9DwmB,EAAG3R,IAAIyR,GAAItmB,YAGfymB,EAGd/sB,EAAIoB,KAAKsrB,EAAUN,EAAOlsB,MAAO,GACjCF,EAAIoB,KAAKsrB,EAAUN,EAAOlsB,MAAO,GACjCwsB,GAAWE,EAAGpnB,SACdxF,EAAIoB,KAAKsrB,EAAUN,EAAOlsB,MAAO,GACjCF,EAAIoB,KAAKsrB,EAAUN,EAAOlsB,MAAO,GAEjCH,EAAQqB,KAAK6rB,EAAQ7qB,EAAG6qB,EAAQ5qB,EAAG4qB,EAAQ/qB,GAC3CnC,EAAQqB,KAAK6rB,EAAQ7qB,EAAG6qB,EAAQ5qB,EAAG4qB,EAAQ/qB,GAC3CnC,EAAQqB,KAAK8rB,EAAQ9qB,EAAG8qB,EAAQ7qB,EAAG6qB,EAAQhrB,GAC3CnC,EAAQqB,KAAK8rB,EAAQ9qB,EAAG8qB,EAAQ7qB,EAAG6qB,EAAQhrB,GAEtCuqB,GASD3sB,EAAQsB,KAAKuW,GACb7X,EAAQsB,KAAKuW,EAAa,GAC1B7X,EAAQsB,KAAKuW,EAAa,GAE1B7X,EAAQsB,KAAKuW,EAAa,GAC1B7X,EAAQsB,KAAKuW,EAAa,GAC1B7X,EAAQsB,KAAKuW,EAAa,KAd1B7X,EAAQsB,KAAKuW,GACb7X,EAAQsB,KAAKuW,EAAa,GAC1B7X,EAAQsB,KAAKuW,EAAa,GAE1B7X,EAAQsB,KAAKuW,EAAa,GAC1B7X,EAAQsB,KAAKuW,EAAa,GAC1B7X,EAAQsB,KAAKuW,EAAa,IAU9BA,GAAc,C,CAEtB,E","sources":["webpack://pro-racer/../lts/core/generated/Meshes/Builders/boxBuilder.ts","webpack://pro-racer/../lts/core/generated/Meshes/Builders/capsuleBuilder.ts","webpack://pro-racer/../lts/core/generated/Meshes/Builders/cylinderBuilder.ts","webpack://pro-racer/../lts/core/generated/Meshes/Builders/decalBuilder.ts","webpack://pro-racer/../lts/core/generated/Meshes/Builders/discBuilder.ts","webpack://pro-racer/../lts/core/generated/Meshes/Builders/geodesicBuilder.ts","webpack://pro-racer/../lts/core/generated/Meshes/Builders/goldbergBuilder.ts","webpack://pro-racer/../lts/core/generated/Meshes/Builders/icoSphereBuilder.ts","webpack://pro-racer/../lts/core/generated/Meshes/Builders/latheBuilder.ts","webpack://pro-racer/../lts/core/generated/Meshes/Builders/planeBuilder.ts","webpack://pro-racer/../lts/core/generated/Meshes/Builders/polygonBuilder.ts","webpack://pro-racer/../lts/core/generated/Meshes/Builders/polyhedronBuilder.ts","webpack://pro-racer/../lts/core/generated/Meshes/Builders/tiledBoxBuilder.ts","webpack://pro-racer/../lts/core/generated/Meshes/Builders/tiledPlaneBuilder.ts","webpack://pro-racer/../lts/core/generated/Meshes/Builders/torusBuilder.ts","webpack://pro-racer/../lts/core/generated/Meshes/Builders/torusKnotBuilder.ts","webpack://pro-racer/../lts/core/generated/Meshes/Builders/tubeBuilder.ts","webpack://pro-racer/../lts/core/generated/Maths/math.isovector.ts","webpack://pro-racer/../lts/core/generated/Meshes/geodesicMesh.ts","webpack://pro-racer/../lts/core/generated/Meshes/goldbergMesh.ts","webpack://pro-racer/../lts/core/generated/Meshes/meshBuilder.ts","webpack://pro-racer/../lts/core/generated/Meshes/polygonMesh.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from \"../../Maths/math.color\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData for a box\r\n * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n * * size sets the width, height and depth of the box to the value of size, optional default 1\r\n * * width sets the width (x direction) of the box, overwrites the width set by size, optional, default size\r\n * * height sets the height (y direction) of the box, overwrites the height set by size, optional, default size\r\n * * depth sets the depth (z direction) of the box, overwrites the depth set by size, optional, default size\r\n * * faceUV an array of 6 Vector4 elements used to set different images to each box side\r\n * * faceColors an array of 6 Color3 elements used to set different colors to each box side\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.size\r\n * @param options.width\r\n * @param options.height\r\n * @param options.depth\r\n * @param options.faceUV\r\n * @param options.faceColors\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.wrap\r\n * @param options.topBaseAt\r\n * @param options.bottomBaseAt\r\n * @returns the VertexData of the box\r\n */\r\nexport function CreateBoxVertexData(options: {\r\n    size?: number;\r\n    width?: number;\r\n    height?: number;\r\n    depth?: number;\r\n    faceUV?: Vector4[];\r\n    faceColors?: Color4[];\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n    wrap?: boolean;\r\n    topBaseAt?: number;\r\n    bottomBaseAt?: number;\r\n}): VertexData {\r\n    const nbFaces = 6;\r\n    let indices = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23];\r\n    const normals = [\r\n        0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0,\r\n        1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,\r\n    ];\r\n    const uvs = [];\r\n    let positions = [];\r\n    const width = options.width || options.size || 1;\r\n    const height = options.height || options.size || 1;\r\n    const depth = options.depth || options.size || 1;\r\n    const wrap = options.wrap || false;\r\n    let topBaseAt = options.topBaseAt === void 0 ? 1 : options.topBaseAt;\r\n    let bottomBaseAt = options.bottomBaseAt === void 0 ? 0 : options.bottomBaseAt;\r\n    topBaseAt = (topBaseAt + 4) % 4; // places values as 0 to 3\r\n    bottomBaseAt = (bottomBaseAt + 4) % 4; // places values as 0 to 3\r\n    const topOrder = [2, 0, 3, 1];\r\n    const bottomOrder = [2, 0, 1, 3];\r\n    let topIndex = topOrder[topBaseAt];\r\n    let bottomIndex = bottomOrder[bottomBaseAt];\r\n    let basePositions = [\r\n        1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1,\r\n        1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1,\r\n    ];\r\n    if (wrap) {\r\n        indices = [2, 3, 0, 2, 0, 1, 4, 5, 6, 4, 6, 7, 9, 10, 11, 9, 11, 8, 12, 14, 15, 12, 13, 14];\r\n        basePositions = [\r\n            -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1,\r\n        ];\r\n        let topFaceBase: any = [\r\n            [1, 1, 1],\r\n            [-1, 1, 1],\r\n            [-1, 1, -1],\r\n            [1, 1, -1],\r\n        ];\r\n        let bottomFaceBase: any = [\r\n            [-1, -1, 1],\r\n            [1, -1, 1],\r\n            [1, -1, -1],\r\n            [-1, -1, -1],\r\n        ];\r\n        const topFaceOrder: any = [17, 18, 19, 16];\r\n        const bottomFaceOrder: any = [22, 23, 20, 21];\r\n        while (topIndex > 0) {\r\n            topFaceBase.unshift(topFaceBase.pop());\r\n            topFaceOrder.unshift(topFaceOrder.pop());\r\n            topIndex--;\r\n        }\r\n        while (bottomIndex > 0) {\r\n            bottomFaceBase.unshift(bottomFaceBase.pop());\r\n            bottomFaceOrder.unshift(bottomFaceOrder.pop());\r\n            bottomIndex--;\r\n        }\r\n        topFaceBase = topFaceBase.flat();\r\n        bottomFaceBase = bottomFaceBase.flat();\r\n        basePositions = basePositions.concat(topFaceBase).concat(bottomFaceBase);\r\n        indices.push(topFaceOrder[0], topFaceOrder[2], topFaceOrder[3], topFaceOrder[0], topFaceOrder[1], topFaceOrder[2]);\r\n        indices.push(bottomFaceOrder[0], bottomFaceOrder[2], bottomFaceOrder[3], bottomFaceOrder[0], bottomFaceOrder[1], bottomFaceOrder[2]);\r\n    }\r\n    const scaleArray = [width / 2, height / 2, depth / 2];\r\n    positions = basePositions.reduce((accumulator: Array<number>, currentValue, currentIndex) => accumulator.concat(currentValue * scaleArray[currentIndex % 3]), []);\r\n\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    const faceUV: Vector4[] = options.faceUV || new Array<Vector4>(6);\r\n    const faceColors = options.faceColors;\r\n    const colors = [];\r\n\r\n    // default face colors and UV if undefined\r\n    for (let f = 0; f < 6; f++) {\r\n        if (faceUV[f] === undefined) {\r\n            faceUV[f] = new Vector4(0, 0, 1, 1);\r\n        }\r\n        if (faceColors && faceColors[f] === undefined) {\r\n            faceColors[f] = new Color4(1, 1, 1, 1);\r\n        }\r\n    }\r\n\r\n    // Create each face in turn.\r\n    for (let index = 0; index < nbFaces; index++) {\r\n        uvs.push(faceUV[index].z, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[index].w : faceUV[index].w);\r\n        uvs.push(faceUV[index].x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[index].w : faceUV[index].w);\r\n        uvs.push(faceUV[index].x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[index].y : faceUV[index].y);\r\n        uvs.push(faceUV[index].z, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[index].y : faceUV[index].y);\r\n        if (faceColors) {\r\n            for (let c = 0; c < 4; c++) {\r\n                colors.push(faceColors[index].r, faceColors[index].g, faceColors[index].b, faceColors[index].a);\r\n            }\r\n        }\r\n    }\r\n\r\n    // sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    if (faceColors) {\r\n        const totalColors = sideOrientation === VertexData.DOUBLESIDE ? colors.concat(colors) : colors;\r\n        vertexData.colors = totalColors;\r\n    }\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a box mesh\r\n * * The parameter `size` sets the size (float) of each box side (default 1)\r\n * * You can set some different box dimensions by using the parameters `width`, `height` and `depth` (all by default have the same value of `size`)\r\n * * You can set different colors and different images to each box side by using the parameters `faceColors` (an array of 6 Color3 elements) and `faceUV` (an array of 6 Vector4 elements)\r\n * * Please read this tutorial : https://doc.babylonjs.com/how_to/createbox_per_face_textures_and_colors\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @see https://doc.babylonjs.com/how_to/set_shapes#box\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.size\r\n * @param options.width\r\n * @param options.height\r\n * @param options.depth\r\n * @param options.faceUV\r\n * @param options.faceColors\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.wrap\r\n * @param options.topBaseAt\r\n * @param options.bottomBaseAt\r\n * @param options.updatable\r\n * @param scene defines the hosting scene\r\n * @returns the box mesh\r\n */\r\nexport function CreateBox(\r\n    name: string,\r\n    options: {\r\n        size?: number;\r\n        width?: number;\r\n        height?: number;\r\n        depth?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        wrap?: boolean;\r\n        topBaseAt?: number;\r\n        bottomBaseAt?: number;\r\n        updatable?: boolean;\r\n    } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const box = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    box._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateBoxVertexData(options);\r\n\r\n    vertexData.applyToMesh(box, options.updatable);\r\n\r\n    return box;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated please use CreateBox directly\r\n */\r\nexport const BoxBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateBox,\r\n};\r\n\r\n// Side effects\r\nVertexData.CreateBox = CreateBoxVertexData;\r\n\r\n(Mesh as any).CreateBox = (name: string, size: number, scene: Nullable<Scene> = null, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        size,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreateBox(name, options, scene);\r\n};\r\n","import { VertexData } from \"../mesh.vertexData\";\r\nimport { Vector2, Vector3, Matrix } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n/**\r\n * Scripts based off of https://github.com/maximeq/three-js-capsule-geometry/blob/master/src/CapsuleBufferGeometry.js\r\n * @param options the constructors options used to shape the mesh.\r\n * @returns the capsule VertexData\r\n * @see https://doc.babylonjs.com/divingDeeper/mesh/creation/set/capsule\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function CreateCapsuleVertexData(\r\n    options: ICreateCapsuleOptions = {\r\n        subdivisions: 2,\r\n        tessellation: 16,\r\n        height: 1,\r\n        radius: 0.25,\r\n        capSubdivisions: 6,\r\n    }\r\n): VertexData {\r\n    const subdivisions = Math.max(options.subdivisions ? options.subdivisions : 2, 1);\r\n    const tessellation = Math.max(options.tessellation ? options.tessellation : 16, 3);\r\n    const height = Math.max(options.height ? options.height : 1, 0);\r\n    const radius = Math.max(options.radius ? options.radius : 0.25, 0);\r\n    const capDetail = Math.max(options.capSubdivisions ? options.capSubdivisions : 6, 1);\r\n\r\n    const radialSegments = tessellation;\r\n    const heightSegments = subdivisions;\r\n\r\n    const radiusTop = Math.max(options.radiusTop ? options.radiusTop : radius, 0);\r\n    const radiusBottom = Math.max(options.radiusBottom ? options.radiusBottom : radius, 0);\r\n\r\n    const heightMinusCaps = height - (radiusTop + radiusBottom);\r\n\r\n    const thetaStart = 0.0;\r\n    const thetaLength = 2.0 * Math.PI;\r\n\r\n    const capsTopSegments = Math.max(options.topCapSubdivisions ? options.topCapSubdivisions : capDetail, 1);\r\n    const capsBottomSegments = Math.max(options.bottomCapSubdivisions ? options.bottomCapSubdivisions : capDetail, 1);\r\n\r\n    const alpha = Math.acos((radiusBottom - radiusTop) / height);\r\n\r\n    let indices = [];\r\n    const vertices = [];\r\n    const normals = [];\r\n    const uvs = [];\r\n\r\n    let index = 0;\r\n    const indexArray = [],\r\n        halfHeight = heightMinusCaps * 0.5;\r\n    const pi2 = Math.PI * 0.5;\r\n\r\n    let x, y;\r\n    const normal = Vector3.Zero();\r\n    const vertex = Vector3.Zero();\r\n\r\n    const cosAlpha = Math.cos(alpha);\r\n    const sinAlpha = Math.sin(alpha);\r\n\r\n    const coneLength = new Vector2(radiusTop * sinAlpha, halfHeight + radiusTop * cosAlpha)\r\n        .subtract(new Vector2(radiusBottom * sinAlpha, -halfHeight + radiusBottom * cosAlpha))\r\n        .length();\r\n\r\n    // Total length for v texture coord\r\n    const vl = radiusTop * alpha + coneLength + radiusBottom * (pi2 - alpha);\r\n\r\n    let v = 0;\r\n    for (y = 0; y <= capsTopSegments; y++) {\r\n        const indexRow = [];\r\n\r\n        const a = pi2 - alpha * (y / capsTopSegments);\r\n\r\n        v += (radiusTop * alpha) / capsTopSegments;\r\n\r\n        const cosA = Math.cos(a);\r\n        const sinA = Math.sin(a);\r\n\r\n        // calculate the radius of the current row\r\n        const _radius = cosA * radiusTop;\r\n\r\n        for (x = 0; x <= radialSegments; x++) {\r\n            const u = x / radialSegments;\r\n            const theta = u * thetaLength + thetaStart;\r\n            const sinTheta = Math.sin(theta);\r\n            const cosTheta = Math.cos(theta);\r\n            // vertex\r\n            vertex.x = _radius * sinTheta;\r\n            vertex.y = halfHeight + sinA * radiusTop;\r\n            vertex.z = _radius * cosTheta;\r\n            vertices.push(vertex.x, vertex.y, vertex.z);\r\n            // normal\r\n            normal.set(cosA * sinTheta, sinA, cosA * cosTheta);\r\n            normals.push(normal.x, normal.y, normal.z);\r\n            // uv\r\n            uvs.push(u, CompatibilityOptions.UseOpenGLOrientationForUV ? v / vl : 1 - v / vl);\r\n            // save index of vertex in respective row\r\n            indexRow.push(index);\r\n            // increase index\r\n            index++;\r\n        }\r\n        // now save vertices of the row in our index array\r\n        indexArray.push(indexRow);\r\n    }\r\n\r\n    const coneHeight = height - radiusTop - radiusBottom + cosAlpha * radiusTop - cosAlpha * radiusBottom;\r\n    const slope = (sinAlpha * (radiusBottom - radiusTop)) / coneHeight;\r\n\r\n    for (y = 1; y <= heightSegments; y++) {\r\n        const indexRow = [];\r\n        v += coneLength / heightSegments;\r\n        // calculate the radius of the current row\r\n        const _radius = sinAlpha * ((y * (radiusBottom - radiusTop)) / heightSegments + radiusTop);\r\n        for (x = 0; x <= radialSegments; x++) {\r\n            const u = x / radialSegments;\r\n            const theta = u * thetaLength + thetaStart;\r\n            const sinTheta = Math.sin(theta);\r\n            const cosTheta = Math.cos(theta);\r\n            // vertex\r\n            vertex.x = _radius * sinTheta;\r\n            vertex.y = halfHeight + cosAlpha * radiusTop - (y * coneHeight) / heightSegments;\r\n            vertex.z = _radius * cosTheta;\r\n            vertices.push(vertex.x, vertex.y, vertex.z);\r\n            // normal\r\n            normal.set(sinTheta, slope, cosTheta).normalize();\r\n            normals.push(normal.x, normal.y, normal.z);\r\n            // uv\r\n            uvs.push(u, CompatibilityOptions.UseOpenGLOrientationForUV ? v / vl : 1 - v / vl);\r\n            // save index of vertex in respective row\r\n            indexRow.push(index);\r\n            // increase index\r\n            index++;\r\n        }\r\n        // now save vertices of the row in our index array\r\n        indexArray.push(indexRow);\r\n    }\r\n\r\n    for (y = 1; y <= capsBottomSegments; y++) {\r\n        const indexRow = [];\r\n        const a = pi2 - alpha - (Math.PI - alpha) * (y / capsBottomSegments);\r\n        v += (radiusBottom * alpha) / capsBottomSegments;\r\n        const cosA = Math.cos(a);\r\n        const sinA = Math.sin(a);\r\n        // calculate the radius of the current row\r\n        const _radius = cosA * radiusBottom;\r\n        for (x = 0; x <= radialSegments; x++) {\r\n            const u = x / radialSegments;\r\n            const theta = u * thetaLength + thetaStart;\r\n            const sinTheta = Math.sin(theta);\r\n            const cosTheta = Math.cos(theta);\r\n            // vertex\r\n            vertex.x = _radius * sinTheta;\r\n            vertex.y = -halfHeight + sinA * radiusBottom;\r\n            vertex.z = _radius * cosTheta;\r\n            vertices.push(vertex.x, vertex.y, vertex.z);\r\n            // normal\r\n            normal.set(cosA * sinTheta, sinA, cosA * cosTheta);\r\n            normals.push(normal.x, normal.y, normal.z);\r\n            // uv\r\n            uvs.push(u, CompatibilityOptions.UseOpenGLOrientationForUV ? v / vl : 1 - v / vl);\r\n            // save index of vertex in respective row\r\n            indexRow.push(index);\r\n            // increase index\r\n            index++;\r\n        }\r\n        // now save vertices of the row in our index array\r\n        indexArray.push(indexRow);\r\n    }\r\n    // generate indices\r\n    for (x = 0; x < radialSegments; x++) {\r\n        for (y = 0; y < capsTopSegments + heightSegments + capsBottomSegments; y++) {\r\n            // we use the index array to access the correct indices\r\n            const i1 = indexArray[y][x];\r\n            const i2 = indexArray[y + 1][x];\r\n            const i3 = indexArray[y + 1][x + 1];\r\n            const i4 = indexArray[y][x + 1];\r\n            // face one\r\n            indices.push(i1);\r\n            indices.push(i2);\r\n            indices.push(i4);\r\n            // face two\r\n            indices.push(i2);\r\n            indices.push(i3);\r\n            indices.push(i4);\r\n        }\r\n    }\r\n\r\n    indices = indices.reverse();\r\n\r\n    if (options.orientation && !options.orientation.equals(Vector3.Up())) {\r\n        const m = new Matrix();\r\n        options.orientation\r\n            .clone()\r\n            .scale(Math.PI * 0.5)\r\n            .cross(Vector3.Up())\r\n            .toQuaternion()\r\n            .toRotationMatrix(m);\r\n        const v = Vector3.Zero();\r\n        for (let i = 0; i < vertices.length; i += 3) {\r\n            v.set(vertices[i], vertices[i + 1], vertices[i + 2]);\r\n            Vector3.TransformCoordinatesToRef(v.clone(), m, v);\r\n            vertices[i] = v.x;\r\n            vertices[i + 1] = v.y;\r\n            vertices[i + 2] = v.z;\r\n        }\r\n    }\r\n\r\n    const vDat = new VertexData();\r\n    vDat.positions = vertices;\r\n    vDat.normals = normals;\r\n    vDat.uvs = uvs;\r\n    vDat.indices = indices;\r\n\r\n    return vDat;\r\n}\r\n\r\n/**\r\n * The options Interface for creating a Capsule Mesh\r\n */\r\nexport interface ICreateCapsuleOptions {\r\n    /** The Orientation of the capsule.  Default : Vector3.Up() */\r\n    orientation?: Vector3;\r\n\r\n    /** Number of sub segments on the tube section of the capsule running parallel to orientation. */\r\n    subdivisions?: number;\r\n\r\n    /** Number of cylindrical segments on the capsule. */\r\n    tessellation?: number;\r\n\r\n    /** Height or Length of the capsule. */\r\n    height?: number;\r\n\r\n    /** Radius of the capsule. */\r\n    radius?: number;\r\n\r\n    /** Number of sub segments on the cap sections of the capsule running parallel to orientation. */\r\n    capSubdivisions?: number;\r\n\r\n    /** Overwrite for the top radius. */\r\n    radiusTop?: number;\r\n\r\n    /** Overwrite for the bottom radius. */\r\n    radiusBottom?: number;\r\n\r\n    /** Overwrite for the top capSubdivisions. */\r\n    topCapSubdivisions?: number;\r\n\r\n    /** Overwrite for the bottom capSubdivisions. */\r\n    bottomCapSubdivisions?: number;\r\n\r\n    /** Internal geometry is supposed to change once created. */\r\n    updatable?: boolean;\r\n}\r\n\r\n/**\r\n * Creates a capsule or a pill mesh\r\n * @param name defines the name of the mesh\r\n * @param options The constructors options.\r\n * @param scene The scene the mesh is scoped to.\r\n * @returns Capsule Mesh\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function CreateCapsule(\r\n    name: string,\r\n    options: ICreateCapsuleOptions = {\r\n        orientation: Vector3.Up(),\r\n        subdivisions: 2,\r\n        tessellation: 16,\r\n        height: 1,\r\n        radius: 0.25,\r\n        capSubdivisions: 6,\r\n        updatable: false,\r\n    },\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const capsule = new Mesh(name, scene);\r\n    const vertexData = CreateCapsuleVertexData(options);\r\n    vertexData.applyToMesh(capsule, options.updatable);\r\n    return capsule;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated please use CreateCapsule directly\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport const CapsuleBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateCapsule,\r\n};\r\n\r\n/**\r\n * Creates a capsule or a pill mesh\r\n * @param name defines the name of the mesh.\r\n * @param options the constructors options used to shape the mesh.\r\n * @param scene defines the scene the mesh is scoped to.\r\n * @returns the capsule mesh\r\n * @see https://doc.babylonjs.com/how_to/capsule_shape\r\n */\r\n(Mesh as any).CreateCapsule = (name: string, options: ICreateCapsuleOptions, scene?: Nullable<Scene>): Mesh => {\r\n    return CreateCapsule(name, options, scene);\r\n};\r\n\r\nVertexData.CreateCapsule = CreateCapsuleVertexData;\r\n","import { Vector4, Vector3, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from \"../../Maths/math.color\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { Scene } from \"../../scene\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Axis } from \"../../Maths/math.axis\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData for a cylinder, cone or prism\r\n * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n * * height sets the height (y direction) of the cylinder, optional, default 2\r\n * * diameterTop sets the diameter of the top of the cone, overwrites diameter,  optional, default diameter\r\n * * diameterBottom sets the diameter of the bottom of the cone, overwrites diameter,  optional, default diameter\r\n * * diameter sets the diameter of the top and bottom of the cone, optional default 1\r\n * * tessellation the number of prism sides, 3 for a triangular prism, optional, default 24\r\n * * subdivisions` the number of rings along the cylinder height, optional, default 1\r\n * * arc a number from 0 to 1, to create an unclosed cylinder based on the fraction of the circumference given by the arc value, optional, default 1\r\n * * faceColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n * * faceUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n * * hasRings when true makes each subdivision independently treated as a face for faceUV and faceColors, optional, default false\r\n * * enclose when true closes an open cylinder by adding extra flat faces between the height axis and vertical edges, think cut cake\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.height\r\n * @param options.diameterTop\r\n * @param options.diameterBottom\r\n * @param options.diameter\r\n * @param options.tessellation\r\n * @param options.subdivisions\r\n * @param options.arc\r\n * @param options.faceColors\r\n * @param options.faceUV\r\n * @param options.hasRings\r\n * @param options.enclose\r\n * @param options.cap\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @returns the VertexData of the cylinder, cone or prism\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function CreateCylinderVertexData(options: {\r\n    height?: number;\r\n    diameterTop?: number;\r\n    diameterBottom?: number;\r\n    diameter?: number;\r\n    tessellation?: number;\r\n    subdivisions?: number;\r\n    arc?: number;\r\n    faceColors?: Color4[];\r\n    faceUV?: Vector4[];\r\n    hasRings?: boolean;\r\n    enclose?: boolean;\r\n    cap?: number;\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n}): VertexData {\r\n    const height: number = options.height || 2;\r\n    let diameterTop: number = options.diameterTop === 0 ? 0 : options.diameterTop || options.diameter || 1;\r\n    let diameterBottom: number = options.diameterBottom === 0 ? 0 : options.diameterBottom || options.diameter || 1;\r\n    diameterTop = diameterTop || 0.00001; // Prevent broken normals\r\n    diameterBottom = diameterBottom || 0.00001; // Prevent broken normals\r\n    const tessellation: number = options.tessellation || 24;\r\n    const subdivisions: number = options.subdivisions || 1;\r\n    const hasRings: boolean = options.hasRings ? true : false;\r\n    const enclose: boolean = options.enclose ? true : false;\r\n    const cap = options.cap === 0 ? 0 : options.cap || Mesh.CAP_ALL;\r\n    const arc: number = options.arc && (options.arc <= 0 || options.arc > 1) ? 1.0 : options.arc || 1.0;\r\n    const sideOrientation: number = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n    const faceUV: Vector4[] = options.faceUV || new Array<Vector4>(3);\r\n    const faceColors = options.faceColors;\r\n    // default face colors and UV if undefined\r\n    const quadNb: number = arc !== 1 && enclose ? 2 : 0;\r\n    const ringNb: number = hasRings ? subdivisions : 1;\r\n    const surfaceNb: number = 2 + (1 + quadNb) * ringNb;\r\n    let f: number;\r\n\r\n    for (f = 0; f < surfaceNb; f++) {\r\n        if (faceColors && faceColors[f] === undefined) {\r\n            faceColors[f] = new Color4(1, 1, 1, 1);\r\n        }\r\n    }\r\n    for (f = 0; f < surfaceNb; f++) {\r\n        if (faceUV && faceUV[f] === undefined) {\r\n            faceUV[f] = new Vector4(0, 0, 1, 1);\r\n        }\r\n    }\r\n\r\n    const indices = new Array<number>();\r\n    const positions = new Array<number>();\r\n    const normals = new Array<number>();\r\n    const uvs = new Array<number>();\r\n    const colors = new Array<number>();\r\n\r\n    const angleStep = (Math.PI * 2 * arc) / tessellation;\r\n    let angle: number;\r\n    let h: number;\r\n    let radius: number;\r\n    const tan = (diameterBottom - diameterTop) / 2 / height;\r\n    const ringVertex: Vector3 = Vector3.Zero();\r\n    const ringNormal: Vector3 = Vector3.Zero();\r\n    const ringFirstVertex: Vector3 = Vector3.Zero();\r\n    const ringFirstNormal: Vector3 = Vector3.Zero();\r\n    const quadNormal: Vector3 = Vector3.Zero();\r\n    const Y: Vector3 = Axis.Y;\r\n\r\n    // positions, normals, uvs\r\n    let i: number;\r\n    let j: number;\r\n    let r: number;\r\n    let ringIdx: number = 1;\r\n    let s: number = 1; // surface index\r\n    let cs: number = 0;\r\n    let v: number = 0;\r\n\r\n    for (i = 0; i <= subdivisions; i++) {\r\n        h = i / subdivisions;\r\n        radius = (h * (diameterTop - diameterBottom) + diameterBottom) / 2;\r\n        ringIdx = hasRings && i !== 0 && i !== subdivisions ? 2 : 1;\r\n        for (r = 0; r < ringIdx; r++) {\r\n            if (hasRings) {\r\n                s += r;\r\n            }\r\n            if (enclose) {\r\n                s += 2 * r;\r\n            }\r\n            for (j = 0; j <= tessellation; j++) {\r\n                angle = j * angleStep;\r\n\r\n                // position\r\n                ringVertex.x = Math.cos(-angle) * radius;\r\n                ringVertex.y = -height / 2 + h * height;\r\n                ringVertex.z = Math.sin(-angle) * radius;\r\n\r\n                // normal\r\n                if (diameterTop === 0 && i === subdivisions) {\r\n                    // if no top cap, reuse former normals\r\n                    ringNormal.x = normals[normals.length - (tessellation + 1) * 3];\r\n                    ringNormal.y = normals[normals.length - (tessellation + 1) * 3 + 1];\r\n                    ringNormal.z = normals[normals.length - (tessellation + 1) * 3 + 2];\r\n                } else {\r\n                    ringNormal.x = ringVertex.x;\r\n                    ringNormal.z = ringVertex.z;\r\n                    ringNormal.y = Math.sqrt(ringNormal.x * ringNormal.x + ringNormal.z * ringNormal.z) * tan;\r\n                    ringNormal.normalize();\r\n                }\r\n\r\n                // keep first ring vertex values for enclose\r\n                if (j === 0) {\r\n                    ringFirstVertex.copyFrom(ringVertex);\r\n                    ringFirstNormal.copyFrom(ringNormal);\r\n                }\r\n\r\n                positions.push(ringVertex.x, ringVertex.y, ringVertex.z);\r\n                normals.push(ringNormal.x, ringNormal.y, ringNormal.z);\r\n                if (hasRings) {\r\n                    v = cs !== s ? faceUV[s].y : faceUV[s].w;\r\n                } else {\r\n                    v = faceUV[s].y + (faceUV[s].w - faceUV[s].y) * h;\r\n                }\r\n                uvs.push(faceUV[s].x + ((faceUV[s].z - faceUV[s].x) * j) / tessellation, CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - v : v);\r\n                if (faceColors) {\r\n                    colors.push(faceColors[s].r, faceColors[s].g, faceColors[s].b, faceColors[s].a);\r\n                }\r\n            }\r\n\r\n            // if enclose, add four vertices and their dedicated normals\r\n            if (arc !== 1 && enclose) {\r\n                positions.push(ringVertex.x, ringVertex.y, ringVertex.z);\r\n                positions.push(0, ringVertex.y, 0);\r\n                positions.push(0, ringVertex.y, 0);\r\n                positions.push(ringFirstVertex.x, ringFirstVertex.y, ringFirstVertex.z);\r\n                Vector3.CrossToRef(Y, ringNormal, quadNormal);\r\n                quadNormal.normalize();\r\n                normals.push(quadNormal.x, quadNormal.y, quadNormal.z, quadNormal.x, quadNormal.y, quadNormal.z);\r\n                Vector3.CrossToRef(ringFirstNormal, Y, quadNormal);\r\n                quadNormal.normalize();\r\n                normals.push(quadNormal.x, quadNormal.y, quadNormal.z, quadNormal.x, quadNormal.y, quadNormal.z);\r\n                if (hasRings) {\r\n                    v = cs !== s ? faceUV[s + 1].y : faceUV[s + 1].w;\r\n                } else {\r\n                    v = faceUV[s + 1].y + (faceUV[s + 1].w - faceUV[s + 1].y) * h;\r\n                }\r\n                uvs.push(faceUV[s + 1].x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - v : v);\r\n                uvs.push(faceUV[s + 1].z, CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - v : v);\r\n                if (hasRings) {\r\n                    v = cs !== s ? faceUV[s + 2].y : faceUV[s + 2].w;\r\n                } else {\r\n                    v = faceUV[s + 2].y + (faceUV[s + 2].w - faceUV[s + 2].y) * h;\r\n                }\r\n                uvs.push(faceUV[s + 2].x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - v : v);\r\n                uvs.push(faceUV[s + 2].z, CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - v : v);\r\n                if (faceColors) {\r\n                    colors.push(faceColors[s + 1].r, faceColors[s + 1].g, faceColors[s + 1].b, faceColors[s + 1].a);\r\n                    colors.push(faceColors[s + 1].r, faceColors[s + 1].g, faceColors[s + 1].b, faceColors[s + 1].a);\r\n                    colors.push(faceColors[s + 2].r, faceColors[s + 2].g, faceColors[s + 2].b, faceColors[s + 2].a);\r\n                    colors.push(faceColors[s + 2].r, faceColors[s + 2].g, faceColors[s + 2].b, faceColors[s + 2].a);\r\n                }\r\n            }\r\n            if (cs !== s) {\r\n                cs = s;\r\n            }\r\n        }\r\n    }\r\n\r\n    // indices\r\n    const e: number = arc !== 1 && enclose ? tessellation + 4 : tessellation; // correction of number of iteration if enclose\r\n    i = 0;\r\n    for (s = 0; s < subdivisions; s++) {\r\n        let i0: number = 0;\r\n        let i1: number = 0;\r\n        let i2: number = 0;\r\n        let i3: number = 0;\r\n        for (j = 0; j < tessellation; j++) {\r\n            i0 = i * (e + 1) + j;\r\n            i1 = (i + 1) * (e + 1) + j;\r\n            i2 = i * (e + 1) + (j + 1);\r\n            i3 = (i + 1) * (e + 1) + (j + 1);\r\n            indices.push(i0, i1, i2);\r\n            indices.push(i3, i2, i1);\r\n        }\r\n        if (arc !== 1 && enclose) {\r\n            // if enclose, add two quads\r\n            indices.push(i0 + 2, i1 + 2, i2 + 2);\r\n            indices.push(i3 + 2, i2 + 2, i1 + 2);\r\n            indices.push(i0 + 4, i1 + 4, i2 + 4);\r\n            indices.push(i3 + 4, i2 + 4, i1 + 4);\r\n        }\r\n        i = hasRings ? i + 2 : i + 1;\r\n    }\r\n\r\n    // Caps\r\n    const createCylinderCap = (isTop: boolean) => {\r\n        const radius = isTop ? diameterTop / 2 : diameterBottom / 2;\r\n        if (radius === 0) {\r\n            return;\r\n        }\r\n\r\n        // Cap positions, normals & uvs\r\n        let angle;\r\n        let circleVector;\r\n        let i: number;\r\n        const u: Vector4 = isTop ? faceUV[surfaceNb - 1] : faceUV[0];\r\n        let c: Nullable<Color4> = null;\r\n        if (faceColors) {\r\n            c = isTop ? faceColors[surfaceNb - 1] : faceColors[0];\r\n        }\r\n        // cap center\r\n        const vbase = positions.length / 3;\r\n        const offset = isTop ? height / 2 : -height / 2;\r\n        const center = new Vector3(0, offset, 0);\r\n        positions.push(center.x, center.y, center.z);\r\n        normals.push(0, isTop ? 1 : -1, 0);\r\n        const v = u.y + (u.w - u.y) * 0.5;\r\n        uvs.push(u.x + (u.z - u.x) * 0.5, CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - v : v);\r\n        if (c) {\r\n            colors.push(c.r, c.g, c.b, c.a);\r\n        }\r\n\r\n        const textureScale = new Vector2(0.5, 0.5);\r\n        for (i = 0; i <= tessellation; i++) {\r\n            angle = (Math.PI * 2 * i * arc) / tessellation;\r\n            const cos = Math.cos(-angle);\r\n            const sin = Math.sin(-angle);\r\n            circleVector = new Vector3(cos * radius, offset, sin * radius);\r\n            const textureCoordinate = new Vector2(cos * textureScale.x + 0.5, sin * textureScale.y + 0.5);\r\n            positions.push(circleVector.x, circleVector.y, circleVector.z);\r\n            normals.push(0, isTop ? 1 : -1, 0);\r\n            const v = u.y + (u.w - u.y) * textureCoordinate.y;\r\n            uvs.push(u.x + (u.z - u.x) * textureCoordinate.x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - v : v);\r\n            if (c) {\r\n                colors.push(c.r, c.g, c.b, c.a);\r\n            }\r\n        }\r\n        // Cap indices\r\n        for (i = 0; i < tessellation; i++) {\r\n            if (!isTop) {\r\n                indices.push(vbase);\r\n                indices.push(vbase + (i + 1));\r\n                indices.push(vbase + (i + 2));\r\n            } else {\r\n                indices.push(vbase);\r\n                indices.push(vbase + (i + 2));\r\n                indices.push(vbase + (i + 1));\r\n            }\r\n        }\r\n    };\r\n\r\n    // add caps to geometry based on cap parameter\r\n    if (cap === Mesh.CAP_START || cap === Mesh.CAP_ALL) {\r\n        createCylinderCap(false);\r\n    }\r\n    if (cap === Mesh.CAP_END || cap === Mesh.CAP_ALL) {\r\n        createCylinderCap(true);\r\n    }\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n    if (faceColors) {\r\n        vertexData.colors = colors;\r\n    }\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a cylinder or a cone mesh\r\n * * The parameter `height` sets the height size (float) of the cylinder/cone (float, default 2).\r\n * * The parameter `diameter` sets the diameter of the top and bottom cap at once (float, default 1).\r\n * * The parameters `diameterTop` and `diameterBottom` overwrite the parameter `diameter` and set respectively the top cap and bottom cap diameter (floats, default 1). The parameter \"diameterBottom\" can't be zero.\r\n * * The parameter `tessellation` sets the number of cylinder sides (positive integer, default 24). Set it to 3 to get a prism for instance.\r\n * * The parameter `subdivisions` sets the number of rings along the cylinder height (positive integer, default 1).\r\n * * The parameter `hasRings` (boolean, default false) makes the subdivisions independent from each other, so they become different faces.\r\n * * The parameter `enclose`  (boolean, default false) adds two extra faces per subdivision to a sliced cylinder to close it around its height axis.\r\n * * The parameter `cap` sets the way the cylinder is capped. Possible values : BABYLON.Mesh.NO_CAP, BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL (default).\r\n * * The parameter `arc` (float, default 1) is the ratio (max 1) to apply to the circumference to slice the cylinder.\r\n * * You can set different colors and different images to each box side by using the parameters `faceColors` (an array of n Color3 elements) and `faceUV` (an array of n Vector4 elements).\r\n * * The value of n is the number of cylinder faces. If the cylinder has only 1 subdivisions, n equals : top face + cylinder surface + bottom face = 3\r\n * * Now, if the cylinder has 5 independent subdivisions (hasRings = true), n equals : top face + 5 stripe surfaces + bottom face = 2 + 5 = 7\r\n * * Finally, if the cylinder has 5 independent subdivisions and is enclose, n equals : top face + 5 x (stripe surface + 2 closing faces) + bottom face = 2 + 5 * 3 = 17\r\n * * Each array (color or UVs) is always ordered the same way : the first element is the bottom cap, the last element is the top cap. The other elements are each a ring surface.\r\n * * If `enclose` is false, a ring surface is one element.\r\n * * If `enclose` is true, a ring surface is 3 successive elements in the array : the tubular surface, then the two closing faces.\r\n * * Example how to set colors and textures on a sliced cylinder : https://www.html5gamedevs.com/topic/17945-creating-a-closed-slice-of-a-cylinder/#comment-106379\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.height\r\n * @param options.diameterTop\r\n * @param options.diameterBottom\r\n * @param options.diameter\r\n * @param options.tessellation\r\n * @param options.subdivisions\r\n * @param options.arc\r\n * @param options.faceColors\r\n * @param options.faceUV\r\n * @param options.updatable\r\n * @param options.hasRings\r\n * @param options.enclose\r\n * @param options.cap\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param scene defines the hosting scene\r\n * @returns the cylinder mesh\r\n * @see https://doc.babylonjs.com/how_to/set_shapes#cylinder-or-cone\r\n */\r\nexport function CreateCylinder(\r\n    name: string,\r\n    options: {\r\n        height?: number;\r\n        diameterTop?: number;\r\n        diameterBottom?: number;\r\n        diameter?: number;\r\n        tessellation?: number;\r\n        subdivisions?: number;\r\n        arc?: number;\r\n        faceColors?: Color4[];\r\n        faceUV?: Vector4[];\r\n        updatable?: boolean;\r\n        hasRings?: boolean;\r\n        enclose?: boolean;\r\n        cap?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    } = {},\r\n    scene?: Nullable<Scene>\r\n): Mesh {\r\n    const cylinder = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    cylinder._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateCylinderVertexData(options);\r\n\r\n    vertexData.applyToMesh(cylinder, options.updatable);\r\n\r\n    return cylinder;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated Please use CreateCylinder directly\r\n */\r\nexport const CylinderBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateCylinder,\r\n};\r\n\r\nVertexData.CreateCylinder = CreateCylinderVertexData;\r\n\r\n(Mesh as any).CreateCylinder = (\r\n    name: string,\r\n    height: number,\r\n    diameterTop: number,\r\n    diameterBottom: number,\r\n    tessellation: number,\r\n    subdivisions: any,\r\n    scene?: Scene,\r\n    updatable?: any,\r\n    sideOrientation?: number\r\n): Mesh => {\r\n    if (scene === undefined || !(scene instanceof Scene)) {\r\n        if (scene !== undefined) {\r\n            sideOrientation = updatable || Mesh.DEFAULTSIDE;\r\n            updatable = scene;\r\n        }\r\n        scene = <Scene>subdivisions;\r\n        subdivisions = 1;\r\n    }\r\n\r\n    const options = {\r\n        height,\r\n        diameterTop,\r\n        diameterBottom,\r\n        tessellation,\r\n        subdivisions,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreateCylinder(name, options, scene);\r\n};\r\n","import type { Nullable, IndicesArray, FloatArray } from \"../../types\";\r\nimport { Vector3, Matrix, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Scalar } from \"../../Maths/math.scalar\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { AbstractMesh } from \"../abstractMesh\";\r\nimport type { Camera } from \"../../Cameras/camera\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\nconst xpAxis = new Vector3(1, 0, 0);\r\nconst xnAxis = new Vector3(-1, 0, 0);\r\nconst ypAxis = new Vector3(0, 1, 0);\r\nconst ynAxis = new Vector3(0, -1, 0);\r\nconst zpAxis = new Vector3(0, 0, 1);\r\nconst znAxis = new Vector3(0, 0, -1);\r\n\r\n/** @internal */\r\nclass DecalVertex {\r\n    constructor(\r\n        public position: Vector3 = Vector3.Zero(),\r\n        public normal: Vector3 = Vector3.Up(),\r\n        public uv: Vector2 = Vector2.Zero(),\r\n        public vertexIdx: number = 0,\r\n        public vertexIdxForBones: number = 0,\r\n        public localPositionOverride: Nullable<number[]> = null,\r\n        public localNormalOverride: Nullable<number[]> = null,\r\n        public matrixIndicesOverride: Nullable<number[]> = null,\r\n        public matrixWeightsOverride: Nullable<number[]> = null\r\n    ) {}\r\n    public clone(): DecalVertex {\r\n        return new DecalVertex(\r\n            this.position.clone(),\r\n            this.normal.clone(),\r\n            this.uv.clone(),\r\n            this.vertexIdx,\r\n            this.vertexIdxForBones,\r\n            this.localPositionOverride?.slice(),\r\n            this.localNormalOverride?.slice(),\r\n            this.matrixIndicesOverride?.slice(),\r\n            this.matrixWeightsOverride?.slice()\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a decal mesh.\r\n * A decal is a mesh usually applied as a model onto the surface of another mesh. So don't forget the parameter `sourceMesh` depicting the decal\r\n * * The parameter `position` (Vector3, default `(0, 0, 0)`) sets the position of the decal in World coordinates\r\n * * The parameter `normal` (Vector3, default `Vector3.Up`) sets the normal of the mesh where the decal is applied onto in World coordinates\r\n * * The parameter `size` (Vector3, default `(1, 1, 1)`) sets the decal scaling\r\n * * The parameter `angle` (float in radian, default 0) sets the angle to rotate the decal\r\n * * The parameter `captureUVS` defines if we need to capture the uvs or compute them\r\n * * The parameter `cullBackFaces` defines if the back faces should be removed from the decal mesh\r\n * * The parameter `localMode` defines that the computations should be done with the local mesh coordinates instead of the world space coordinates.\r\n * *    Use this mode if you want the decal to be parented to the sourceMesh and move/rotate with it.\r\n * Note: Meshes with morph targets are not supported!\r\n * @param name defines the name of the mesh\r\n * @param sourceMesh defines the mesh where the decal must be applied\r\n * @param options defines the options used to create the mesh\r\n * @param options.position\r\n * @param options.normal\r\n * @param options.size\r\n * @param options.angle\r\n * @param options.captureUVS\r\n * @param options.cullBackFaces\r\n * @param options.localMode\r\n * @returns the decal mesh\r\n * @see https://doc.babylonjs.com/how_to/decals\r\n */\r\nexport function CreateDecal(\r\n    name: string,\r\n    sourceMesh: AbstractMesh,\r\n    options: { position?: Vector3; normal?: Vector3; size?: Vector3; angle?: number; captureUVS?: boolean; cullBackFaces?: boolean; localMode?: boolean }\r\n): Mesh {\r\n    const hasSkeleton = !!sourceMesh.skeleton;\r\n    const useLocalComputation = options.localMode || hasSkeleton;\r\n    const meshHasOverridenMaterial = (sourceMesh as Mesh).overrideMaterialSideOrientation !== null && (sourceMesh as Mesh).overrideMaterialSideOrientation !== undefined;\r\n\r\n    const indices = <IndicesArray>sourceMesh.getIndices();\r\n    const positions = hasSkeleton ? sourceMesh.getPositionData(true, true) : sourceMesh.getVerticesData(VertexBuffer.PositionKind);\r\n    const normals = hasSkeleton ? sourceMesh.getNormalsData(true, true) : sourceMesh.getVerticesData(VertexBuffer.NormalKind);\r\n    const localPositions = useLocalComputation ? (hasSkeleton ? sourceMesh.getVerticesData(VertexBuffer.PositionKind) : positions) : null;\r\n    const localNormals = useLocalComputation ? (hasSkeleton ? sourceMesh.getVerticesData(VertexBuffer.NormalKind) : normals) : null;\r\n    const uvs = sourceMesh.getVerticesData(VertexBuffer.UVKind);\r\n    const matIndices = hasSkeleton ? sourceMesh.getVerticesData(VertexBuffer.MatricesIndicesKind) : null;\r\n    const matWeights = hasSkeleton ? sourceMesh.getVerticesData(VertexBuffer.MatricesWeightsKind) : null;\r\n    const matIndicesExtra = hasSkeleton ? sourceMesh.getVerticesData(VertexBuffer.MatricesIndicesExtraKind) : null;\r\n    const matWeightsExtra = hasSkeleton ? sourceMesh.getVerticesData(VertexBuffer.MatricesWeightsExtraKind) : null;\r\n\r\n    const position = options.position || Vector3.Zero();\r\n    let normal = options.normal || Vector3.Up();\r\n    const size = options.size || Vector3.One();\r\n    const angle = options.angle || 0;\r\n\r\n    // Getting correct rotation\r\n    if (!normal) {\r\n        const target = new Vector3(0, 0, 1);\r\n        const camera = <Camera>sourceMesh.getScene().activeCamera;\r\n        const cameraWorldTarget = Vector3.TransformCoordinates(target, camera.getWorldMatrix());\r\n\r\n        normal = camera.globalPosition.subtract(cameraWorldTarget);\r\n    }\r\n\r\n    const yaw = -Math.atan2(normal.z, normal.x) - Math.PI / 2;\r\n    const len = Math.sqrt(normal.x * normal.x + normal.z * normal.z);\r\n    const pitch = Math.atan2(normal.y, len);\r\n\r\n    // Matrix\r\n    const decalWorldMatrix = Matrix.RotationYawPitchRoll(yaw, pitch, angle).multiply(Matrix.Translation(position.x, position.y, position.z));\r\n    const inverseDecalWorldMatrix = Matrix.Invert(decalWorldMatrix);\r\n    const meshWorldMatrix = sourceMesh.getWorldMatrix();\r\n    const transformMatrix = meshWorldMatrix.multiply(inverseDecalWorldMatrix);\r\n\r\n    const vertexData = new VertexData();\r\n    vertexData.indices = [];\r\n    vertexData.positions = [];\r\n    vertexData.normals = [];\r\n    vertexData.uvs = [];\r\n    vertexData.matricesIndices = hasSkeleton ? [] : null;\r\n    vertexData.matricesWeights = hasSkeleton ? [] : null;\r\n    vertexData.matricesIndicesExtra = matIndicesExtra ? [] : null;\r\n    vertexData.matricesWeightsExtra = matWeightsExtra ? [] : null;\r\n\r\n    let currentVertexDataIndex = 0;\r\n\r\n    const extractDecalVector3 = (indexId: number): DecalVertex => {\r\n        const result = new DecalVertex();\r\n        if (!indices || !positions || !normals) {\r\n            return result;\r\n        }\r\n\r\n        const vertexId = indices[indexId];\r\n\r\n        result.vertexIdx = vertexId * 3;\r\n        result.vertexIdxForBones = vertexId * 4;\r\n\r\n        // Send vector to decal local world\r\n        result.position = new Vector3(positions[vertexId * 3], positions[vertexId * 3 + 1], positions[vertexId * 3 + 2]);\r\n        Vector3.TransformCoordinatesToRef(result.position, transformMatrix, result.position);\r\n\r\n        // Get normal\r\n        result.normal = new Vector3(normals[vertexId * 3], normals[vertexId * 3 + 1], normals[vertexId * 3 + 2]);\r\n        Vector3.TransformNormalToRef(result.normal, transformMatrix, result.normal);\r\n\r\n        if (options.captureUVS && uvs) {\r\n            const v = uvs[vertexId * 2 + 1];\r\n            result.uv = new Vector2(uvs[vertexId * 2], CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - v : v);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    const emptyArray = [0, 0, 0, 0];\r\n\r\n    // Inspired by https://github.com/mrdoob/three.js/blob/eee231960882f6f3b6113405f524956145148146/examples/js/geometries/DecalGeometry.js\r\n    const clip = (vertices: DecalVertex[], axis: Vector3): Nullable<DecalVertex[]> => {\r\n        if (vertices.length === 0) {\r\n            return vertices;\r\n        }\r\n\r\n        const clipSize = 0.5 * Math.abs(Vector3.Dot(size, axis));\r\n\r\n        const indexOf = (arr: FloatArray | number[], val: number, start: number, num: number) => {\r\n            for (let i = 0; i < num; ++i) {\r\n                if (arr[start + i] === val) {\r\n                    return start + i;\r\n                }\r\n            }\r\n            return -1;\r\n        };\r\n\r\n        const clipVertices = (v0: DecalVertex, v1: DecalVertex): DecalVertex => {\r\n            const clipFactor = Vector3.GetClipFactor(v0.position, v1.position, axis, clipSize);\r\n\r\n            let indices = emptyArray;\r\n            let weights = emptyArray;\r\n\r\n            if (matIndices && matWeights) {\r\n                const mat0Index = v0.matrixIndicesOverride ? 0 : v0.vertexIdxForBones;\r\n                const v0Indices = v0.matrixIndicesOverride ?? matIndices;\r\n                const v0Weights = v0.matrixWeightsOverride ?? matWeights;\r\n\r\n                const mat1Index = v1.matrixIndicesOverride ? 0 : v1.vertexIdxForBones;\r\n                const v1Indices = v1.matrixIndicesOverride ?? matIndices;\r\n                const v1Weights = v1.matrixWeightsOverride ?? matWeights;\r\n\r\n                indices = [0, 0, 0, 0];\r\n                weights = [0, 0, 0, 0];\r\n\r\n                let index = 0;\r\n                for (let i = 0; i < 4; ++i) {\r\n                    if (v0Weights[mat0Index + i] > 0) {\r\n                        const idx = indexOf(v1Indices, v0Indices[mat0Index + i], mat1Index, 4);\r\n                        indices[index] = v0Indices[mat0Index + i];\r\n                        weights[index] = Scalar.Lerp(v0Weights[mat0Index + i], idx >= 0 ? v1Weights[idx] : 0, clipFactor);\r\n                        index++;\r\n                    }\r\n                }\r\n\r\n                for (let i = 0; i < 4 && index < 4; ++i) {\r\n                    const ind = v1Indices[mat1Index + i];\r\n                    if (indexOf(v0Indices, ind, mat0Index, 4) !== -1) continue;\r\n\r\n                    indices[index] = ind;\r\n                    weights[index] = Scalar.Lerp(0, v1Weights[mat1Index + i], clipFactor);\r\n                    index++;\r\n                }\r\n\r\n                const sumw = weights[0] + weights[1] + weights[2] + weights[3];\r\n\r\n                weights[0] /= sumw;\r\n                weights[1] /= sumw;\r\n                weights[2] /= sumw;\r\n                weights[3] /= sumw;\r\n            }\r\n\r\n            const v0LocalPositionX = v0.localPositionOverride ? v0.localPositionOverride[0] : localPositions?.[v0.vertexIdx] ?? 0;\r\n            const v0LocalPositionY = v0.localPositionOverride ? v0.localPositionOverride[1] : localPositions?.[v0.vertexIdx + 1] ?? 0;\r\n            const v0LocalPositionZ = v0.localPositionOverride ? v0.localPositionOverride[2] : localPositions?.[v0.vertexIdx + 2] ?? 0;\r\n\r\n            const v1LocalPositionX = v1.localPositionOverride ? v1.localPositionOverride[0] : localPositions?.[v1.vertexIdx] ?? 0;\r\n            const v1LocalPositionY = v1.localPositionOverride ? v1.localPositionOverride[1] : localPositions?.[v1.vertexIdx + 1] ?? 0;\r\n            const v1LocalPositionZ = v1.localPositionOverride ? v1.localPositionOverride[2] : localPositions?.[v1.vertexIdx + 2] ?? 0;\r\n\r\n            const v0LocalNormalX = v0.localNormalOverride ? v0.localNormalOverride[0] : localNormals?.[v0.vertexIdx] ?? 0;\r\n            const v0LocalNormalY = v0.localNormalOverride ? v0.localNormalOverride[1] : localNormals?.[v0.vertexIdx + 1] ?? 0;\r\n            const v0LocalNormalZ = v0.localNormalOverride ? v0.localNormalOverride[2] : localNormals?.[v0.vertexIdx + 2] ?? 0;\r\n\r\n            const v1LocalNormalX = v1.localNormalOverride ? v1.localNormalOverride[0] : localNormals?.[v1.vertexIdx] ?? 0;\r\n            const v1LocalNormalY = v1.localNormalOverride ? v1.localNormalOverride[1] : localNormals?.[v1.vertexIdx + 1] ?? 0;\r\n            const v1LocalNormalZ = v1.localNormalOverride ? v1.localNormalOverride[2] : localNormals?.[v1.vertexIdx + 2] ?? 0;\r\n\r\n            const interpNormalX = v0LocalNormalX + (v1LocalNormalX - v0LocalNormalX) * clipFactor;\r\n            const interpNormalY = v0LocalNormalY + (v1LocalNormalY - v0LocalNormalY) * clipFactor;\r\n            const interpNormalZ = v0LocalNormalZ + (v1LocalNormalZ - v0LocalNormalZ) * clipFactor;\r\n\r\n            const norm = Math.sqrt(interpNormalX * interpNormalX + interpNormalY * interpNormalY + interpNormalZ * interpNormalZ);\r\n\r\n            return new DecalVertex(\r\n                Vector3.Lerp(v0.position, v1.position, clipFactor),\r\n                Vector3.Lerp(v0.normal, v1.normal, clipFactor).normalize(),\r\n                Vector2.Lerp(v0.uv, v1.uv, clipFactor),\r\n                -1,\r\n                -1,\r\n                localPositions\r\n                    ? [\r\n                          v0LocalPositionX + (v1LocalPositionX - v0LocalPositionX) * clipFactor,\r\n                          v0LocalPositionY + (v1LocalPositionY - v0LocalPositionY) * clipFactor,\r\n                          v0LocalPositionZ + (v1LocalPositionZ - v0LocalPositionZ) * clipFactor,\r\n                      ]\r\n                    : null,\r\n                localNormals ? [interpNormalX / norm, interpNormalY / norm, interpNormalZ / norm] : null,\r\n                indices,\r\n                weights\r\n            );\r\n        };\r\n\r\n        let clipResult: Nullable<DecalVertex[]> = null;\r\n\r\n        if (vertices.length > 3) {\r\n            clipResult = new Array<DecalVertex>();\r\n        }\r\n\r\n        for (let index = 0; index < vertices.length; index += 3) {\r\n            let total = 0;\r\n            let nV1: Nullable<DecalVertex> = null;\r\n            let nV2: Nullable<DecalVertex> = null;\r\n            let nV3: Nullable<DecalVertex> = null;\r\n            let nV4: Nullable<DecalVertex> = null;\r\n\r\n            const d1 = Vector3.Dot(vertices[index].position, axis) - clipSize;\r\n            const d2 = Vector3.Dot(vertices[index + 1].position, axis) - clipSize;\r\n            const d3 = Vector3.Dot(vertices[index + 2].position, axis) - clipSize;\r\n\r\n            const v1Out = d1 > 0;\r\n            const v2Out = d2 > 0;\r\n            const v3Out = d3 > 0;\r\n\r\n            total = (v1Out ? 1 : 0) + (v2Out ? 1 : 0) + (v3Out ? 1 : 0);\r\n\r\n            switch (total) {\r\n                case 0:\r\n                    if (vertices.length > 3) {\r\n                        clipResult!.push(vertices[index]);\r\n                        clipResult!.push(vertices[index + 1]);\r\n                        clipResult!.push(vertices[index + 2]);\r\n                    } else {\r\n                        clipResult = vertices;\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    clipResult = clipResult ?? new Array<DecalVertex>();\r\n                    if (v1Out) {\r\n                        nV1 = vertices[index + 1];\r\n                        nV2 = vertices[index + 2];\r\n                        nV3 = clipVertices(vertices[index], nV1);\r\n                        nV4 = clipVertices(vertices[index], nV2);\r\n                    }\r\n\r\n                    if (v2Out) {\r\n                        nV1 = vertices[index];\r\n                        nV2 = vertices[index + 2];\r\n                        nV3 = clipVertices(vertices[index + 1], nV1);\r\n                        nV4 = clipVertices(vertices[index + 1], nV2);\r\n\r\n                        clipResult.push(nV3);\r\n                        clipResult.push(nV2.clone());\r\n                        clipResult.push(nV1.clone());\r\n\r\n                        clipResult.push(nV2.clone());\r\n                        clipResult.push(nV3.clone());\r\n                        clipResult.push(nV4);\r\n                        break;\r\n                    }\r\n                    if (v3Out) {\r\n                        nV1 = vertices[index];\r\n                        nV2 = vertices[index + 1];\r\n                        nV3 = clipVertices(vertices[index + 2], nV1);\r\n                        nV4 = clipVertices(vertices[index + 2], nV2);\r\n                    }\r\n\r\n                    if (nV1 && nV2 && nV3 && nV4) {\r\n                        clipResult.push(nV1.clone());\r\n                        clipResult.push(nV2.clone());\r\n                        clipResult.push(nV3);\r\n\r\n                        clipResult.push(nV4);\r\n                        clipResult.push(nV3.clone());\r\n                        clipResult.push(nV2.clone());\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    clipResult = clipResult ?? new Array<DecalVertex>();\r\n                    if (!v1Out) {\r\n                        nV1 = vertices[index].clone();\r\n                        nV2 = clipVertices(nV1, vertices[index + 1]);\r\n                        nV3 = clipVertices(nV1, vertices[index + 2]);\r\n                        clipResult.push(nV1);\r\n                        clipResult.push(nV2);\r\n                        clipResult.push(nV3);\r\n                    }\r\n                    if (!v2Out) {\r\n                        nV1 = vertices[index + 1].clone();\r\n                        nV2 = clipVertices(nV1, vertices[index + 2]);\r\n                        nV3 = clipVertices(nV1, vertices[index]);\r\n                        clipResult.push(nV1);\r\n                        clipResult.push(nV2);\r\n                        clipResult.push(nV3);\r\n                    }\r\n                    if (!v3Out) {\r\n                        nV1 = vertices[index + 2].clone();\r\n                        nV2 = clipVertices(nV1, vertices[index]);\r\n                        nV3 = clipVertices(nV1, vertices[index + 1]);\r\n                        clipResult.push(nV1);\r\n                        clipResult.push(nV2);\r\n                        clipResult.push(nV3);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return clipResult;\r\n    };\r\n\r\n    const oneFaceVertices = new Array<DecalVertex>(3);\r\n\r\n    for (let index = 0; index < indices.length; index += 3) {\r\n        let faceVertices: Nullable<DecalVertex[]> = oneFaceVertices;\r\n\r\n        faceVertices[0] = extractDecalVector3(index);\r\n        if (meshHasOverridenMaterial && useLocalComputation) {\r\n            faceVertices[1] = extractDecalVector3(index + 2);\r\n            faceVertices[2] = extractDecalVector3(index + 1);\r\n        } else {\r\n            faceVertices[1] = extractDecalVector3(index + 1);\r\n            faceVertices[2] = extractDecalVector3(index + 2);\r\n        }\r\n\r\n        if (options.cullBackFaces) {\r\n            // If all the normals of the vertices of the face are pointing away from the view direction we discard the face.\r\n            // As computations are done in the decal coordinate space, the viewDirection is (0,0,1), so when dot(vertexNormal, -viewDirection) <= 0 the vertex is culled\r\n            if (-faceVertices[0].normal.z <= 0 && -faceVertices[1].normal.z <= 0 && -faceVertices[2].normal.z <= 0) {\r\n                continue;\r\n            }\r\n        }\r\n\r\n        // Clip\r\n        faceVertices = clip(faceVertices, xpAxis);\r\n        if (!faceVertices) continue;\r\n        faceVertices = clip(faceVertices, xnAxis);\r\n        if (!faceVertices) continue;\r\n        faceVertices = clip(faceVertices, ypAxis);\r\n        if (!faceVertices) continue;\r\n        faceVertices = clip(faceVertices, ynAxis);\r\n        if (!faceVertices) continue;\r\n        faceVertices = clip(faceVertices, zpAxis);\r\n        if (!faceVertices) continue;\r\n        faceVertices = clip(faceVertices, znAxis);\r\n        if (!faceVertices) continue;\r\n\r\n        // Add UVs and get back to world\r\n        for (let vIndex = 0; vIndex < faceVertices.length; vIndex++) {\r\n            const vertex = faceVertices[vIndex];\r\n\r\n            //TODO check for Int32Array | Uint32Array | Uint16Array\r\n            (<number[]>vertexData.indices).push(currentVertexDataIndex);\r\n            if (useLocalComputation) {\r\n                if (vertex.localPositionOverride) {\r\n                    vertexData.positions[currentVertexDataIndex * 3] = vertex.localPositionOverride[0];\r\n                    vertexData.positions[currentVertexDataIndex * 3 + 1] = vertex.localPositionOverride[1];\r\n                    vertexData.positions[currentVertexDataIndex * 3 + 2] = vertex.localPositionOverride[2];\r\n                } else if (localPositions) {\r\n                    vertexData.positions[currentVertexDataIndex * 3] = localPositions[vertex.vertexIdx];\r\n                    vertexData.positions[currentVertexDataIndex * 3 + 1] = localPositions[vertex.vertexIdx + 1];\r\n                    vertexData.positions[currentVertexDataIndex * 3 + 2] = localPositions[vertex.vertexIdx + 2];\r\n                }\r\n                if (vertex.localNormalOverride) {\r\n                    vertexData.normals[currentVertexDataIndex * 3] = vertex.localNormalOverride[0];\r\n                    vertexData.normals[currentVertexDataIndex * 3 + 1] = vertex.localNormalOverride[1];\r\n                    vertexData.normals[currentVertexDataIndex * 3 + 2] = vertex.localNormalOverride[2];\r\n                } else if (localNormals) {\r\n                    vertexData.normals[currentVertexDataIndex * 3] = localNormals[vertex.vertexIdx];\r\n                    vertexData.normals[currentVertexDataIndex * 3 + 1] = localNormals[vertex.vertexIdx + 1];\r\n                    vertexData.normals[currentVertexDataIndex * 3 + 2] = localNormals[vertex.vertexIdx + 2];\r\n                }\r\n            } else {\r\n                vertex.position.toArray(vertexData.positions, currentVertexDataIndex * 3);\r\n                vertex.normal.toArray(vertexData.normals, currentVertexDataIndex * 3);\r\n            }\r\n            if (vertexData.matricesIndices && vertexData.matricesWeights) {\r\n                if (vertex.matrixIndicesOverride) {\r\n                    vertexData.matricesIndices[currentVertexDataIndex * 4] = vertex.matrixIndicesOverride[0];\r\n                    vertexData.matricesIndices[currentVertexDataIndex * 4 + 1] = vertex.matrixIndicesOverride[1];\r\n                    vertexData.matricesIndices[currentVertexDataIndex * 4 + 2] = vertex.matrixIndicesOverride[2];\r\n                    vertexData.matricesIndices[currentVertexDataIndex * 4 + 3] = vertex.matrixIndicesOverride[3];\r\n                } else {\r\n                    if (matIndices) {\r\n                        vertexData.matricesIndices[currentVertexDataIndex * 4] = matIndices[vertex.vertexIdxForBones];\r\n                        vertexData.matricesIndices[currentVertexDataIndex * 4 + 1] = matIndices[vertex.vertexIdxForBones + 1];\r\n                        vertexData.matricesIndices[currentVertexDataIndex * 4 + 2] = matIndices[vertex.vertexIdxForBones + 2];\r\n                        vertexData.matricesIndices[currentVertexDataIndex * 4 + 3] = matIndices[vertex.vertexIdxForBones + 3];\r\n                    }\r\n                    if (matIndicesExtra && vertexData.matricesIndicesExtra) {\r\n                        vertexData.matricesIndicesExtra[currentVertexDataIndex * 4] = matIndicesExtra[vertex.vertexIdxForBones];\r\n                        vertexData.matricesIndicesExtra[currentVertexDataIndex * 4 + 1] = matIndicesExtra[vertex.vertexIdxForBones + 1];\r\n                        vertexData.matricesIndicesExtra[currentVertexDataIndex * 4 + 2] = matIndicesExtra[vertex.vertexIdxForBones + 2];\r\n                        vertexData.matricesIndicesExtra[currentVertexDataIndex * 4 + 3] = matIndicesExtra[vertex.vertexIdxForBones + 3];\r\n                    }\r\n                }\r\n                if (vertex.matrixWeightsOverride) {\r\n                    vertexData.matricesWeights[currentVertexDataIndex * 4] = vertex.matrixWeightsOverride[0];\r\n                    vertexData.matricesWeights[currentVertexDataIndex * 4 + 1] = vertex.matrixWeightsOverride[1];\r\n                    vertexData.matricesWeights[currentVertexDataIndex * 4 + 2] = vertex.matrixWeightsOverride[2];\r\n                    vertexData.matricesWeights[currentVertexDataIndex * 4 + 3] = vertex.matrixWeightsOverride[3];\r\n                } else {\r\n                    if (matWeights) {\r\n                        vertexData.matricesWeights[currentVertexDataIndex * 4] = matWeights[vertex.vertexIdxForBones];\r\n                        vertexData.matricesWeights[currentVertexDataIndex * 4 + 1] = matWeights[vertex.vertexIdxForBones + 1];\r\n                        vertexData.matricesWeights[currentVertexDataIndex * 4 + 2] = matWeights[vertex.vertexIdxForBones + 2];\r\n                        vertexData.matricesWeights[currentVertexDataIndex * 4 + 3] = matWeights[vertex.vertexIdxForBones + 3];\r\n                    }\r\n                    if (matWeightsExtra && vertexData.matricesWeightsExtra) {\r\n                        vertexData.matricesWeightsExtra[currentVertexDataIndex * 4] = matWeightsExtra[vertex.vertexIdxForBones];\r\n                        vertexData.matricesWeightsExtra[currentVertexDataIndex * 4 + 1] = matWeightsExtra[vertex.vertexIdxForBones + 1];\r\n                        vertexData.matricesWeightsExtra[currentVertexDataIndex * 4 + 2] = matWeightsExtra[vertex.vertexIdxForBones + 2];\r\n                        vertexData.matricesWeightsExtra[currentVertexDataIndex * 4 + 3] = matWeightsExtra[vertex.vertexIdxForBones + 3];\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!options.captureUVS) {\r\n                (<number[]>vertexData.uvs).push(0.5 + vertex.position.x / size.x);\r\n                const v = 0.5 + vertex.position.y / size.y;\r\n                (<number[]>vertexData.uvs).push(CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - v : v);\r\n            } else {\r\n                vertex.uv.toArray(vertexData.uvs, currentVertexDataIndex * 2);\r\n            }\r\n            currentVertexDataIndex++;\r\n        }\r\n    }\r\n\r\n    // Return mesh\r\n    const decal = new Mesh(name, sourceMesh.getScene());\r\n    vertexData.applyToMesh(decal);\r\n\r\n    if (useLocalComputation) {\r\n        decal.skeleton = sourceMesh.skeleton;\r\n        decal.parent = sourceMesh;\r\n    } else {\r\n        decal.position = position.clone();\r\n        decal.rotation = new Vector3(pitch, yaw, angle);\r\n    }\r\n\r\n    decal.computeWorldMatrix(true);\r\n    decal.refreshBoundingInfo(true, true);\r\n\r\n    return decal;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the function directly from the module\r\n */\r\nexport const DecalBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateDecal,\r\n};\r\n\r\n(Mesh as any).CreateDecal = (name: string, sourceMesh: AbstractMesh, position: Vector3, normal: Vector3, size: Vector3, angle: number): Mesh => {\r\n    const options = {\r\n        position,\r\n        normal,\r\n        size,\r\n        angle,\r\n    };\r\n\r\n    return CreateDecal(name, sourceMesh, options);\r\n};\r\n","import type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData of the Disc or regular Polygon\r\n * @param options an object used to set the following optional parameters for the disc, required but can be empty\r\n * * radius the radius of the disc, optional default 0.5\r\n * * tessellation the number of polygon sides, optional, default 64\r\n * * arc a number from 0 to 1, to create an unclosed polygon based on the fraction of the circumference given by the arc value, optional, default 1\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.radius\r\n * @param options.tessellation\r\n * @param options.arc\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @returns the VertexData of the box\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function CreateDiscVertexData(options: {\r\n    radius?: number;\r\n    tessellation?: number;\r\n    arc?: number;\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n}): VertexData {\r\n    const positions = new Array<number>();\r\n    const indices = new Array<number>();\r\n    const normals = new Array<number>();\r\n    const uvs = new Array<number>();\r\n\r\n    const radius = options.radius || 0.5;\r\n    const tessellation = options.tessellation || 64;\r\n    const arc: number = options.arc && (options.arc <= 0 || options.arc > 1) ? 1.0 : options.arc || 1.0;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    // positions and uvs\r\n    positions.push(0, 0, 0); // disc center first\r\n    uvs.push(0.5, 0.5);\r\n\r\n    const theta = Math.PI * 2 * arc;\r\n    const step = arc === 1 ? theta / tessellation : theta / (tessellation - 1);\r\n    let a = 0;\r\n    for (let t = 0; t < tessellation; t++) {\r\n        const x = Math.cos(a);\r\n        const y = Math.sin(a);\r\n        const u = (x + 1) / 2;\r\n        const v = (1 - y) / 2;\r\n        positions.push(radius * x, radius * y, 0);\r\n        uvs.push(u, CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - v : v);\r\n        a += step;\r\n    }\r\n    if (arc === 1) {\r\n        positions.push(positions[3], positions[4], positions[5]); // close the circle\r\n        uvs.push(uvs[2], CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - uvs[3] : uvs[3]);\r\n    }\r\n\r\n    //indices\r\n    const vertexNb = positions.length / 3;\r\n    for (let i = 1; i < vertexNb - 1; i++) {\r\n        indices.push(i + 1, 0, i);\r\n    }\r\n\r\n    // result\r\n    VertexData.ComputeNormals(positions, indices, normals);\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a plane polygonal mesh.  By default, this is a disc\r\n * * The parameter `radius` sets the radius size (float) of the polygon (default 0.5)\r\n * * The parameter `tessellation` sets the number of polygon sides (positive integer, default 64). So a tessellation valued to 3 will build a triangle, to 4 a square, etc\r\n * * You can create an unclosed polygon with the parameter `arc` (positive float, default 1), valued between 0 and 1, what is the ratio of the circumference : 2 x PI x ratio\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.radius\r\n * @param options.tessellation\r\n * @param options.arc\r\n * @param options.updatable\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param scene defines the hosting scene\r\n * @returns the plane polygonal mesh\r\n * @see https://doc.babylonjs.com/how_to/set_shapes#disc-or-regular-polygon\r\n */\r\nexport function CreateDisc(\r\n    name: string,\r\n    options: { radius?: number; tessellation?: number; arc?: number; updatable?: boolean; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const disc = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    disc._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateDiscVertexData(options);\r\n\r\n    vertexData.applyToMesh(disc, options.updatable);\r\n\r\n    return disc;\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated please use CreateDisc directly\r\n */\r\nexport const DiscBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateDisc,\r\n};\r\n\r\nVertexData.CreateDisc = CreateDiscVertexData;\r\n\r\n(Mesh as any).CreateDisc = (name: string, radius: number, tessellation: number, scene: Nullable<Scene> = null, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        radius,\r\n        tessellation,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreateDisc(name, options, scene);\r\n};\r\n","import type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport type { Color4 } from \"../../Maths/math.color\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport { CreatePolyhedron } from \"./polyhedronBuilder\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { _PrimaryIsoTriangle, GeodesicData } from \"../geodesicMesh\";\r\n\r\n/**\r\n * Creates the Mesh for a Geodesic Polyhedron\r\n * @see https://en.wikipedia.org/wiki/Geodesic_polyhedron\r\n * @see https://doc.babylonjs.com/divingDeeper/mesh/creation/polyhedra/geodesic_poly\r\n * @param name defines the name of the mesh\r\n * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\r\n * * m number of horizontal steps along an isogrid\r\n * * n number of angled steps along an isogrid\r\n * * size the size of the Geodesic, optional default 1\r\n * * sizeX allows stretching in the x direction, optional, default size\r\n * * sizeY allows stretching in the y direction, optional, default size\r\n * * sizeZ allows stretching in the z direction, optional, default size\r\n * * faceUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n * * faceColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n * * flat when true creates a flat shaded mesh, optional, default true\r\n * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.n\r\n * @param options.size\r\n * @param options.sizeX\r\n * @param options.sizeY\r\n * @param options.sizeZ\r\n * @param options.faceUV\r\n * @param options.faceColors\r\n * @param options.flat\r\n * @param options.updatable\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.m\r\n * @param scene defines the hosting scene\r\n * @returns Geodesic mesh\r\n */\r\nexport function CreateGeodesic(\r\n    name: string,\r\n    options: {\r\n        m?: number;\r\n        n?: number;\r\n        size?: number;\r\n        sizeX?: number;\r\n        sizeY?: number;\r\n        sizeZ?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        flat?: boolean;\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    },\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    let m: number = options.m || 1;\r\n    if (m !== Math.floor(m)) {\r\n        m === Math.floor(m);\r\n        Logger.Warn(\"m not an integer only floor(m) used\");\r\n    }\r\n    let n: number = options.n || 0;\r\n    if (n !== Math.floor(n)) {\r\n        n === Math.floor(n);\r\n        Logger.Warn(\"n not an integer only floor(n) used\");\r\n    }\r\n    if (n > m) {\r\n        const temp = n;\r\n        n = m;\r\n        m = temp;\r\n        Logger.Warn(\"n > m therefore m and n swapped\");\r\n    }\r\n    const primTri: _PrimaryIsoTriangle = new _PrimaryIsoTriangle();\r\n    primTri.build(m, n);\r\n    const geodesicData = GeodesicData.BuildGeodesicData(primTri);\r\n\r\n    const geoOptions: object = {\r\n        custom: geodesicData,\r\n        size: options.size,\r\n        sizeX: options.sizeX,\r\n        sizeY: options.sizeY,\r\n        sizeZ: options.sizeZ,\r\n        faceUV: options.faceUV,\r\n        faceColors: options.faceColors,\r\n        flat: options.flat,\r\n        updatable: options.updatable,\r\n        sideOrientation: options.sideOrientation,\r\n        frontUVs: options.frontUVs,\r\n        backUVs: options.backUVs,\r\n    };\r\n    const geodesic = CreatePolyhedron(name, geoOptions, scene);\r\n\r\n    return geodesic;\r\n}\r\n","import type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from \"../../Maths/math.color\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport type { PolyhedronData } from \"../geodesicMesh\";\r\nimport { _PrimaryIsoTriangle, GeodesicData } from \"../geodesicMesh\";\r\nimport { GoldbergMesh } from \"../goldbergMesh\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Defines the set of data required to create goldberg vertex data.\r\n */\r\nexport type GoldbergVertexDataOption = {\r\n    /**\r\n     * the size of the Goldberg, optional default 1\r\n     */\r\n    size?: number;\r\n    /**\r\n     * allows stretching in the x direction, optional, default size\r\n     */\r\n    sizeX?: number;\r\n    /**\r\n     * allows stretching in the y direction, optional, default size\r\n     */\r\n    sizeY?: number;\r\n    /**\r\n     * allows stretching in the z direction, optional, default size\r\n     */\r\n    sizeZ?: number;\r\n    /**\r\n     * optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     */\r\n    sideOrientation?: number;\r\n};\r\n\r\n/**\r\n * Defines the set of data required to create a goldberg mesh.\r\n */\r\nexport type GoldbergCreationOption = {\r\n    /**\r\n     * number of horizontal steps along an isogrid\r\n     */\r\n    m?: number;\r\n    /**\r\n     * number of angled steps along an isogrid\r\n     */\r\n    n?: number;\r\n    /**\r\n     * defines if the mesh must be flagged as updatable\r\n     */\r\n    updatable?: boolean;\r\n} & GoldbergVertexDataOption;\r\n\r\n/**\r\n * Creates the Mesh for a Goldberg Polyhedron\r\n * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\r\n * @param goldbergData polyhedronData defining the Goldberg polyhedron\r\n * @returns GoldbergSphere mesh\r\n */\r\nexport function CreateGoldbergVertexData(options: GoldbergVertexDataOption, goldbergData: PolyhedronData): VertexData {\r\n    const size = options.size;\r\n    const sizeX: number = options.sizeX || size || 1;\r\n    const sizeY: number = options.sizeY || size || 1;\r\n    const sizeZ: number = options.sizeZ || size || 1;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    const positions = new Array<number>();\r\n    const indices = new Array<number>();\r\n    const normals = new Array<number>();\r\n    const uvs = new Array<number>();\r\n\r\n    let minX = Infinity;\r\n    let maxX = -Infinity;\r\n    let minY = Infinity;\r\n    let maxY = -Infinity;\r\n\r\n    for (let v = 0; v < goldbergData.vertex.length; v++) {\r\n        minX = Math.min(minX, goldbergData.vertex[v][0] * sizeX);\r\n        maxX = Math.max(maxX, goldbergData.vertex[v][0] * sizeX);\r\n        minY = Math.min(minY, goldbergData.vertex[v][1] * sizeY);\r\n        maxY = Math.max(maxY, goldbergData.vertex[v][1] * sizeY);\r\n    }\r\n\r\n    let index: number = 0;\r\n    for (let f = 0; f < goldbergData.face.length; f++) {\r\n        const verts = goldbergData.face[f];\r\n        const a = Vector3.FromArray(goldbergData.vertex[verts[0]]);\r\n        const b = Vector3.FromArray(goldbergData.vertex[verts[2]]);\r\n        const c = Vector3.FromArray(goldbergData.vertex[verts[1]]);\r\n        const ba = b.subtract(a);\r\n        const ca = c.subtract(a);\r\n        const norm = Vector3.Cross(ca, ba).normalize();\r\n        for (let v = 0; v < verts.length; v++) {\r\n            normals.push(norm.x, norm.y, norm.z);\r\n            const pdata = goldbergData.vertex[verts[v]];\r\n            positions.push(pdata[0] * sizeX, pdata[1] * sizeY, pdata[2] * sizeZ);\r\n            const vCoord = (pdata[1] * sizeY - minY) / (maxY - minY);\r\n            uvs.push((pdata[0] * sizeX - minX) / (maxX - minX), CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - vCoord : vCoord);\r\n        }\r\n        for (let v = 0; v < verts.length - 2; v++) {\r\n            indices.push(index, index + v + 2, index + v + 1);\r\n        }\r\n        index += verts.length;\r\n    }\r\n\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs);\r\n\r\n    const vertexData = new VertexData();\r\n    vertexData.positions = positions;\r\n    vertexData.indices = indices;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates the Mesh for a Goldberg Polyhedron which is made from 12 pentagonal and the rest hexagonal faces\r\n * @see https://en.wikipedia.org/wiki/Goldberg_polyhedron\r\n * @see https://doc.babylonjs.com/divingDeeper/mesh/creation/polyhedra/goldberg_poly\r\n * @param name defines the name of the mesh\r\n * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\r\n * @param scene defines the hosting scene\r\n * @returns Goldberg mesh\r\n */\r\nexport function CreateGoldberg(name: string, options: GoldbergCreationOption, scene: Nullable<Scene> = null): GoldbergMesh {\r\n    const size = options.size;\r\n    const sizeX: number = options.sizeX || size || 1;\r\n    const sizeY: number = options.sizeY || size || 1;\r\n    const sizeZ: number = options.sizeZ || size || 1;\r\n    let m: number = options.m || 1;\r\n    if (m !== Math.floor(m)) {\r\n        m === Math.floor(m);\r\n        Logger.Warn(\"m not an integer only floor(m) used\");\r\n    }\r\n    let n: number = options.n || 0;\r\n    if (n !== Math.floor(n)) {\r\n        n === Math.floor(n);\r\n        Logger.Warn(\"n not an integer only floor(n) used\");\r\n    }\r\n    if (n > m) {\r\n        const temp = n;\r\n        n = m;\r\n        m = temp;\r\n        Logger.Warn(\"n > m therefore m and n swapped\");\r\n    }\r\n    const primTri: _PrimaryIsoTriangle = new _PrimaryIsoTriangle();\r\n    primTri.build(m, n);\r\n    const geodesicData = GeodesicData.BuildGeodesicData(primTri);\r\n    const goldbergData = geodesicData.toGoldbergPolyhedronData();\r\n\r\n    const goldberg = new GoldbergMesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    goldberg._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateGoldbergVertexData(options, goldbergData);\r\n\r\n    vertexData.applyToMesh(goldberg, options.updatable);\r\n\r\n    goldberg.goldbergData.nbSharedFaces = geodesicData.sharedNodes;\r\n    goldberg.goldbergData.nbUnsharedFaces = geodesicData.poleNodes;\r\n    goldberg.goldbergData.adjacentFaces = geodesicData.adjacentFaces;\r\n    goldberg.goldbergData.nbFaces = goldberg.goldbergData.nbSharedFaces + goldberg.goldbergData.nbUnsharedFaces;\r\n    goldberg.goldbergData.nbFacesAtPole = (goldberg.goldbergData.nbUnsharedFaces - 12) / 12;\r\n    for (let f = 0; f < geodesicData.vertex.length; f++) {\r\n        goldberg.goldbergData.faceCenters.push(Vector3.FromArray(geodesicData.vertex[f]));\r\n        goldberg.goldbergData.faceCenters[f].x *= sizeX;\r\n        goldberg.goldbergData.faceCenters[f].y *= sizeY;\r\n        goldberg.goldbergData.faceCenters[f].z *= sizeZ;\r\n        goldberg.goldbergData.faceColors.push(new Color4(1, 1, 1, 1));\r\n    }\r\n\r\n    for (let f = 0; f < goldbergData.face.length; f++) {\r\n        const verts = goldbergData.face[f];\r\n        const a = Vector3.FromArray(goldbergData.vertex[verts[0]]);\r\n        const b = Vector3.FromArray(goldbergData.vertex[verts[2]]);\r\n        const c = Vector3.FromArray(goldbergData.vertex[verts[1]]);\r\n        const ba = b.subtract(a);\r\n        const ca = c.subtract(a);\r\n        const norm = Vector3.Cross(ca, ba).normalize();\r\n        const z = Vector3.Cross(ca, norm).normalize();\r\n        goldberg.goldbergData.faceXaxis.push(ca.normalize());\r\n        goldberg.goldbergData.faceYaxis.push(norm);\r\n        goldberg.goldbergData.faceZaxis.push(z);\r\n    }\r\n\r\n    return goldberg;\r\n}\r\n\r\n(Mesh as any).CreateGoldberg = CreateGoldberg;\r\n","import type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Vector3, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData of the IcoSphere\r\n * @param options an object used to set the following optional parameters for the IcoSphere, required but can be empty\r\n * * radius the radius of the IcoSphere, optional default 1\r\n * * radiusX allows stretching in the x direction, optional, default radius\r\n * * radiusY allows stretching in the y direction, optional, default radius\r\n * * radiusZ allows stretching in the z direction, optional, default radius\r\n * * flat when true creates a flat shaded mesh, optional, default true\r\n * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.radius\r\n * @param options.radiusX\r\n * @param options.radiusY\r\n * @param options.radiusZ\r\n * @param options.flat\r\n * @param options.subdivisions\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @returns the VertexData of the IcoSphere\r\n */\r\nexport function CreateIcoSphereVertexData(options: {\r\n    radius?: number;\r\n    radiusX?: number;\r\n    radiusY?: number;\r\n    radiusZ?: number;\r\n    flat?: boolean;\r\n    subdivisions?: number;\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n}): VertexData {\r\n    const sideOrientation = options.sideOrientation || VertexData.DEFAULTSIDE;\r\n    const radius = options.radius || 1;\r\n    const flat = options.flat === undefined ? true : options.flat;\r\n    const subdivisions = options.subdivisions || 4;\r\n    const radiusX = options.radiusX || radius;\r\n    const radiusY = options.radiusY || radius;\r\n    const radiusZ = options.radiusZ || radius;\r\n\r\n    const t = (1 + Math.sqrt(5)) / 2;\r\n\r\n    // 12 vertex x,y,z\r\n    const icoVertices = [\r\n        -1,\r\n        t,\r\n        -0,\r\n        1,\r\n        t,\r\n        0,\r\n        -1,\r\n        -t,\r\n        0,\r\n        1,\r\n        -t,\r\n        0, // v0-3\r\n        0,\r\n        -1,\r\n        -t,\r\n        0,\r\n        1,\r\n        -t,\r\n        0,\r\n        -1,\r\n        t,\r\n        0,\r\n        1,\r\n        t, // v4-7\r\n        t,\r\n        0,\r\n        1,\r\n        t,\r\n        0,\r\n        -1,\r\n        -t,\r\n        0,\r\n        1,\r\n        -t,\r\n        0,\r\n        -1, // v8-11\r\n    ];\r\n\r\n    // index of 3 vertex makes a face of icopshere\r\n    const ico_indices = [\r\n        0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 12, 22, 23, 1, 5, 20, 5, 11, 4, 23, 22, 13, 22, 18, 6, 7, 1, 8, 14, 21, 4, 14, 4, 2, 16, 13, 6, 15, 6, 19, 3, 8, 9, 4, 21, 5, 13, 17,\r\n        23, 6, 13, 22, 19, 6, 18, 9, 8, 1,\r\n    ];\r\n    // vertex for uv have aliased position, not for UV\r\n    const vertices_unalias_id = [\r\n        0,\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8,\r\n        9,\r\n        10,\r\n        11,\r\n        // vertex alias\r\n        0, // 12: 0 + 12\r\n        2, // 13: 2 + 11\r\n        3, // 14: 3 + 11\r\n        3, // 15: 3 + 12\r\n        3, // 16: 3 + 13\r\n        4, // 17: 4 + 13\r\n        7, // 18: 7 + 11\r\n        8, // 19: 8 + 11\r\n        9, // 20: 9 + 11\r\n        9, // 21: 9 + 12\r\n        10, // 22: A + 12\r\n        11, // 23: B + 12\r\n    ];\r\n\r\n    // uv as integer step (not pixels !)\r\n    const ico_vertexuv = [\r\n        5,\r\n        1,\r\n        3,\r\n        1,\r\n        6,\r\n        4,\r\n        0,\r\n        0, // v0-3\r\n        5,\r\n        3,\r\n        4,\r\n        2,\r\n        2,\r\n        2,\r\n        4,\r\n        0, // v4-7\r\n        2,\r\n        0,\r\n        1,\r\n        1,\r\n        6,\r\n        0,\r\n        6,\r\n        2, // v8-11\r\n        // vertex alias (for same vertex on different faces)\r\n        0,\r\n        4, // 12: 0 + 12\r\n        3,\r\n        3, // 13: 2 + 11\r\n        4,\r\n        4, // 14: 3 + 11\r\n        3,\r\n        1, // 15: 3 + 12\r\n        4,\r\n        2, // 16: 3 + 13\r\n        4,\r\n        4, // 17: 4 + 13\r\n        0,\r\n        2, // 18: 7 + 11\r\n        1,\r\n        1, // 19: 8 + 11\r\n        2,\r\n        2, // 20: 9 + 11\r\n        3,\r\n        3, // 21: 9 + 12\r\n        1,\r\n        3, // 22: A + 12\r\n        2,\r\n        4, // 23: B + 12\r\n    ];\r\n\r\n    // Vertices[0, 1, ...9, A, B] : position on UV plane\r\n    // '+' indicate duplicate position to be fixed (3,9:0,2,3,4,7,8,A,B)\r\n    // First island of uv mapping\r\n    // v = 4h          3+  2\r\n    // v = 3h        9+  4\r\n    // v = 2h      9+  5   B\r\n    // v = 1h    9   1   0\r\n    // v = 0h  3   8   7   A\r\n    //     u = 0 1 2 3 4 5 6  *a\r\n\r\n    // Second island of uv mapping\r\n    // v = 4h  0+  B+  4+\r\n    // v = 3h    A+  2+\r\n    // v = 2h  7+  6   3+\r\n    // v = 1h    8+  3+\r\n    // v = 0h\r\n    //     u = 0 1 2 3 4 5 6  *a\r\n\r\n    // Face layout on texture UV mapping\r\n    // ============\r\n    // \\ 4  /\\ 16 /   ======\r\n    //  \\  /  \\  /   /\\ 11 /\r\n    //   \\/ 7  \\/   /  \\  /\r\n    //    =======  / 10 \\/\r\n    //   /\\ 17 /\\  =======\r\n    //  /  \\  /  \\ \\ 15 /\\\r\n    // / 8  \\/ 12 \\ \\  /  \\\r\n    // ============  \\/ 6  \\\r\n    // \\ 18 /\\  ============\r\n    //  \\  /  \\ \\ 5  /\\ 0  /\r\n    //   \\/ 13 \\ \\  /  \\  /\r\n    //   =======  \\/ 1  \\/\r\n    //       =============\r\n    //      /\\ 19 /\\  2 /\\\r\n    //     /  \\  /  \\  /  \\\r\n    //    / 14 \\/ 9  \\/  3 \\\r\n    //   ===================\r\n\r\n    // uv step is u:1 or 0.5, v:cos(30)=sqrt(3)/2, ratio approx is 84/97\r\n    const ustep = 138 / 1024;\r\n    const vstep = 239 / 1024;\r\n    const uoffset = 60 / 1024;\r\n    const voffset = 26 / 1024;\r\n    // Second island should have margin, not to touch the first island\r\n    // avoid any borderline artefact in pixel rounding\r\n    const island_u_offset = -40 / 1024;\r\n    const island_v_offset = +20 / 1024;\r\n    // face is either island 0 or 1 :\r\n    // second island is for faces : [4, 7, 8, 12, 13, 16, 17, 18]\r\n    const island = [\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        1, //  0 - 4\r\n        0,\r\n        0,\r\n        1,\r\n        1,\r\n        0, //  5 - 9\r\n        0,\r\n        0,\r\n        1,\r\n        1,\r\n        0, //  10 - 14\r\n        0,\r\n        1,\r\n        1,\r\n        1,\r\n        0, //  15 - 19\r\n    ];\r\n\r\n    const indices = new Array<number>();\r\n    const positions = new Array<number>();\r\n    const normals = new Array<number>();\r\n    const uvs = new Array<number>();\r\n\r\n    let current_indice = 0;\r\n    // prepare array of 3 vector (empty) (to be worked in place, shared for each face)\r\n    const face_vertex_pos = new Array(3);\r\n    const face_vertex_uv = new Array(3);\r\n    let v012;\r\n    for (v012 = 0; v012 < 3; v012++) {\r\n        face_vertex_pos[v012] = Vector3.Zero();\r\n        face_vertex_uv[v012] = Vector2.Zero();\r\n    }\r\n    // create all with normals\r\n    for (let face = 0; face < 20; face++) {\r\n        // 3 vertex per face\r\n        for (v012 = 0; v012 < 3; v012++) {\r\n            // look up vertex 0,1,2 to its index in 0 to 11 (or 23 including alias)\r\n            const v_id = ico_indices[3 * face + v012];\r\n            // vertex have 3D position (x,y,z)\r\n            face_vertex_pos[v012].copyFromFloats(\r\n                icoVertices[3 * vertices_unalias_id[v_id]],\r\n                icoVertices[3 * vertices_unalias_id[v_id] + 1],\r\n                icoVertices[3 * vertices_unalias_id[v_id] + 2]\r\n            );\r\n            // Normalize to get normal\r\n            face_vertex_pos[v012].normalize();\r\n\r\n            // uv Coordinates from vertex ID\r\n            face_vertex_uv[v012].copyFromFloats(\r\n                ico_vertexuv[2 * v_id] * ustep + uoffset + island[face] * island_u_offset,\r\n                ico_vertexuv[2 * v_id + 1] * vstep + voffset + island[face] * island_v_offset\r\n            );\r\n        }\r\n\r\n        // Subdivide the face (interpolate pos, norm, uv)\r\n        // - pos is linear interpolation, then projected to sphere (converge polyhedron to sphere)\r\n        // - norm is linear interpolation of vertex corner normal\r\n        //   (to be checked if better to re-calc from face vertex, or if approximation is OK ??? )\r\n        // - uv is linear interpolation\r\n        //\r\n        // Topology is as below for sub-divide by 2\r\n        // vertex shown as v0,v1,v2\r\n        // interp index is i1 to progress in range [v0,v1[\r\n        // interp index is i2 to progress in range [v0,v2[\r\n        // face index as  (i1,i2)  for /\\  : (i1,i2),(i1+1,i2),(i1,i2+1)\r\n        //            and (i1,i2)' for \\/  : (i1+1,i2),(i1+1,i2+1),(i1,i2+1)\r\n        //\r\n        //\r\n        //                    i2    v2\r\n        //                    ^    ^\r\n        //                   /    / \\\r\n        //                  /    /   \\\r\n        //                 /    /     \\\r\n        //                /    / (0,1) \\\r\n        //               /    #---------\\\r\n        //              /    / \\ (0,0)'/ \\\r\n        //             /    /   \\     /   \\\r\n        //            /    /     \\   /     \\\r\n        //           /    / (0,0) \\ / (1,0) \\\r\n        //          /    #---------#---------\\\r\n        //              v0                    v1\r\n        //\r\n        //              --------------------> i1\r\n        //\r\n        // interp of (i1,i2):\r\n        //  along i2 :  x0=lerp(v0,v2, i2/S) <---> x1=lerp(v1,v2, i2/S)\r\n        //  along i1 :  lerp(x0,x1, i1/(S-i2))\r\n        //\r\n        // centroid of triangle is needed to get help normal computation\r\n        //  (c1,c2) are used for centroid location\r\n\r\n        const interp_vertex = (i1: number, i2: number, c1: number, c2: number) => {\r\n            // vertex is interpolated from\r\n            //   - face_vertex_pos[0..2]\r\n            //   - face_vertex_uv[0..2]\r\n            const pos_x0 = Vector3.Lerp(face_vertex_pos[0], face_vertex_pos[2], i2 / subdivisions);\r\n            const pos_x1 = Vector3.Lerp(face_vertex_pos[1], face_vertex_pos[2], i2 / subdivisions);\r\n            const pos_interp = subdivisions === i2 ? face_vertex_pos[2] : Vector3.Lerp(pos_x0, pos_x1, i1 / (subdivisions - i2));\r\n            pos_interp.normalize();\r\n\r\n            let vertex_normal;\r\n            if (flat) {\r\n                // in flat mode, recalculate normal as face centroid normal\r\n                const centroid_x0 = Vector3.Lerp(face_vertex_pos[0], face_vertex_pos[2], c2 / subdivisions);\r\n                const centroid_x1 = Vector3.Lerp(face_vertex_pos[1], face_vertex_pos[2], c2 / subdivisions);\r\n                vertex_normal = Vector3.Lerp(centroid_x0, centroid_x1, c1 / (subdivisions - c2));\r\n            } else {\r\n                // in smooth mode, recalculate normal from each single vertex position\r\n                vertex_normal = new Vector3(pos_interp.x, pos_interp.y, pos_interp.z);\r\n            }\r\n            // Vertex normal need correction due to X,Y,Z radius scaling\r\n            vertex_normal.x /= radiusX;\r\n            vertex_normal.y /= radiusY;\r\n            vertex_normal.z /= radiusZ;\r\n            vertex_normal.normalize();\r\n\r\n            const uv_x0 = Vector2.Lerp(face_vertex_uv[0], face_vertex_uv[2], i2 / subdivisions);\r\n            const uv_x1 = Vector2.Lerp(face_vertex_uv[1], face_vertex_uv[2], i2 / subdivisions);\r\n            const uv_interp = subdivisions === i2 ? face_vertex_uv[2] : Vector2.Lerp(uv_x0, uv_x1, i1 / (subdivisions - i2));\r\n            positions.push(pos_interp.x * radiusX, pos_interp.y * radiusY, pos_interp.z * radiusZ);\r\n            normals.push(vertex_normal.x, vertex_normal.y, vertex_normal.z);\r\n            uvs.push(uv_interp.x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - uv_interp.y : uv_interp.y);\r\n            // push each vertex has member of a face\r\n            // Same vertex can belong to multiple face, it is pushed multiple time (duplicate vertex are present)\r\n            indices.push(current_indice);\r\n            current_indice++;\r\n        };\r\n\r\n        for (let i2 = 0; i2 < subdivisions; i2++) {\r\n            for (let i1 = 0; i1 + i2 < subdivisions; i1++) {\r\n                // face : (i1,i2)  for /\\  :\r\n                // interp for : (i1,i2),(i1+1,i2),(i1,i2+1)\r\n                interp_vertex(i1, i2, i1 + 1.0 / 3, i2 + 1.0 / 3);\r\n                interp_vertex(i1 + 1, i2, i1 + 1.0 / 3, i2 + 1.0 / 3);\r\n                interp_vertex(i1, i2 + 1, i1 + 1.0 / 3, i2 + 1.0 / 3);\r\n                if (i1 + i2 + 1 < subdivisions) {\r\n                    // face : (i1,i2)' for \\/  :\r\n                    // interp for (i1+1,i2),(i1+1,i2+1),(i1,i2+1)\r\n                    interp_vertex(i1 + 1, i2, i1 + 2.0 / 3, i2 + 2.0 / 3);\r\n                    interp_vertex(i1 + 1, i2 + 1, i1 + 2.0 / 3, i2 + 2.0 / 3);\r\n                    interp_vertex(i1, i2 + 1, i1 + 2.0 / 3, i2 + 2.0 / 3);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a sphere based upon an icosahedron with 20 triangular faces which can be subdivided\r\n * * The parameter `radius` sets the radius size (float) of the icosphere (default 1)\r\n * * You can set some different icosphere dimensions, for instance to build an ellipsoid, by using the parameters `radiusX`, `radiusY` and `radiusZ` (all by default have the same value of `radius`)\r\n * * The parameter `subdivisions` sets the number of subdivisions (positive integer, default 4). The more subdivisions, the more faces on the icosphere whatever its size\r\n * * The parameter `flat` (boolean, default true) gives each side its own normals. Set it to false to get a smooth continuous light reflection on the surface\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.radius\r\n * @param options.radiusX\r\n * @param options.radiusY\r\n * @param options.radiusZ\r\n * @param options.flat\r\n * @param options.subdivisions\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.updatable\r\n * @param scene defines the hosting scene\r\n * @returns the icosahedron mesh\r\n * @see https://doc.babylonjs.com/how_to/polyhedra_shapes#icosphere\r\n */\r\nexport function CreateIcoSphere(\r\n    name: string,\r\n    options: {\r\n        radius?: number;\r\n        radiusX?: number;\r\n        radiusY?: number;\r\n        radiusZ?: number;\r\n        flat?: boolean;\r\n        subdivisions?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        updatable?: boolean;\r\n    } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const sphere = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    sphere._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateIcoSphereVertexData(options);\r\n\r\n    vertexData.applyToMesh(sphere, options.updatable);\r\n\r\n    return sphere;\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the function directly from the module\r\n */\r\nexport const IcoSphereBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateIcoSphere,\r\n};\r\n\r\nVertexData.CreateIcoSphere = CreateIcoSphereVertexData;\r\n\r\n(Mesh as any).CreateIcoSphere = (\r\n    name: string,\r\n    options: { radius?: number; flat?: boolean; subdivisions?: number; sideOrientation?: number; updatable?: boolean },\r\n    scene: Scene\r\n): Mesh => {\r\n    return CreateIcoSphere(name, options, scene);\r\n};\r\n","import type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { CreateRibbon } from \"./ribbonBuilder\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n/**\r\n * Creates lathe mesh.\r\n * The lathe is a shape with a symmetry axis : a 2D model shape is rotated around this axis to design the lathe\r\n * * The parameter `shape` is a required array of successive Vector3. This array depicts the shape to be rotated in its local space : the shape must be designed in the xOy plane and will be rotated around the Y axis. It's usually a 2D shape, so the Vector3 z coordinates are often set to zero\r\n * * The parameter `radius` (positive float, default 1) is the radius value of the lathe\r\n * * The parameter `tessellation` (positive integer, default 64) is the side number of the lathe\r\n * * The parameter `clip` (positive integer, default 0) is the number of sides to not create without effecting the general shape of the sides\r\n * * The parameter `arc` (positive float, default 1) is the ratio of the lathe. 0.5 builds for instance half a lathe, so an opened shape\r\n * * The parameter `closed` (boolean, default true) opens/closes the lathe circumference. This should be set to false when used with the parameter \"arc\"\r\n * * The parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.shape\r\n * @param options.radius\r\n * @param options.tessellation\r\n * @param options.clip\r\n * @param options.arc\r\n * @param options.closed\r\n * @param options.updatable\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.cap\r\n * @param options.invertUV\r\n * @param scene defines the hosting scene\r\n * @returns the lathe mesh\r\n * @see https://doc.babylonjs.com/how_to/parametric_shapes#lathe\r\n */\r\nexport function CreateLathe(\r\n    name: string,\r\n    options: {\r\n        shape: Vector3[];\r\n        radius?: number;\r\n        tessellation?: number;\r\n        clip?: number;\r\n        arc?: number;\r\n        closed?: boolean;\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        cap?: number;\r\n        invertUV?: boolean;\r\n    },\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const arc: number = options.arc ? (options.arc <= 0 || options.arc > 1 ? 1.0 : options.arc) : 1.0;\r\n    const closed: boolean = options.closed === undefined ? true : options.closed;\r\n    const shape = options.shape;\r\n    const radius = options.radius || 1;\r\n    const tessellation = options.tessellation || 64;\r\n    const clip = options.clip || 0;\r\n    const updatable = options.updatable;\r\n    const sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    const cap = options.cap || Mesh.NO_CAP;\r\n    const pi2 = Math.PI * 2;\r\n    const paths = new Array();\r\n    const invertUV = options.invertUV || false;\r\n\r\n    let i = 0;\r\n    let p = 0;\r\n    const step = (pi2 / tessellation) * arc;\r\n    let rotated;\r\n    let path: Array<Vector3>;\r\n    for (i = 0; i <= tessellation - clip; i++) {\r\n        path = [];\r\n        if (cap == Mesh.CAP_START || cap == Mesh.CAP_ALL) {\r\n            path.push(new Vector3(0, shape[0].y, 0));\r\n            path.push(new Vector3(Math.cos(i * step) * shape[0].x * radius, shape[0].y, Math.sin(i * step) * shape[0].x * radius));\r\n        }\r\n        for (p = 0; p < shape.length; p++) {\r\n            rotated = new Vector3(Math.cos(i * step) * shape[p].x * radius, shape[p].y, Math.sin(i * step) * shape[p].x * radius);\r\n            path.push(rotated);\r\n        }\r\n        if (cap == Mesh.CAP_END || cap == Mesh.CAP_ALL) {\r\n            path.push(new Vector3(Math.cos(i * step) * shape[shape.length - 1].x * radius, shape[shape.length - 1].y, Math.sin(i * step) * shape[shape.length - 1].x * radius));\r\n            path.push(new Vector3(0, shape[shape.length - 1].y, 0));\r\n        }\r\n        paths.push(path);\r\n    }\r\n\r\n    // lathe ribbon\r\n    const lathe = CreateRibbon(\r\n        name,\r\n        { pathArray: paths, closeArray: closed, sideOrientation: sideOrientation, updatable: updatable, invertUV: invertUV, frontUVs: options.frontUVs, backUVs: options.backUVs },\r\n        scene\r\n    );\r\n    return lathe;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the function direction from the module\r\n */\r\nexport const LatheBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateLathe,\r\n};\r\n\r\n(Mesh as any).CreateLathe = (name: string, shape: Vector3[], radius: number, tessellation: number, scene: Scene, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        shape: shape,\r\n        radius: radius,\r\n        tessellation: tessellation,\r\n        sideOrientation: sideOrientation,\r\n        updatable: updatable,\r\n    };\r\n\r\n    return CreateLathe(name, options, scene);\r\n};\r\n","import type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Plane } from \"../../Maths/math.plane\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData for a Plane\r\n * @param options an object used to set the following optional parameters for the plane, required but can be empty\r\n * * size sets the width and height of the plane to the value of size, optional default 1\r\n * * width sets the width (x direction) of the plane, overwrites the width set by size, optional, default size\r\n * * height sets the height (y direction) of the plane, overwrites the height set by size, optional, default size\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.size\r\n * @param options.width\r\n * @param options.height\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @returns the VertexData of the box\r\n */\r\nexport function CreatePlaneVertexData(options: { size?: number; width?: number; height?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 }): VertexData {\r\n    const indices = [];\r\n    const positions = [];\r\n    const normals = [];\r\n    const uvs = [];\r\n\r\n    const width: number = options.width || options.size || 1;\r\n    const height: number = options.height || options.size || 1;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    // Vertices\r\n    const halfWidth = width / 2.0;\r\n    const halfHeight = height / 2.0;\r\n\r\n    positions.push(-halfWidth, -halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(0.0, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 : 0.0);\r\n\r\n    positions.push(halfWidth, -halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(1.0, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 : 0.0);\r\n\r\n    positions.push(halfWidth, halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(1.0, CompatibilityOptions.UseOpenGLOrientationForUV ? 0.0 : 1.0);\r\n\r\n    positions.push(-halfWidth, halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(0.0, CompatibilityOptions.UseOpenGLOrientationForUV ? 0.0 : 1.0);\r\n\r\n    // Indices\r\n    indices.push(0);\r\n    indices.push(1);\r\n    indices.push(2);\r\n\r\n    indices.push(0);\r\n    indices.push(2);\r\n    indices.push(3);\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a plane mesh\r\n * * The parameter `size` sets the size (float) of both sides of the plane at once (default 1)\r\n * * You can set some different plane dimensions by using the parameters `width` and `height` (both by default have the same value of `size`)\r\n * * The parameter `sourcePlane` is a Plane instance. It builds a mesh plane from a Math plane\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.size\r\n * @param options.width\r\n * @param options.height\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.updatable\r\n * @param options.sourcePlane\r\n * @param scene defines the hosting scene\r\n * @returns the plane mesh\r\n * @see https://doc.babylonjs.com/how_to/set_shapes#plane\r\n */\r\nexport function CreatePlane(\r\n    name: string,\r\n    options: { size?: number; width?: number; height?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4; updatable?: boolean; sourcePlane?: Plane } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const plane = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    plane._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreatePlaneVertexData(options);\r\n\r\n    vertexData.applyToMesh(plane, options.updatable);\r\n\r\n    if (options.sourcePlane) {\r\n        plane.translate(options.sourcePlane.normal, -options.sourcePlane.d);\r\n        plane.setDirection(options.sourcePlane.normal.scale(-1));\r\n    }\r\n\r\n    return plane;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the function directly from the module\r\n */\r\nexport const PlaneBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreatePlane,\r\n};\r\n\r\nVertexData.CreatePlane = CreatePlaneVertexData;\r\n(Mesh as any).CreatePlane = (name: string, size: number, scene: Scene, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        size,\r\n        width: size,\r\n        height: size,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreatePlane(name, options, scene);\r\n};\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Vector2, Vector4 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from \"../../Maths/math.color\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { PolygonMeshBuilder } from \"../polygonMesh\";\r\nimport type { FloatArray, IndicesArray, Nullable } from \"../../types\";\r\nimport { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\ndeclare let earcut: any;\r\n\r\n/**\r\n * Creates the VertexData for an irregular Polygon in the XoZ plane using a mesh built by polygonTriangulation.build()\r\n * All parameters are provided by CreatePolygon as needed\r\n * @param polygon a mesh built from polygonTriangulation.build()\r\n * @param sideOrientation takes the values Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * @param fUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n * @param fColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n * @param frontUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * @param backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param wrp a boolean, default false, when true and fUVs used texture is wrapped around all sides, when false texture is applied side\r\n * @returns the VertexData of the Polygon\r\n */\r\nexport function CreatePolygonVertexData(polygon: Mesh, sideOrientation: number, fUV?: Vector4[], fColors?: Color4[], frontUVs?: Vector4, backUVs?: Vector4, wrp?: boolean) {\r\n    const faceUV: Vector4[] = fUV || new Array<Vector4>(3);\r\n    const faceColors = fColors;\r\n    const colors = [];\r\n    const wrap: boolean = wrp || false;\r\n\r\n    // default face colors and UV if undefined\r\n    for (let f = 0; f < 3; f++) {\r\n        if (faceUV[f] === undefined) {\r\n            faceUV[f] = new Vector4(0, 0, 1, 1);\r\n        }\r\n        if (faceColors && faceColors[f] === undefined) {\r\n            faceColors[f] = new Color4(1, 1, 1, 1);\r\n        }\r\n    }\r\n\r\n    const positions = <FloatArray>polygon.getVerticesData(VertexBuffer.PositionKind);\r\n    const normals = <FloatArray>polygon.getVerticesData(VertexBuffer.NormalKind);\r\n    const uvs = <FloatArray>polygon.getVerticesData(VertexBuffer.UVKind);\r\n    const indices = <IndicesArray>polygon.getIndices();\r\n    const startIndex = positions.length / 9;\r\n    let disp = 0;\r\n    let distX = 0;\r\n    let distZ = 0;\r\n    let dist = 0;\r\n    let totalLen = 0;\r\n    const cumulate = [0];\r\n    if (wrap) {\r\n        for (let idx = startIndex; idx < positions.length / 3; idx += 4) {\r\n            distX = positions[3 * (idx + 2)] - positions[3 * idx];\r\n            distZ = positions[3 * (idx + 2) + 2] - positions[3 * idx + 2];\r\n            dist = Math.sqrt(distX * distX + distZ * distZ);\r\n            totalLen += dist;\r\n            cumulate.push(totalLen);\r\n        }\r\n    }\r\n    // set face colours and textures\r\n    let idx: number = 0;\r\n    let face: number = 0;\r\n    for (let index = 0; index < normals.length; index += 3) {\r\n        //Edge Face  no. 1\r\n        if (Math.abs(normals[index + 1]) < 0.001) {\r\n            face = 1;\r\n        }\r\n        //Top Face  no. 0\r\n        if (Math.abs(normals[index + 1] - 1) < 0.001) {\r\n            face = 0;\r\n        }\r\n        //Bottom Face  no. 2\r\n        if (Math.abs(normals[index + 1] + 1) < 0.001) {\r\n            face = 2;\r\n        }\r\n        idx = index / 3;\r\n        if (face === 1) {\r\n            disp = idx - startIndex;\r\n            if (disp % 4 < 1.5) {\r\n                if (wrap) {\r\n                    uvs[2 * idx] = faceUV[face].x + ((faceUV[face].z - faceUV[face].x) * cumulate[Math.floor(disp / 4)]) / totalLen;\r\n                } else {\r\n                    uvs[2 * idx] = faceUV[face].x;\r\n                }\r\n            } else {\r\n                if (wrap) {\r\n                    uvs[2 * idx] = faceUV[face].x + ((faceUV[face].z - faceUV[face].x) * cumulate[Math.floor(disp / 4) + 1]) / totalLen;\r\n                } else {\r\n                    uvs[2 * idx] = faceUV[face].z;\r\n                }\r\n            }\r\n            if (disp % 2 === 0) {\r\n                uvs[2 * idx + 1] = CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[face].w : faceUV[face].w;\r\n            } else {\r\n                uvs[2 * idx + 1] = CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[face].y : faceUV[face].y;\r\n            }\r\n        } else {\r\n            uvs[2 * idx] = (1 - uvs[2 * idx]) * faceUV[face].x + uvs[2 * idx] * faceUV[face].z;\r\n            uvs[2 * idx + 1] = (1 - uvs[2 * idx + 1]) * faceUV[face].y + uvs[2 * idx + 1] * faceUV[face].w;\r\n\r\n            if (CompatibilityOptions.UseOpenGLOrientationForUV) {\r\n                uvs[2 * idx + 1] = 1.0 - uvs[2 * idx + 1];\r\n            }\r\n        }\r\n        if (faceColors) {\r\n            colors.push(faceColors[face].r, faceColors[face].g, faceColors[face].b, faceColors[face].a);\r\n        }\r\n    }\r\n\r\n    // sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, frontUVs, backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    if (faceColors) {\r\n        const totalColors = sideOrientation === VertexData.DOUBLESIDE ? colors.concat(colors) : colors;\r\n        vertexData.colors = totalColors;\r\n    }\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a polygon mesh\r\n * The polygon's shape will depend on the input parameters and is constructed parallel to a ground mesh\r\n * * The parameter `shape` is a required array of successive Vector3 representing the corners of the polygon in th XoZ plane, that is y = 0 for all vectors\r\n * * You can set the mesh side orientation with the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4)\r\n * * Remember you can only change the shape positions, not their number when updating a polygon\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.shape\r\n * @param options.holes\r\n * @param options.depth\r\n * @param options.smoothingThreshold\r\n * @param options.faceUV\r\n * @param options.faceColors\r\n * @param options.updatable\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.wrap\r\n * @param scene defines the hosting scene\r\n * @param earcutInjection can be used to inject your own earcut reference\r\n * @returns the polygon mesh\r\n */\r\nexport function CreatePolygon(\r\n    name: string,\r\n    options: {\r\n        shape: Vector3[];\r\n        holes?: Vector3[][];\r\n        depth?: number;\r\n        smoothingThreshold?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        wrap?: boolean;\r\n    },\r\n    scene: Nullable<Scene> = null,\r\n    earcutInjection = earcut\r\n): Mesh {\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    const shape = options.shape;\r\n    const holes = options.holes || [];\r\n    const depth = options.depth || 0;\r\n    const smoothingThreshold = options.smoothingThreshold || 2;\r\n    const contours: Array<Vector2> = [];\r\n    let hole: Array<Vector2> = [];\r\n\r\n    for (let i = 0; i < shape.length; i++) {\r\n        contours[i] = new Vector2(shape[i].x, shape[i].z);\r\n    }\r\n    const epsilon = 0.00000001;\r\n    if (contours[0].equalsWithEpsilon(contours[contours.length - 1], epsilon)) {\r\n        contours.pop();\r\n    }\r\n\r\n    const polygonTriangulation = new PolygonMeshBuilder(name, contours, scene || EngineStore.LastCreatedScene!, earcutInjection);\r\n    for (let hNb = 0; hNb < holes.length; hNb++) {\r\n        hole = [];\r\n        for (let hPoint = 0; hPoint < holes[hNb].length; hPoint++) {\r\n            hole.push(new Vector2(holes[hNb][hPoint].x, holes[hNb][hPoint].z));\r\n        }\r\n        polygonTriangulation.addHole(hole);\r\n    }\r\n    //updatability is set during applyToMesh; setting to true in triangulation build produces errors\r\n    const polygon = polygonTriangulation.build(false, depth, smoothingThreshold);\r\n    polygon._originalBuilderSideOrientation = options.sideOrientation;\r\n    const vertexData = CreatePolygonVertexData(polygon, options.sideOrientation, options.faceUV, options.faceColors, options.frontUVs, options.backUVs, options.wrap);\r\n    vertexData.applyToMesh(polygon, options.updatable);\r\n\r\n    return polygon;\r\n}\r\n\r\n/**\r\n * Creates an extruded polygon mesh, with depth in the Y direction.\r\n * * You can set different colors and different images to the top, bottom and extruded side by using the parameters `faceColors` (an array of 3 Color3 elements) and `faceUV` (an array of 3 Vector4 elements)\r\n * @see https://doc.babylonjs.com/how_to/createbox_per_face_textures_and_colors\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.shape\r\n * @param options.holes\r\n * @param options.depth\r\n * @param options.faceUV\r\n * @param options.faceColors\r\n * @param options.updatable\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.wrap\r\n * @param scene defines the hosting scene\r\n * @param earcutInjection can be used to inject your own earcut reference\r\n * @returns the polygon mesh\r\n */\r\nexport function ExtrudePolygon(\r\n    name: string,\r\n    options: {\r\n        shape: Vector3[];\r\n        holes?: Vector3[][];\r\n        depth?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        wrap?: boolean;\r\n    },\r\n    scene: Nullable<Scene> = null,\r\n    earcutInjection = earcut\r\n): Mesh {\r\n    return CreatePolygon(name, options, scene, earcutInjection);\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the functions directly from the module\r\n */\r\nexport const PolygonBuilder = {\r\n    ExtrudePolygon,\r\n    CreatePolygon,\r\n};\r\n\r\nVertexData.CreatePolygon = CreatePolygonVertexData;\r\n(Mesh as any).CreatePolygon = (\r\n    name: string,\r\n    shape: Vector3[],\r\n    scene: Scene,\r\n    holes?: Vector3[][],\r\n    updatable?: boolean,\r\n    sideOrientation?: number,\r\n    earcutInjection = earcut\r\n): Mesh => {\r\n    const options = {\r\n        shape: shape,\r\n        holes: holes,\r\n        updatable: updatable,\r\n        sideOrientation: sideOrientation,\r\n    };\r\n    return CreatePolygon(name, options, scene, earcutInjection);\r\n};\r\n\r\n(Mesh as any).ExtrudePolygon = (\r\n    name: string,\r\n    shape: Vector3[],\r\n    depth: number,\r\n    scene: Scene,\r\n    holes?: Vector3[][],\r\n    updatable?: boolean,\r\n    sideOrientation?: number,\r\n    earcutInjection = earcut\r\n): Mesh => {\r\n    const options = {\r\n        shape: shape,\r\n        holes: holes,\r\n        depth: depth,\r\n        updatable: updatable,\r\n        sideOrientation: sideOrientation,\r\n    };\r\n    return ExtrudePolygon(name, options, scene, earcutInjection);\r\n};\r\n","import type { Scene } from \"../../scene\";\r\nimport { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from \"../../Maths/math.color\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n// inspired from // http://stemkoski.github.io/Three.js/Polyhedra.html\r\n/**\r\n * Creates the VertexData for a Polyhedron\r\n * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\r\n * * type provided types are:\r\n *  * 0 : Tetrahedron, 1 : Octahedron, 2 : Dodecahedron, 3 : Icosahedron, 4 : Rhombicuboctahedron, 5 : Triangular Prism, 6 : Pentagonal Prism, 7 : Hexagonal Prism, 8 : Square Pyramid (J1)\r\n *  * 9 : Pentagonal Pyramid (J2), 10 : Triangular Dipyramid (J12), 11 : Pentagonal Dipyramid (J13), 12 : Elongated Square Dipyramid (J15), 13 : Elongated Pentagonal Dipyramid (J16), 14 : Elongated Pentagonal Cupola (J20)\r\n * * size the size of the IcoSphere, optional default 1\r\n * * sizeX allows stretching in the x direction, optional, default size\r\n * * sizeY allows stretching in the y direction, optional, default size\r\n * * sizeZ allows stretching in the z direction, optional, default size\r\n * * custom a number that overwrites the type to create from an extended set of polyhedron from https://www.babylonjs-playground.com/#21QRSK#15 with minimised editor\r\n * * faceUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n * * faceColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n * * flat when true creates a flat shaded mesh, optional, default true\r\n * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.type\r\n * @param options.size\r\n * @param options.sizeX\r\n * @param options.sizeY\r\n * @param options.sizeZ\r\n * @param options.custom\r\n * @param options.faceUV\r\n * @param options.faceColors\r\n * @param options.flat\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @returns the VertexData of the Polyhedron\r\n */\r\nexport function CreatePolyhedronVertexData(options: {\r\n    type?: number;\r\n    size?: number;\r\n    sizeX?: number;\r\n    sizeY?: number;\r\n    sizeZ?: number;\r\n    custom?: any;\r\n    faceUV?: Vector4[];\r\n    faceColors?: Color4[];\r\n    flat?: boolean;\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n}): VertexData {\r\n    // provided polyhedron types :\r\n    // 0 : Tetrahedron, 1 : Octahedron, 2 : Dodecahedron, 3 : Icosahedron, 4 : Rhombicuboctahedron, 5 : Triangular Prism, 6 : Pentagonal Prism, 7 : Hexagonal Prism, 8 : Square Pyramid (J1)\r\n    // 9 : Pentagonal Pyramid (J2), 10 : Triangular Dipyramid (J12), 11 : Pentagonal Dipyramid (J13), 12 : Elongated Square Dipyramid (J15), 13 : Elongated Pentagonal Dipyramid (J16), 14 : Elongated Pentagonal Cupola (J20)\r\n    const polyhedra: { vertex: number[][]; face: number[][] }[] = [];\r\n    polyhedra[0] = {\r\n        vertex: [\r\n            [0, 0, 1.732051],\r\n            [1.632993, 0, -0.5773503],\r\n            [-0.8164966, 1.414214, -0.5773503],\r\n            [-0.8164966, -1.414214, -0.5773503],\r\n        ],\r\n        face: [\r\n            [0, 1, 2],\r\n            [0, 2, 3],\r\n            [0, 3, 1],\r\n            [1, 3, 2],\r\n        ],\r\n    };\r\n    polyhedra[1] = {\r\n        vertex: [\r\n            [0, 0, 1.414214],\r\n            [1.414214, 0, 0],\r\n            [0, 1.414214, 0],\r\n            [-1.414214, 0, 0],\r\n            [0, -1.414214, 0],\r\n            [0, 0, -1.414214],\r\n        ],\r\n        face: [\r\n            [0, 1, 2],\r\n            [0, 2, 3],\r\n            [0, 3, 4],\r\n            [0, 4, 1],\r\n            [1, 4, 5],\r\n            [1, 5, 2],\r\n            [2, 5, 3],\r\n            [3, 5, 4],\r\n        ],\r\n    };\r\n    polyhedra[2] = {\r\n        vertex: [\r\n            [0, 0, 1.070466],\r\n            [0.7136442, 0, 0.7978784],\r\n            [-0.3568221, 0.618034, 0.7978784],\r\n            [-0.3568221, -0.618034, 0.7978784],\r\n            [0.7978784, 0.618034, 0.3568221],\r\n            [0.7978784, -0.618034, 0.3568221],\r\n            [-0.9341724, 0.381966, 0.3568221],\r\n            [0.1362939, 1, 0.3568221],\r\n            [0.1362939, -1, 0.3568221],\r\n            [-0.9341724, -0.381966, 0.3568221],\r\n            [0.9341724, 0.381966, -0.3568221],\r\n            [0.9341724, -0.381966, -0.3568221],\r\n            [-0.7978784, 0.618034, -0.3568221],\r\n            [-0.1362939, 1, -0.3568221],\r\n            [-0.1362939, -1, -0.3568221],\r\n            [-0.7978784, -0.618034, -0.3568221],\r\n            [0.3568221, 0.618034, -0.7978784],\r\n            [0.3568221, -0.618034, -0.7978784],\r\n            [-0.7136442, 0, -0.7978784],\r\n            [0, 0, -1.070466],\r\n        ],\r\n        face: [\r\n            [0, 1, 4, 7, 2],\r\n            [0, 2, 6, 9, 3],\r\n            [0, 3, 8, 5, 1],\r\n            [1, 5, 11, 10, 4],\r\n            [2, 7, 13, 12, 6],\r\n            [3, 9, 15, 14, 8],\r\n            [4, 10, 16, 13, 7],\r\n            [5, 8, 14, 17, 11],\r\n            [6, 12, 18, 15, 9],\r\n            [10, 11, 17, 19, 16],\r\n            [12, 13, 16, 19, 18],\r\n            [14, 15, 18, 19, 17],\r\n        ],\r\n    };\r\n    polyhedra[3] = {\r\n        vertex: [\r\n            [0, 0, 1.175571],\r\n            [1.051462, 0, 0.5257311],\r\n            [0.3249197, 1, 0.5257311],\r\n            [-0.8506508, 0.618034, 0.5257311],\r\n            [-0.8506508, -0.618034, 0.5257311],\r\n            [0.3249197, -1, 0.5257311],\r\n            [0.8506508, 0.618034, -0.5257311],\r\n            [0.8506508, -0.618034, -0.5257311],\r\n            [-0.3249197, 1, -0.5257311],\r\n            [-1.051462, 0, -0.5257311],\r\n            [-0.3249197, -1, -0.5257311],\r\n            [0, 0, -1.175571],\r\n        ],\r\n        face: [\r\n            [0, 1, 2],\r\n            [0, 2, 3],\r\n            [0, 3, 4],\r\n            [0, 4, 5],\r\n            [0, 5, 1],\r\n            [1, 5, 7],\r\n            [1, 7, 6],\r\n            [1, 6, 2],\r\n            [2, 6, 8],\r\n            [2, 8, 3],\r\n            [3, 8, 9],\r\n            [3, 9, 4],\r\n            [4, 9, 10],\r\n            [4, 10, 5],\r\n            [5, 10, 7],\r\n            [6, 7, 11],\r\n            [6, 11, 8],\r\n            [7, 10, 11],\r\n            [8, 11, 9],\r\n            [9, 11, 10],\r\n        ],\r\n    };\r\n    polyhedra[4] = {\r\n        vertex: [\r\n            [0, 0, 1.070722],\r\n            [0.7148135, 0, 0.7971752],\r\n            [-0.104682, 0.7071068, 0.7971752],\r\n            [-0.6841528, 0.2071068, 0.7971752],\r\n            [-0.104682, -0.7071068, 0.7971752],\r\n            [0.6101315, 0.7071068, 0.5236279],\r\n            [1.04156, 0.2071068, 0.1367736],\r\n            [0.6101315, -0.7071068, 0.5236279],\r\n            [-0.3574067, 1, 0.1367736],\r\n            [-0.7888348, -0.5, 0.5236279],\r\n            [-0.9368776, 0.5, 0.1367736],\r\n            [-0.3574067, -1, 0.1367736],\r\n            [0.3574067, 1, -0.1367736],\r\n            [0.9368776, -0.5, -0.1367736],\r\n            [0.7888348, 0.5, -0.5236279],\r\n            [0.3574067, -1, -0.1367736],\r\n            [-0.6101315, 0.7071068, -0.5236279],\r\n            [-1.04156, -0.2071068, -0.1367736],\r\n            [-0.6101315, -0.7071068, -0.5236279],\r\n            [0.104682, 0.7071068, -0.7971752],\r\n            [0.6841528, -0.2071068, -0.7971752],\r\n            [0.104682, -0.7071068, -0.7971752],\r\n            [-0.7148135, 0, -0.7971752],\r\n            [0, 0, -1.070722],\r\n        ],\r\n        face: [\r\n            [0, 2, 3],\r\n            [1, 6, 5],\r\n            [4, 9, 11],\r\n            [7, 15, 13],\r\n            [8, 16, 10],\r\n            [12, 14, 19],\r\n            [17, 22, 18],\r\n            [20, 21, 23],\r\n            [0, 1, 5, 2],\r\n            [0, 3, 9, 4],\r\n            [0, 4, 7, 1],\r\n            [1, 7, 13, 6],\r\n            [2, 5, 12, 8],\r\n            [2, 8, 10, 3],\r\n            [3, 10, 17, 9],\r\n            [4, 11, 15, 7],\r\n            [5, 6, 14, 12],\r\n            [6, 13, 20, 14],\r\n            [8, 12, 19, 16],\r\n            [9, 17, 18, 11],\r\n            [10, 16, 22, 17],\r\n            [11, 18, 21, 15],\r\n            [13, 15, 21, 20],\r\n            [14, 20, 23, 19],\r\n            [16, 19, 23, 22],\r\n            [18, 22, 23, 21],\r\n        ],\r\n    };\r\n    polyhedra[5] = {\r\n        vertex: [\r\n            [0, 0, 1.322876],\r\n            [1.309307, 0, 0.1889822],\r\n            [-0.9819805, 0.8660254, 0.1889822],\r\n            [0.1636634, -1.299038, 0.1889822],\r\n            [0.3273268, 0.8660254, -0.9449112],\r\n            [-0.8183171, -0.4330127, -0.9449112],\r\n        ],\r\n        face: [\r\n            [0, 3, 1],\r\n            [2, 4, 5],\r\n            [0, 1, 4, 2],\r\n            [0, 2, 5, 3],\r\n            [1, 3, 5, 4],\r\n        ],\r\n    };\r\n    polyhedra[6] = {\r\n        vertex: [\r\n            [0, 0, 1.159953],\r\n            [1.013464, 0, 0.5642542],\r\n            [-0.3501431, 0.9510565, 0.5642542],\r\n            [-0.7715208, -0.6571639, 0.5642542],\r\n            [0.6633206, 0.9510565, -0.03144481],\r\n            [0.8682979, -0.6571639, -0.3996071],\r\n            [-1.121664, 0.2938926, -0.03144481],\r\n            [-0.2348831, -1.063314, -0.3996071],\r\n            [0.5181548, 0.2938926, -0.9953061],\r\n            [-0.5850262, -0.112257, -0.9953061],\r\n        ],\r\n        face: [\r\n            [0, 1, 4, 2],\r\n            [0, 2, 6, 3],\r\n            [1, 5, 8, 4],\r\n            [3, 6, 9, 7],\r\n            [5, 7, 9, 8],\r\n            [0, 3, 7, 5, 1],\r\n            [2, 4, 8, 9, 6],\r\n        ],\r\n    };\r\n    polyhedra[7] = {\r\n        vertex: [\r\n            [0, 0, 1.118034],\r\n            [0.8944272, 0, 0.6708204],\r\n            [-0.2236068, 0.8660254, 0.6708204],\r\n            [-0.7826238, -0.4330127, 0.6708204],\r\n            [0.6708204, 0.8660254, 0.2236068],\r\n            [1.006231, -0.4330127, -0.2236068],\r\n            [-1.006231, 0.4330127, 0.2236068],\r\n            [-0.6708204, -0.8660254, -0.2236068],\r\n            [0.7826238, 0.4330127, -0.6708204],\r\n            [0.2236068, -0.8660254, -0.6708204],\r\n            [-0.8944272, 0, -0.6708204],\r\n            [0, 0, -1.118034],\r\n        ],\r\n        face: [\r\n            [0, 1, 4, 2],\r\n            [0, 2, 6, 3],\r\n            [1, 5, 8, 4],\r\n            [3, 6, 10, 7],\r\n            [5, 9, 11, 8],\r\n            [7, 10, 11, 9],\r\n            [0, 3, 7, 9, 5, 1],\r\n            [2, 4, 8, 11, 10, 6],\r\n        ],\r\n    };\r\n    polyhedra[8] = {\r\n        vertex: [\r\n            [-0.729665, 0.670121, 0.319155],\r\n            [-0.655235, -0.29213, -0.754096],\r\n            [-0.093922, -0.607123, 0.537818],\r\n            [0.702196, 0.595691, 0.485187],\r\n            [0.776626, -0.36656, -0.588064],\r\n        ],\r\n        face: [\r\n            [1, 4, 2],\r\n            [0, 1, 2],\r\n            [3, 0, 2],\r\n            [4, 3, 2],\r\n            [4, 1, 0, 3],\r\n        ],\r\n    };\r\n    polyhedra[9] = {\r\n        vertex: [\r\n            [-0.868849, -0.100041, 0.61257],\r\n            [-0.329458, 0.976099, 0.28078],\r\n            [-0.26629, -0.013796, -0.477654],\r\n            [-0.13392, -1.034115, 0.229829],\r\n            [0.738834, 0.707117, -0.307018],\r\n            [0.859683, -0.535264, -0.338508],\r\n        ],\r\n        face: [\r\n            [3, 0, 2],\r\n            [5, 3, 2],\r\n            [4, 5, 2],\r\n            [1, 4, 2],\r\n            [0, 1, 2],\r\n            [0, 3, 5, 4, 1],\r\n        ],\r\n    };\r\n    polyhedra[10] = {\r\n        vertex: [\r\n            [-0.610389, 0.243975, 0.531213],\r\n            [-0.187812, -0.48795, -0.664016],\r\n            [-0.187812, 0.9759, -0.664016],\r\n            [0.187812, -0.9759, 0.664016],\r\n            [0.798201, 0.243975, 0.132803],\r\n        ],\r\n        face: [\r\n            [1, 3, 0],\r\n            [3, 4, 0],\r\n            [3, 1, 4],\r\n            [0, 2, 1],\r\n            [0, 4, 2],\r\n            [2, 4, 1],\r\n        ],\r\n    };\r\n    polyhedra[11] = {\r\n        vertex: [\r\n            [-1.028778, 0.392027, -0.048786],\r\n            [-0.640503, -0.646161, 0.621837],\r\n            [-0.125162, -0.395663, -0.540059],\r\n            [0.004683, 0.888447, -0.651988],\r\n            [0.125161, 0.395663, 0.540059],\r\n            [0.632925, -0.791376, 0.433102],\r\n            [1.031672, 0.157063, -0.354165],\r\n        ],\r\n        face: [\r\n            [3, 2, 0],\r\n            [2, 1, 0],\r\n            [2, 5, 1],\r\n            [0, 4, 3],\r\n            [0, 1, 4],\r\n            [4, 1, 5],\r\n            [2, 3, 6],\r\n            [3, 4, 6],\r\n            [5, 2, 6],\r\n            [4, 5, 6],\r\n        ],\r\n    };\r\n    polyhedra[12] = {\r\n        vertex: [\r\n            [-0.669867, 0.334933, -0.529576],\r\n            [-0.669867, 0.334933, 0.529577],\r\n            [-0.4043, 1.212901, 0],\r\n            [-0.334933, -0.669867, -0.529576],\r\n            [-0.334933, -0.669867, 0.529577],\r\n            [0.334933, 0.669867, -0.529576],\r\n            [0.334933, 0.669867, 0.529577],\r\n            [0.4043, -1.212901, 0],\r\n            [0.669867, -0.334933, -0.529576],\r\n            [0.669867, -0.334933, 0.529577],\r\n        ],\r\n        face: [\r\n            [8, 9, 7],\r\n            [6, 5, 2],\r\n            [3, 8, 7],\r\n            [5, 0, 2],\r\n            [4, 3, 7],\r\n            [0, 1, 2],\r\n            [9, 4, 7],\r\n            [1, 6, 2],\r\n            [9, 8, 5, 6],\r\n            [8, 3, 0, 5],\r\n            [3, 4, 1, 0],\r\n            [4, 9, 6, 1],\r\n        ],\r\n    };\r\n    polyhedra[13] = {\r\n        vertex: [\r\n            [-0.931836, 0.219976, -0.264632],\r\n            [-0.636706, 0.318353, 0.692816],\r\n            [-0.613483, -0.735083, -0.264632],\r\n            [-0.326545, 0.979634, 0],\r\n            [-0.318353, -0.636706, 0.692816],\r\n            [-0.159176, 0.477529, -0.856368],\r\n            [0.159176, -0.477529, -0.856368],\r\n            [0.318353, 0.636706, 0.692816],\r\n            [0.326545, -0.979634, 0],\r\n            [0.613482, 0.735082, -0.264632],\r\n            [0.636706, -0.318353, 0.692816],\r\n            [0.931835, -0.219977, -0.264632],\r\n        ],\r\n        face: [\r\n            [11, 10, 8],\r\n            [7, 9, 3],\r\n            [6, 11, 8],\r\n            [9, 5, 3],\r\n            [2, 6, 8],\r\n            [5, 0, 3],\r\n            [4, 2, 8],\r\n            [0, 1, 3],\r\n            [10, 4, 8],\r\n            [1, 7, 3],\r\n            [10, 11, 9, 7],\r\n            [11, 6, 5, 9],\r\n            [6, 2, 0, 5],\r\n            [2, 4, 1, 0],\r\n            [4, 10, 7, 1],\r\n        ],\r\n    };\r\n    polyhedra[14] = {\r\n        vertex: [\r\n            [-0.93465, 0.300459, -0.271185],\r\n            [-0.838689, -0.260219, -0.516017],\r\n            [-0.711319, 0.717591, 0.128359],\r\n            [-0.710334, -0.156922, 0.080946],\r\n            [-0.599799, 0.556003, -0.725148],\r\n            [-0.503838, -0.004675, -0.969981],\r\n            [-0.487004, 0.26021, 0.48049],\r\n            [-0.460089, -0.750282, -0.512622],\r\n            [-0.376468, 0.973135, -0.325605],\r\n            [-0.331735, -0.646985, 0.084342],\r\n            [-0.254001, 0.831847, 0.530001],\r\n            [-0.125239, -0.494738, -0.966586],\r\n            [0.029622, 0.027949, 0.730817],\r\n            [0.056536, -0.982543, -0.262295],\r\n            [0.08085, 1.087391, 0.076037],\r\n            [0.125583, -0.532729, 0.485984],\r\n            [0.262625, 0.599586, 0.780328],\r\n            [0.391387, -0.726999, -0.716259],\r\n            [0.513854, -0.868287, 0.139347],\r\n            [0.597475, 0.85513, 0.326364],\r\n            [0.641224, 0.109523, 0.783723],\r\n            [0.737185, -0.451155, 0.538891],\r\n            [0.848705, -0.612742, -0.314616],\r\n            [0.976075, 0.365067, 0.32976],\r\n            [1.072036, -0.19561, 0.084927],\r\n        ],\r\n        face: [\r\n            [15, 18, 21],\r\n            [12, 20, 16],\r\n            [6, 10, 2],\r\n            [3, 0, 1],\r\n            [9, 7, 13],\r\n            [2, 8, 4, 0],\r\n            [0, 4, 5, 1],\r\n            [1, 5, 11, 7],\r\n            [7, 11, 17, 13],\r\n            [13, 17, 22, 18],\r\n            [18, 22, 24, 21],\r\n            [21, 24, 23, 20],\r\n            [20, 23, 19, 16],\r\n            [16, 19, 14, 10],\r\n            [10, 14, 8, 2],\r\n            [15, 9, 13, 18],\r\n            [12, 15, 21, 20],\r\n            [6, 12, 16, 10],\r\n            [3, 6, 2, 0],\r\n            [9, 3, 1, 7],\r\n            [9, 15, 12, 6, 3],\r\n            [22, 17, 11, 5, 4, 8, 14, 19, 23, 24],\r\n        ],\r\n    };\r\n\r\n    const type: number = options.type && (options.type < 0 || options.type >= polyhedra.length) ? 0 : options.type || 0;\r\n    const size = options.size;\r\n    const sizeX: number = options.sizeX || size || 1;\r\n    const sizeY: number = options.sizeY || size || 1;\r\n    const sizeZ: number = options.sizeZ || size || 1;\r\n    const data: { vertex: number[][]; face: number[][]; name?: string; category?: string } = options.custom || polyhedra[type];\r\n    const nbfaces = data.face.length;\r\n    const faceUV = options.faceUV || new Array(nbfaces);\r\n    const faceColors = options.faceColors;\r\n    const flat = options.flat === undefined ? true : options.flat;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    const positions = new Array<number>();\r\n    const indices = new Array<number>();\r\n    const normals = new Array<number>();\r\n    const uvs = new Array<number>();\r\n    const colors = new Array<number>();\r\n    let index = 0;\r\n    let faceIdx = 0; // face cursor in the array \"indexes\"\r\n    const indexes = new Array<number>();\r\n    let i = 0;\r\n    let f = 0;\r\n    let u: number, v: number, ang: number, x: number, y: number, tmp: number;\r\n\r\n    // default face colors and UV if undefined\r\n    if (flat) {\r\n        for (f = 0; f < nbfaces; f++) {\r\n            if (faceColors && faceColors[f] === undefined) {\r\n                faceColors[f] = new Color4(1, 1, 1, 1);\r\n            }\r\n            if (faceUV && faceUV[f] === undefined) {\r\n                faceUV[f] = new Vector4(0, 0, 1, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!flat) {\r\n        for (i = 0; i < data.vertex.length; i++) {\r\n            positions.push(data.vertex[i][0] * sizeX, data.vertex[i][1] * sizeY, data.vertex[i][2] * sizeZ);\r\n            uvs.push(0, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 : 0);\r\n        }\r\n        for (f = 0; f < nbfaces; f++) {\r\n            for (i = 0; i < data.face[f].length - 2; i++) {\r\n                indices.push(data.face[f][0], data.face[f][i + 2], data.face[f][i + 1]);\r\n            }\r\n        }\r\n    } else {\r\n        for (f = 0; f < nbfaces; f++) {\r\n            const fl = data.face[f].length; // number of vertices of the current face\r\n            ang = (2 * Math.PI) / fl;\r\n            x = 0.5 * Math.tan(ang / 2);\r\n            y = 0.5;\r\n\r\n            // positions, uvs, colors\r\n            for (i = 0; i < fl; i++) {\r\n                // positions\r\n                positions.push(data.vertex[data.face[f][i]][0] * sizeX, data.vertex[data.face[f][i]][1] * sizeY, data.vertex[data.face[f][i]][2] * sizeZ);\r\n                indexes.push(index);\r\n                index++;\r\n                // uvs\r\n                u = faceUV[f].x + (faceUV[f].z - faceUV[f].x) * (0.5 + x);\r\n                v = faceUV[f].y + (faceUV[f].w - faceUV[f].y) * (y - 0.5);\r\n                uvs.push(u, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - v : v);\r\n                tmp = x * Math.cos(ang) - y * Math.sin(ang);\r\n                y = x * Math.sin(ang) + y * Math.cos(ang);\r\n                x = tmp;\r\n                // colors\r\n                if (faceColors) {\r\n                    colors.push(faceColors[f].r, faceColors[f].g, faceColors[f].b, faceColors[f].a);\r\n                }\r\n            }\r\n\r\n            // indices from indexes\r\n            for (i = 0; i < fl - 2; i++) {\r\n                indices.push(indexes[0 + faceIdx], indexes[i + 2 + faceIdx], indexes[i + 1 + faceIdx]);\r\n            }\r\n            faceIdx += fl;\r\n        }\r\n    }\r\n\r\n    VertexData.ComputeNormals(positions, indices, normals);\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    const vertexData = new VertexData();\r\n    vertexData.positions = positions;\r\n    vertexData.indices = indices;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n    if (faceColors && flat) {\r\n        vertexData.colors = colors;\r\n    }\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a polyhedron mesh\r\n * * The parameter `type` (positive integer, max 14, default 0) sets the polyhedron type to build among the 15 embbeded types. Please refer to the type sheet in the tutorial to choose the wanted type\r\n * * The parameter `size` (positive float, default 1) sets the polygon size\r\n * * You can overwrite the `size` on each dimension bu using the parameters `sizeX`, `sizeY` or `sizeZ` (positive floats, default to `size` value)\r\n * * You can build other polyhedron types than the 15 embbeded ones by setting the parameter `custom` (`polyhedronObject`, default null). If you set the parameter `custom`, this overrides the parameter `type`\r\n * * A `polyhedronObject` is a formatted javascript object. You'll find a full file with pre-set polyhedra here : https://github.com/BabylonJS/Extensions/tree/master/Polyhedron\r\n * * You can set the color and the UV of each side of the polyhedron with the parameters `faceColors` (Color4, default `(1, 1, 1, 1)`) and faceUV (Vector4, default `(0, 0, 1, 1)`)\r\n * * To understand how to set `faceUV` or `faceColors`, please read this by considering the right number of faces of your polyhedron, instead of only 6 for the box : https://doc.babylonjs.com/how_to/createbox_per_face_textures_and_colors\r\n * * The parameter `flat` (boolean, default true). If set to false, it gives the polyhedron a single global face, so less vertices and shared normals. In this case, `faceColors` and `faceUV` are ignored\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.type\r\n * @param options.size\r\n * @param options.sizeX\r\n * @param options.sizeY\r\n * @param options.sizeZ\r\n * @param options.custom\r\n * @param options.faceUV\r\n * @param options.faceColors\r\n * @param options.flat\r\n * @param options.updatable\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param scene defines the hosting scene\r\n * @returns the polyhedron mesh\r\n * @see https://doc.babylonjs.com/how_to/polyhedra_shapes\r\n */\r\nexport function CreatePolyhedron(\r\n    name: string,\r\n    options: {\r\n        type?: number;\r\n        size?: number;\r\n        sizeX?: number;\r\n        sizeY?: number;\r\n        sizeZ?: number;\r\n        custom?: any;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        flat?: boolean;\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const polyhedron = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    polyhedron._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreatePolyhedronVertexData(options);\r\n\r\n    vertexData.applyToMesh(polyhedron, options.updatable);\r\n\r\n    return polyhedron;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the function directly from the module\r\n */\r\nexport const PolyhedronBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreatePolyhedron,\r\n};\r\n\r\nVertexData.CreatePolyhedron = CreatePolyhedronVertexData;\r\n\r\n(Mesh as any).CreatePolyhedron = (\r\n    name: string,\r\n    options: {\r\n        type?: number;\r\n        size?: number;\r\n        sizeX?: number;\r\n        sizeY?: number;\r\n        sizeZ?: number;\r\n        custom?: any;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n    },\r\n    scene: Scene\r\n): Mesh => {\r\n    return CreatePolyhedron(name, options, scene);\r\n};\r\n","import type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Matrix, Vector3, Vector4 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from \"../../Maths/math.color\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { CreateTiledPlaneVertexData } from \"./tiledPlaneBuilder\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData for a tiled box\r\n * @see https://doc.babylonjs.com/divingDeeper/mesh/creation/set/tiled_box\r\n * @param options an object used to set the following optional parameters for the tiled box, required but can be empty\r\n * * pattern sets the rotation or reflection pattern for the tiles,\r\n * * size of the box\r\n * * width of the box, overwrites size\r\n * * height of the box, overwrites size\r\n * * depth of the box, overwrites size\r\n * * tileSize sets the size of a tile\r\n * * tileWidth sets the tile width and overwrites tileSize\r\n * * tileHeight sets the tile width and overwrites tileSize\r\n * * faceUV an array of 6 Vector4 elements used to set different images to each box side\r\n * * faceColors an array of 6 Color3 elements used to set different colors to each box side\r\n * * alignHorizontal places whole tiles aligned to the center, left or right of a row\r\n * * alignVertical places whole tiles aligned to the center, left or right of a column\r\n * @param options.pattern\r\n * @param options.size\r\n * @param options.width\r\n * @param options.height\r\n * @param options.depth\r\n * @param options.tileSize\r\n * @param options.tileWidth\r\n * @param options.tileHeight\r\n * @param options.faceUV\r\n * @param options.faceColors\r\n * @param options.alignHorizontal\r\n * @param options.alignVertical\r\n * @param options.sideOrientation\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * @returns the VertexData of the TiledBox\r\n */\r\nexport function CreateTiledBoxVertexData(options: {\r\n    pattern?: number;\r\n    size?: number;\r\n    width?: number;\r\n    height?: number;\r\n    depth?: number;\r\n    tileSize?: number;\r\n    tileWidth?: number;\r\n    tileHeight?: number;\r\n    faceUV?: Vector4[];\r\n    faceColors?: Color4[];\r\n    alignHorizontal?: number;\r\n    alignVertical?: number;\r\n    sideOrientation?: number;\r\n}): VertexData {\r\n    const nbFaces = 6;\r\n\r\n    const faceUV: Vector4[] = options.faceUV || new Array<Vector4>(6);\r\n    const faceColors = options.faceColors;\r\n\r\n    const flipTile = options.pattern || Mesh.NO_FLIP;\r\n\r\n    const width = options.width || options.size || 1;\r\n    const height = options.height || options.size || 1;\r\n    const depth = options.depth || options.size || 1;\r\n    const tileWidth = options.tileWidth || options.tileSize || 1;\r\n    const tileHeight = options.tileHeight || options.tileSize || 1;\r\n    const alignH = options.alignHorizontal || 0;\r\n    const alignV = options.alignVertical || 0;\r\n\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    // default face colors and UV if undefined\r\n    for (let f = 0; f < nbFaces; f++) {\r\n        if (faceUV[f] === undefined) {\r\n            faceUV[f] = new Vector4(0, 0, 1, 1);\r\n        }\r\n        if (faceColors && faceColors[f] === undefined) {\r\n            faceColors[f] = new Color4(1, 1, 1, 1);\r\n        }\r\n    }\r\n\r\n    const halfWidth = width / 2;\r\n    const halfHeight = height / 2;\r\n    const halfDepth = depth / 2;\r\n\r\n    const faceVertexData: Array<VertexData> = [];\r\n\r\n    for (let f = 0; f < 2; f++) {\r\n        //front and back\r\n        faceVertexData[f] = CreateTiledPlaneVertexData({\r\n            pattern: flipTile,\r\n            tileWidth: tileWidth,\r\n            tileHeight: tileHeight,\r\n            width: width,\r\n            height: height,\r\n            alignVertical: alignV,\r\n            alignHorizontal: alignH,\r\n            sideOrientation: sideOrientation,\r\n        });\r\n    }\r\n\r\n    for (let f = 2; f < 4; f++) {\r\n        //sides\r\n        faceVertexData[f] = CreateTiledPlaneVertexData({\r\n            pattern: flipTile,\r\n            tileWidth: tileWidth,\r\n            tileHeight: tileHeight,\r\n            width: depth,\r\n            height: height,\r\n            alignVertical: alignV,\r\n            alignHorizontal: alignH,\r\n            sideOrientation: sideOrientation,\r\n        });\r\n    }\r\n\r\n    let baseAlignV = alignV;\r\n    if (alignV === Mesh.BOTTOM) {\r\n        baseAlignV = Mesh.TOP;\r\n    } else if (alignV === Mesh.TOP) {\r\n        baseAlignV = Mesh.BOTTOM;\r\n    }\r\n\r\n    for (let f = 4; f < 6; f++) {\r\n        //top and bottom\r\n        faceVertexData[f] = CreateTiledPlaneVertexData({\r\n            pattern: flipTile,\r\n            tileWidth: tileWidth,\r\n            tileHeight: tileHeight,\r\n            width: width,\r\n            height: depth,\r\n            alignVertical: baseAlignV,\r\n            alignHorizontal: alignH,\r\n            sideOrientation: sideOrientation,\r\n        });\r\n    }\r\n\r\n    let positions: Array<number> = [];\r\n    let normals: Array<number> = [];\r\n    let uvs: Array<number> = [];\r\n    let indices: Array<number> = [];\r\n    const colors: Array<number> = [];\r\n    const facePositions: Array<Array<Vector3>> = [];\r\n    const faceNormals: Array<Array<Vector3>> = [];\r\n\r\n    const newFaceUV: Array<Array<number>> = [];\r\n    let lu: number = 0;\r\n\r\n    let li: number = 0;\r\n\r\n    for (let f = 0; f < nbFaces; f++) {\r\n        const len = faceVertexData[f].positions!.length;\r\n        facePositions[f] = [];\r\n        faceNormals[f] = [];\r\n        for (let p = 0; p < len / 3; p++) {\r\n            facePositions[f].push(new Vector3(faceVertexData[f].positions![3 * p], faceVertexData[f].positions![3 * p + 1], faceVertexData[f].positions![3 * p + 2]));\r\n            faceNormals[f].push(new Vector3(faceVertexData[f].normals![3 * p], faceVertexData[f].normals![3 * p + 1], faceVertexData[f].normals![3 * p + 2]));\r\n        }\r\n        // uvs\r\n        lu = faceVertexData[f].uvs!.length;\r\n        newFaceUV[f] = [];\r\n        for (let i = 0; i < lu; i += 2) {\r\n            newFaceUV[f][i] = faceUV[f].x + (faceUV[f].z - faceUV[f].x) * faceVertexData[f].uvs![i];\r\n            newFaceUV[f][i + 1] = faceUV[f].y + (faceUV[f].w - faceUV[f].y) * faceVertexData[f].uvs![i + 1];\r\n\r\n            if (CompatibilityOptions.UseOpenGLOrientationForUV) {\r\n                newFaceUV[f][i + 1] = 1.0 - newFaceUV[f][i + 1];\r\n            }\r\n        }\r\n        uvs = uvs.concat(newFaceUV[f]);\r\n\r\n        indices = indices.concat(<Array<number>>faceVertexData[f].indices!.map((x: number) => x + li));\r\n        li += facePositions[f].length;\r\n        if (faceColors) {\r\n            for (let c = 0; c < 4; c++) {\r\n                colors.push(faceColors[f].r, faceColors[f].g, faceColors[f].b, faceColors[f].a);\r\n            }\r\n        }\r\n    }\r\n\r\n    const vec0 = new Vector3(0, 0, halfDepth);\r\n    const mtrx0 = Matrix.RotationY(Math.PI);\r\n    positions = facePositions[0]\r\n        .map((entry) => Vector3.TransformNormal(entry, mtrx0).add(vec0))\r\n        .map((entry) => [entry.x, entry.y, entry.z])\r\n        .reduce((accumulator: Array<number>, currentValue) => accumulator.concat(currentValue), []);\r\n    normals = faceNormals[0]\r\n        .map((entry) => Vector3.TransformNormal(entry, mtrx0))\r\n        .map((entry) => [entry.x, entry.y, entry.z])\r\n        .reduce((accumulator: Array<number>, currentValue) => accumulator.concat(currentValue), []);\r\n    positions = positions.concat(\r\n        facePositions[1]\r\n            .map((entry) => entry.subtract(vec0))\r\n            .map((entry) => [entry.x, entry.y, entry.z])\r\n            .reduce((accumulator: Array<number>, currentValue) => accumulator.concat(currentValue), [])\r\n    );\r\n    normals = normals.concat(faceNormals[1].map((entry) => [entry.x, entry.y, entry.z]).reduce((accumulator: Array<number>, currentValue) => accumulator.concat(currentValue), []));\r\n\r\n    const vec2 = new Vector3(halfWidth, 0, 0);\r\n    const mtrx2 = Matrix.RotationY(-Math.PI / 2);\r\n    positions = positions.concat(\r\n        facePositions[2]\r\n            .map((entry) => Vector3.TransformNormal(entry, mtrx2).add(vec2))\r\n            .map((entry) => [entry.x, entry.y, entry.z])\r\n            .reduce((accumulator: Array<number>, currentValue) => accumulator.concat(currentValue), [])\r\n    );\r\n    normals = normals.concat(\r\n        faceNormals[2]\r\n            .map((entry) => Vector3.TransformNormal(entry, mtrx2))\r\n            .map((entry) => [entry.x, entry.y, entry.z])\r\n            .reduce((accumulator: Array<number>, currentValue) => accumulator.concat(currentValue), [])\r\n    );\r\n    const mtrx3 = Matrix.RotationY(Math.PI / 2);\r\n    positions = positions.concat(\r\n        facePositions[3]\r\n            .map((entry) => Vector3.TransformNormal(entry, mtrx3).subtract(vec2))\r\n            .map((entry) => [entry.x, entry.y, entry.z])\r\n            .reduce((accumulator: Array<number>, currentValue) => accumulator.concat(currentValue), [])\r\n    );\r\n    normals = normals.concat(\r\n        faceNormals[3]\r\n            .map((entry) => Vector3.TransformNormal(entry, mtrx3))\r\n            .map((entry) => [entry.x, entry.y, entry.z])\r\n            .reduce((accumulator: Array<number>, currentValue) => accumulator.concat(currentValue), [])\r\n    );\r\n\r\n    const vec4 = new Vector3(0, halfHeight, 0);\r\n    const mtrx4 = Matrix.RotationX(Math.PI / 2);\r\n    positions = positions.concat(\r\n        facePositions[4]\r\n            .map((entry) => Vector3.TransformNormal(entry, mtrx4).add(vec4))\r\n            .map((entry) => [entry.x, entry.y, entry.z])\r\n            .reduce((accumulator: Array<number>, currentValue) => accumulator.concat(currentValue), [])\r\n    );\r\n    normals = normals.concat(\r\n        faceNormals[4]\r\n            .map((entry) => Vector3.TransformNormal(entry, mtrx4))\r\n            .map((entry) => [entry.x, entry.y, entry.z])\r\n            .reduce((accumulator: Array<number>, currentValue) => accumulator.concat(currentValue), [])\r\n    );\r\n    const mtrx5 = Matrix.RotationX(-Math.PI / 2);\r\n    positions = positions.concat(\r\n        facePositions[5]\r\n            .map((entry) => Vector3.TransformNormal(entry, mtrx5).subtract(vec4))\r\n            .map((entry) => [entry.x, entry.y, entry.z])\r\n            .reduce((accumulator: Array<number>, currentValue) => accumulator.concat(currentValue), [])\r\n    );\r\n    normals = normals.concat(\r\n        faceNormals[5]\r\n            .map((entry) => Vector3.TransformNormal(entry, mtrx5))\r\n            .map((entry) => [entry.x, entry.y, entry.z])\r\n            .reduce((accumulator: Array<number>, currentValue) => accumulator.concat(currentValue), [])\r\n    );\r\n\r\n    // sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    if (faceColors) {\r\n        const totalColors = sideOrientation === VertexData.DOUBLESIDE ? colors.concat(colors) : colors;\r\n        vertexData.colors = totalColors;\r\n    }\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a tiled box mesh\r\n * @see https://doc.babylonjs.com/divingDeeper/mesh/creation/set/tiled_box\r\n * @param name defines the name of the mesh\r\n * @param options an object used to set the following optional parameters for the tiled box, required but can be empty\r\n * * pattern sets the rotation or reflection pattern for the tiles,\r\n * * size of the box\r\n * * width of the box, overwrites size\r\n * * height of the box, overwrites size\r\n * * depth of the box, overwrites size\r\n * * tileSize sets the size of a tile\r\n * * tileWidth sets the tile width and overwrites tileSize\r\n * * tileHeight sets the tile width and overwrites tileSize\r\n * * faceUV an array of 6 Vector4 elements used to set different images to each box side\r\n * * faceColors an array of 6 Color3 elements used to set different colors to each box side\r\n * * alignHorizontal places whole tiles aligned to the center, left or right of a row\r\n * * alignVertical places whole tiles aligned to the center, left or right of a column\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * @param options.pattern\r\n * @param options.width\r\n * @param options.height\r\n * @param options.depth\r\n * @param options.tileSize\r\n * @param options.tileWidth\r\n * @param options.tileHeight\r\n * @param options.alignHorizontal\r\n * @param options.alignVertical\r\n * @param options.faceUV\r\n * @param options.faceColors\r\n * @param options.sideOrientation\r\n * @param options.updatable\r\n * @param scene defines the hosting scene\r\n * @returns the box mesh\r\n */\r\nexport function CreateTiledBox(\r\n    name: string,\r\n    options: {\r\n        pattern?: number;\r\n        width?: number;\r\n        height?: number;\r\n        depth?: number;\r\n        tileSize?: number;\r\n        tileWidth?: number;\r\n        tileHeight?: number;\r\n        alignHorizontal?: number;\r\n        alignVertical?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        sideOrientation?: number;\r\n        updatable?: boolean;\r\n    },\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const box = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    box._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateTiledBoxVertexData(options);\r\n\r\n    vertexData.applyToMesh(box, options.updatable);\r\n\r\n    return box;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use CreateTiledBox instead\r\n */\r\nexport const TiledBoxBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateTiledBox,\r\n};\r\n\r\nVertexData.CreateTiledBox = CreateTiledBoxVertexData;\r\n","import type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\n\r\n/**\r\n * Creates the VertexData for a tiled plane\r\n * @see https://doc.babylonjs.com/divingDeeper/mesh/creation/set/tiled_plane\r\n * @param options an object used to set the following optional parameters for the tiled plane, required but can be empty\r\n * * pattern a limited pattern arrangement depending on the number\r\n * * size of the box\r\n * * width of the box, overwrites size\r\n * * height of the box, overwrites size\r\n * * tileSize sets the width, height and depth of the tile to the value of size, optional default 1\r\n * * tileWidth sets the width (x direction) of the tile, overwrites the width set by size, optional, default size\r\n * * tileHeight sets the height (y direction) of the tile, overwrites the height set by size, optional, default size\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * alignHorizontal places whole tiles aligned to the center, left or right of a row\r\n * * alignVertical places whole tiles aligned to the center, left or right of a column\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.pattern\r\n * @param options.tileSize\r\n * @param options.tileWidth\r\n * @param options.tileHeight\r\n * @param options.size\r\n * @param options.width\r\n * @param options.height\r\n * @param options.alignHorizontal\r\n * @param options.alignVertical\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @returns the VertexData of the tiled plane\r\n */\r\nexport function CreateTiledPlaneVertexData(options: {\r\n    pattern?: number;\r\n    tileSize?: number;\r\n    tileWidth?: number;\r\n    tileHeight?: number;\r\n    size?: number;\r\n    width?: number;\r\n    height?: number;\r\n    alignHorizontal?: number;\r\n    alignVertical?: number;\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n}): VertexData {\r\n    const flipTile = options.pattern || Mesh.NO_FLIP;\r\n    const tileWidth = options.tileWidth || options.tileSize || 1;\r\n    const tileHeight = options.tileHeight || options.tileSize || 1;\r\n    const alignH = options.alignHorizontal || 0;\r\n    const alignV = options.alignVertical || 0;\r\n\r\n    const width = options.width || options.size || 1;\r\n    const tilesX = Math.floor(width / tileWidth);\r\n    let offsetX = width - tilesX * tileWidth;\r\n\r\n    const height = options.height || options.size || 1;\r\n    const tilesY = Math.floor(height / tileHeight);\r\n    let offsetY = height - tilesY * tileHeight;\r\n\r\n    const halfWidth = (tileWidth * tilesX) / 2;\r\n    const halfHeight = (tileHeight * tilesY) / 2;\r\n\r\n    let adjustX = 0;\r\n    let adjustY = 0;\r\n    let startX = 0;\r\n    let startY = 0;\r\n    let endX = 0;\r\n    let endY = 0;\r\n\r\n    //Part Tiles\r\n    if (offsetX > 0 || offsetY > 0) {\r\n        startX = -halfWidth;\r\n        startY = -halfHeight;\r\n        endX = halfWidth;\r\n        endY = halfHeight;\r\n\r\n        switch (alignH) {\r\n            case Mesh.CENTER:\r\n                offsetX /= 2;\r\n                startX -= offsetX;\r\n                endX += offsetX;\r\n                break;\r\n            case Mesh.LEFT:\r\n                endX += offsetX;\r\n                adjustX = -offsetX / 2;\r\n                break;\r\n            case Mesh.RIGHT:\r\n                startX -= offsetX;\r\n                adjustX = offsetX / 2;\r\n                break;\r\n        }\r\n\r\n        switch (alignV) {\r\n            case Mesh.CENTER:\r\n                offsetY /= 2;\r\n                startY -= offsetY;\r\n                endY += offsetY;\r\n                break;\r\n            case Mesh.BOTTOM:\r\n                endY += offsetY;\r\n                adjustY = -offsetY / 2;\r\n                break;\r\n            case Mesh.TOP:\r\n                startY -= offsetY;\r\n                adjustY = offsetY / 2;\r\n                break;\r\n        }\r\n    }\r\n\r\n    const positions = [];\r\n    const normals = [];\r\n    const uvBase = [];\r\n    uvBase[0] = [0, 0, 1, 0, 1, 1, 0, 1];\r\n    uvBase[1] = [0, 0, 1, 0, 1, 1, 0, 1];\r\n    if (flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.ROTATE_ROW) {\r\n        uvBase[1] = [1, 1, 0, 1, 0, 0, 1, 0];\r\n    }\r\n    if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.FLIP_ROW) {\r\n        uvBase[1] = [1, 0, 0, 0, 0, 1, 1, 1];\r\n    }\r\n    if (flipTile === Mesh.FLIP_N_ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n        uvBase[1] = [0, 1, 1, 1, 1, 0, 0, 0];\r\n    }\r\n    let uvs: Array<number> = [];\r\n    const colors = [];\r\n    const indices = [];\r\n    let index = 0;\r\n    for (let y = 0; y < tilesY; y++) {\r\n        for (let x = 0; x < tilesX; x++) {\r\n            positions.push(-halfWidth + x * tileWidth + adjustX, -halfHeight + y * tileHeight + adjustY, 0);\r\n            positions.push(-halfWidth + (x + 1) * tileWidth + adjustX, -halfHeight + y * tileHeight + adjustY, 0);\r\n            positions.push(-halfWidth + (x + 1) * tileWidth + adjustX, -halfHeight + (y + 1) * tileHeight + adjustY, 0);\r\n            positions.push(-halfWidth + x * tileWidth + adjustX, -halfHeight + (y + 1) * tileHeight + adjustY, 0);\r\n            indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\r\n            if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_TILE) {\r\n                uvs = uvs.concat(uvBase[((x % 2) + (y % 2)) % 2]);\r\n            } else if (flipTile === Mesh.FLIP_ROW || flipTile === Mesh.ROTATE_ROW || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n                uvs = uvs.concat(uvBase[y % 2]);\r\n            } else {\r\n                uvs = uvs.concat(uvBase[0]);\r\n            }\r\n            colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\r\n            normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\r\n            index += 4;\r\n        }\r\n    }\r\n\r\n    //Part Tiles\r\n    if (offsetX > 0 || offsetY > 0) {\r\n        const partialBottomRow: boolean = offsetY > 0 && (alignV === Mesh.CENTER || alignV === Mesh.TOP);\r\n        const partialTopRow: boolean = offsetY > 0 && (alignV === Mesh.CENTER || alignV === Mesh.BOTTOM);\r\n        const partialLeftCol: boolean = offsetX > 0 && (alignH === Mesh.CENTER || alignH === Mesh.RIGHT);\r\n        const partialRightCol: boolean = offsetX > 0 && (alignH === Mesh.CENTER || alignH === Mesh.LEFT);\r\n        let uvPart: Array<number> = [];\r\n        let a, b, c, d: number;\r\n\r\n        //corners\r\n        if (partialBottomRow && partialLeftCol) {\r\n            //bottom left corner\r\n            positions.push(startX + adjustX, startY + adjustY, 0);\r\n            positions.push(-halfWidth + adjustX, startY + adjustY, 0);\r\n            positions.push(-halfWidth + adjustX, startY + offsetY + adjustY, 0);\r\n            positions.push(startX + adjustX, startY + offsetY + adjustY, 0);\r\n            indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\r\n            index += 4;\r\n            a = 1 - offsetX / tileWidth;\r\n            b = 1 - offsetY / tileHeight;\r\n            c = 1;\r\n            d = 1;\r\n            uvPart = [a, b, c, b, c, d, a, d];\r\n            if (flipTile === Mesh.ROTATE_ROW) {\r\n                uvPart = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_ROW) {\r\n                uvPart = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n                uvPart = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\r\n            }\r\n            uvs = uvs.concat(uvPart);\r\n            colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\r\n            normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\r\n        }\r\n\r\n        if (partialBottomRow && partialRightCol) {\r\n            //bottom right corner\r\n            positions.push(halfWidth + adjustX, startY + adjustY, 0);\r\n            positions.push(endX + adjustX, startY + adjustY, 0);\r\n            positions.push(endX + adjustX, startY + offsetY + adjustY, 0);\r\n            positions.push(halfWidth + adjustX, startY + offsetY + adjustY, 0);\r\n            indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\r\n            index += 4;\r\n            a = 0;\r\n            b = 1 - offsetY / tileHeight;\r\n            c = offsetX / tileWidth;\r\n            d = 1;\r\n            uvPart = [a, b, c, b, c, d, a, d];\r\n            if (flipTile === Mesh.ROTATE_ROW || (flipTile === Mesh.ROTATE_TILE && tilesX % 2 === 0)) {\r\n                uvPart = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_ROW || (flipTile === Mesh.FLIP_TILE && tilesX % 2 === 0)) {\r\n                uvPart = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_N_ROTATE_ROW || (flipTile === Mesh.FLIP_N_ROTATE_TILE && tilesX % 2 === 0)) {\r\n                uvPart = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\r\n            }\r\n            uvs = uvs.concat(uvPart);\r\n            colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\r\n            normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\r\n        }\r\n\r\n        if (partialTopRow && partialLeftCol) {\r\n            //top left corner\r\n            positions.push(startX + adjustX, halfHeight + adjustY, 0);\r\n            positions.push(-halfWidth + adjustX, halfHeight + adjustY, 0);\r\n            positions.push(-halfWidth + adjustX, endY + adjustY, 0);\r\n            positions.push(startX + adjustX, endY + adjustY, 0);\r\n            indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\r\n            index += 4;\r\n            a = 1 - offsetX / tileWidth;\r\n            b = 0;\r\n            c = 1;\r\n            d = offsetY / tileHeight;\r\n            uvPart = [a, b, c, b, c, d, a, d];\r\n            if ((flipTile === Mesh.ROTATE_ROW && tilesY % 2 === 1) || (flipTile === Mesh.ROTATE_TILE && tilesY % 1 === 0)) {\r\n                uvPart = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\r\n            }\r\n            if ((flipTile === Mesh.FLIP_ROW && tilesY % 2 === 1) || (flipTile === Mesh.FLIP_TILE && tilesY % 2 === 0)) {\r\n                uvPart = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\r\n            }\r\n            if ((flipTile === Mesh.FLIP_N_ROTATE_ROW && tilesY % 2 === 1) || (flipTile === Mesh.FLIP_N_ROTATE_TILE && tilesY % 2 === 0)) {\r\n                uvPart = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\r\n            }\r\n            uvs = uvs.concat(uvPart);\r\n            colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\r\n            normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\r\n        }\r\n\r\n        if (partialTopRow && partialRightCol) {\r\n            //top right corner\r\n            positions.push(halfWidth + adjustX, halfHeight + adjustY, 0);\r\n            positions.push(endX + adjustX, halfHeight + adjustY, 0);\r\n            positions.push(endX + adjustX, endY + adjustY, 0);\r\n            positions.push(halfWidth + adjustX, endY + adjustY, 0);\r\n            indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\r\n            index += 4;\r\n            a = 0;\r\n            b = 0;\r\n            c = offsetX / tileWidth;\r\n            d = offsetY / tileHeight;\r\n            uvPart = [a, b, c, b, c, d, a, d];\r\n            if ((flipTile === Mesh.ROTATE_ROW && tilesY % 2 === 1) || (flipTile === Mesh.ROTATE_TILE && (tilesY + tilesX) % 2 === 1)) {\r\n                uvPart = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\r\n            }\r\n            if ((flipTile === Mesh.FLIP_ROW && tilesY % 2 === 1) || (flipTile === Mesh.FLIP_TILE && (tilesY + tilesX) % 2 === 1)) {\r\n                uvPart = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\r\n            }\r\n            if ((flipTile === Mesh.FLIP_N_ROTATE_ROW && tilesY % 2 === 1) || (flipTile === Mesh.FLIP_N_ROTATE_TILE && (tilesY + tilesX) % 2 === 1)) {\r\n                uvPart = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\r\n            }\r\n            uvs = uvs.concat(uvPart);\r\n            colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\r\n            normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\r\n        }\r\n\r\n        //part rows\r\n        if (partialBottomRow) {\r\n            const uvBaseBR = [];\r\n            a = 0;\r\n            b = 1 - offsetY / tileHeight;\r\n            c = 1;\r\n            d = 1;\r\n            uvBaseBR[0] = [a, b, c, b, c, d, a, d];\r\n            uvBaseBR[1] = [a, b, c, b, c, d, a, d];\r\n            if (flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.ROTATE_ROW) {\r\n                uvBaseBR[1] = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.FLIP_ROW) {\r\n                uvBaseBR[1] = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_N_ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n                uvBaseBR[1] = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\r\n            }\r\n            for (let x = 0; x < tilesX; x++) {\r\n                positions.push(-halfWidth + x * tileWidth + adjustX, startY + adjustY, 0);\r\n                positions.push(-halfWidth + (x + 1) * tileWidth + adjustX, startY + adjustY, 0);\r\n                positions.push(-halfWidth + (x + 1) * tileWidth + adjustX, startY + offsetY + adjustY, 0);\r\n                positions.push(-halfWidth + x * tileWidth + adjustX, startY + offsetY + adjustY, 0);\r\n                indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\r\n                index += 4;\r\n                if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_TILE) {\r\n                    uvs = uvs.concat(uvBaseBR[(x + 1) % 2]);\r\n                } else if (flipTile === Mesh.FLIP_ROW || flipTile === Mesh.ROTATE_ROW || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n                    uvs = uvs.concat(uvBaseBR[1]);\r\n                } else {\r\n                    uvs = uvs.concat(uvBaseBR[0]);\r\n                }\r\n                colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\r\n                normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\r\n            }\r\n        }\r\n\r\n        if (partialTopRow) {\r\n            const uvBaseTR = [];\r\n            a = 0;\r\n            b = 0;\r\n            c = 1;\r\n            d = offsetY / tileHeight;\r\n            uvBaseTR[0] = [a, b, c, b, c, d, a, d];\r\n            uvBaseTR[1] = [a, b, c, b, c, d, a, d];\r\n            if (flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.ROTATE_ROW) {\r\n                uvBaseTR[1] = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.FLIP_ROW) {\r\n                uvBaseTR[1] = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_N_ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n                uvBaseTR[1] = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\r\n            }\r\n            for (let x = 0; x < tilesX; x++) {\r\n                positions.push(-halfWidth + x * tileWidth + adjustX, endY - offsetY + adjustY, 0);\r\n                positions.push(-halfWidth + (x + 1) * tileWidth + adjustX, endY - offsetY + adjustY, 0);\r\n                positions.push(-halfWidth + (x + 1) * tileWidth + adjustX, endY + adjustY, 0);\r\n                positions.push(-halfWidth + x * tileWidth + adjustX, endY + adjustY, 0);\r\n                indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\r\n                index += 4;\r\n                if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_TILE) {\r\n                    uvs = uvs.concat(uvBaseTR[(x + tilesY) % 2]);\r\n                } else if (flipTile === Mesh.FLIP_ROW || flipTile === Mesh.ROTATE_ROW || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n                    uvs = uvs.concat(uvBaseTR[tilesY % 2]);\r\n                } else {\r\n                    uvs = uvs.concat(uvBaseTR[0]);\r\n                }\r\n                colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\r\n                normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\r\n            }\r\n        }\r\n\r\n        if (partialLeftCol) {\r\n            const uvBaseLC = [];\r\n            a = 1 - offsetX / tileWidth;\r\n            b = 0;\r\n            c = 1;\r\n            d = 1;\r\n            uvBaseLC[0] = [a, b, c, b, c, d, a, d];\r\n            uvBaseLC[1] = [a, b, c, b, c, d, a, d];\r\n            if (flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.ROTATE_ROW) {\r\n                uvBaseLC[1] = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.FLIP_ROW) {\r\n                uvBaseLC[1] = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_N_ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n                uvBaseLC[1] = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\r\n            }\r\n            for (let y = 0; y < tilesY; y++) {\r\n                positions.push(startX + adjustX, -halfHeight + y * tileHeight + adjustY, 0);\r\n                positions.push(startX + offsetX + adjustX, -halfHeight + y * tileHeight + adjustY, 0);\r\n                positions.push(startX + offsetX + adjustX, -halfHeight + (y + 1) * tileHeight + adjustY, 0);\r\n                positions.push(startX + adjustX, -halfHeight + (y + 1) * tileHeight + adjustY, 0);\r\n                indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\r\n                index += 4;\r\n                if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_TILE) {\r\n                    uvs = uvs.concat(uvBaseLC[(y + 1) % 2]);\r\n                } else if (flipTile === Mesh.FLIP_ROW || flipTile === Mesh.ROTATE_ROW || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n                    uvs = uvs.concat(uvBaseLC[y % 2]);\r\n                } else {\r\n                    uvs = uvs.concat(uvBaseLC[0]);\r\n                }\r\n                colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\r\n                normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\r\n            }\r\n        }\r\n\r\n        if (partialRightCol) {\r\n            const uvBaseRC = [];\r\n            a = 0;\r\n            b = 0;\r\n            c = offsetX / tileHeight;\r\n            d = 1;\r\n            uvBaseRC[0] = [a, b, c, b, c, d, a, d];\r\n            uvBaseRC[1] = [a, b, c, b, c, d, a, d];\r\n            if (flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.ROTATE_ROW) {\r\n                uvBaseRC[1] = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.FLIP_ROW) {\r\n                uvBaseRC[1] = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_N_ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n                uvBaseRC[1] = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\r\n            }\r\n            for (let y = 0; y < tilesY; y++) {\r\n                positions.push(endX - offsetX + adjustX, -halfHeight + y * tileHeight + adjustY, 0);\r\n                positions.push(endX + adjustX, -halfHeight + y * tileHeight + adjustY, 0);\r\n                positions.push(endX + adjustX, -halfHeight + (y + 1) * tileHeight + adjustY, 0);\r\n                positions.push(endX - offsetX + adjustX, -halfHeight + (y + 1) * tileHeight + adjustY, 0);\r\n                indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\r\n                index += 4;\r\n                if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_TILE) {\r\n                    uvs = uvs.concat(uvBaseRC[(y + tilesX) % 2]);\r\n                } else if (flipTile === Mesh.FLIP_ROW || flipTile === Mesh.ROTATE_ROW || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n                    uvs = uvs.concat(uvBaseRC[y % 2]);\r\n                } else {\r\n                    uvs = uvs.concat(uvBaseRC[0]);\r\n                }\r\n                colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\r\n                normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\r\n            }\r\n        }\r\n    }\r\n\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    // sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    const totalColors = sideOrientation === VertexData.DOUBLESIDE ? colors.concat(colors) : colors;\r\n    vertexData.colors = totalColors;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a tiled plane mesh\r\n * @see https://doc.babylonjs.com/divingDeeper/mesh/creation/set/tiled_plane\r\n * @param name defines the name of the mesh\r\n * @param options an object used to set the following optional parameters for the tiled plane, required but can be empty\r\n * * pattern a limited pattern arrangement depending on the number\r\n * * size of the box\r\n * * width of the box, overwrites size\r\n * * height of the box, overwrites size\r\n * * tileSize sets the width, height and depth of the tile to the value of size, optional default 1\r\n * * tileWidth sets the width (x direction) of the tile, overwrites the width set by size, optional, default size\r\n * * tileHeight sets the height (y direction) of the tile, overwrites the height set by size, optional, default size\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * alignHorizontal places whole tiles aligned to the center, left or right of a row\r\n * * alignVertical places whole tiles aligned to the center, left or right of a column\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.pattern\r\n * @param options.tileSize\r\n * @param options.tileWidth\r\n * @param options.tileHeight\r\n * @param options.size\r\n * @param options.width\r\n * @param options.height\r\n * @param options.alignHorizontal\r\n * @param options.alignVertical\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.updatable\r\n * @param scene defines the hosting scene\r\n * @returns the box mesh\r\n */\r\nexport function CreateTiledPlane(\r\n    name: string,\r\n    options: {\r\n        pattern?: number;\r\n        tileSize?: number;\r\n        tileWidth?: number;\r\n        tileHeight?: number;\r\n        size?: number;\r\n        width?: number;\r\n        height?: number;\r\n        alignHorizontal?: number;\r\n        alignVertical?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        updatable?: boolean;\r\n    },\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const plane = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    plane._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateTiledPlaneVertexData(options);\r\n\r\n    vertexData.applyToMesh(plane, options.updatable);\r\n\r\n    return plane;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use CreateTiledPlane instead\r\n */\r\nexport const TiledPlaneBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateTiledPlane,\r\n};\r\n\r\nVertexData.CreateTiledPlane = CreateTiledPlaneVertexData;\r\n","import type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData for a torus\r\n * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n * * diameter the diameter of the torus, optional default 1\r\n * * thickness the diameter of the tube forming the torus, optional default 0.5\r\n * * tessellation the number of prism sides, 3 for a triangular prism, optional, default 24\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.diameter\r\n * @param options.thickness\r\n * @param options.tessellation\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @returns the VertexData of the torus\r\n */\r\nexport function CreateTorusVertexData(options: { diameter?: number; thickness?: number; tessellation?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 }) {\r\n    const indices = [];\r\n    const positions = [];\r\n    const normals = [];\r\n    const uvs = [];\r\n\r\n    const diameter = options.diameter || 1;\r\n    const thickness = options.thickness || 0.5;\r\n    const tessellation = options.tessellation || 16;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    const stride = tessellation + 1;\r\n\r\n    for (let i = 0; i <= tessellation; i++) {\r\n        const u = i / tessellation;\r\n\r\n        const outerAngle = (i * Math.PI * 2.0) / tessellation - Math.PI / 2.0;\r\n\r\n        const transform = Matrix.Translation(diameter / 2.0, 0, 0).multiply(Matrix.RotationY(outerAngle));\r\n\r\n        for (let j = 0; j <= tessellation; j++) {\r\n            const v = 1 - j / tessellation;\r\n\r\n            const innerAngle = (j * Math.PI * 2.0) / tessellation + Math.PI;\r\n            const dx = Math.cos(innerAngle);\r\n            const dy = Math.sin(innerAngle);\r\n\r\n            // Create a vertex.\r\n            let normal = new Vector3(dx, dy, 0);\r\n            let position = normal.scale(thickness / 2);\r\n            const textureCoordinate = new Vector2(u, v);\r\n\r\n            position = Vector3.TransformCoordinates(position, transform);\r\n            normal = Vector3.TransformNormal(normal, transform);\r\n\r\n            positions.push(position.x, position.y, position.z);\r\n            normals.push(normal.x, normal.y, normal.z);\r\n            uvs.push(textureCoordinate.x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - textureCoordinate.y : textureCoordinate.y);\r\n\r\n            // And create indices for two triangles.\r\n            const nextI = (i + 1) % stride;\r\n            const nextJ = (j + 1) % stride;\r\n\r\n            indices.push(i * stride + j);\r\n            indices.push(i * stride + nextJ);\r\n            indices.push(nextI * stride + j);\r\n\r\n            indices.push(i * stride + nextJ);\r\n            indices.push(nextI * stride + nextJ);\r\n            indices.push(nextI * stride + j);\r\n        }\r\n    }\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a torus mesh\r\n * * The parameter `diameter` sets the diameter size (float) of the torus (default 1)\r\n * * The parameter `thickness` sets the diameter size of the tube of the torus (float, default 0.5)\r\n * * The parameter `tessellation` sets the number of torus sides (positive integer, default 16)\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.diameter\r\n * @param options.thickness\r\n * @param options.tessellation\r\n * @param options.updatable\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param scene defines the hosting scene\r\n * @returns the torus mesh\r\n * @see https://doc.babylonjs.com/how_to/set_shapes#torus\r\n */\r\nexport function CreateTorus(\r\n    name: string,\r\n    options: { diameter?: number; thickness?: number; tessellation?: number; updatable?: boolean; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 } = {},\r\n    scene?: Scene\r\n): Mesh {\r\n    const torus = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    torus._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateTorusVertexData(options);\r\n\r\n    vertexData.applyToMesh(torus, options.updatable);\r\n\r\n    return torus;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use CreateTorus instead\r\n */\r\nexport const TorusBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateTorus,\r\n};\r\n\r\nVertexData.CreateTorus = CreateTorusVertexData;\r\n\r\n(Mesh as any).CreateTorus = (name: string, diameter: number, thickness: number, tessellation: number, scene?: Scene, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        diameter,\r\n        thickness,\r\n        tessellation,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreateTorus(name, options, scene);\r\n};\r\n","import type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n// based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473\r\n/**\r\n * Creates the VertexData for a TorusKnot\r\n * @param options an object used to set the following optional parameters for the TorusKnot, required but can be empty\r\n * * radius the radius of the torus knot, optional, default 2\r\n * * tube the thickness of the tube, optional, default 0.5\r\n * * radialSegments the number of sides on each tube segments, optional, default 32\r\n * * tubularSegments the number of tubes to decompose the knot into, optional, default 32\r\n * * p the number of windings around the z axis, optional,  default 2\r\n * * q the number of windings around the x axis, optional,  default 3\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.radius\r\n * @param options.tube\r\n * @param options.radialSegments\r\n * @param options.tubularSegments\r\n * @param options.p\r\n * @param options.q\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @returns the VertexData of the Torus Knot\r\n */\r\nexport function CreateTorusKnotVertexData(options: {\r\n    radius?: number;\r\n    tube?: number;\r\n    radialSegments?: number;\r\n    tubularSegments?: number;\r\n    p?: number;\r\n    q?: number;\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n}): VertexData {\r\n    const indices = new Array<number>();\r\n    const positions = new Array<number>();\r\n    const normals = new Array<number>();\r\n    const uvs = new Array<number>();\r\n\r\n    const radius = options.radius || 2;\r\n    const tube = options.tube || 0.5;\r\n    const radialSegments = options.radialSegments || 32;\r\n    const tubularSegments = options.tubularSegments || 32;\r\n    const p = options.p || 2;\r\n    const q = options.q || 3;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    // Helper\r\n    const getPos = (angle: number) => {\r\n        const cu = Math.cos(angle);\r\n        const su = Math.sin(angle);\r\n        const quOverP = (q / p) * angle;\r\n        const cs = Math.cos(quOverP);\r\n\r\n        const tx = radius * (2 + cs) * 0.5 * cu;\r\n        const ty = radius * (2 + cs) * su * 0.5;\r\n        const tz = radius * Math.sin(quOverP) * 0.5;\r\n\r\n        return new Vector3(tx, ty, tz);\r\n    };\r\n\r\n    // Vertices\r\n    let i: number;\r\n    let j: number;\r\n    for (i = 0; i <= radialSegments; i++) {\r\n        const modI = i % radialSegments;\r\n        const u = (modI / radialSegments) * 2 * p * Math.PI;\r\n        const p1 = getPos(u);\r\n        const p2 = getPos(u + 0.01);\r\n        const tang = p2.subtract(p1);\r\n        let n = p2.add(p1);\r\n\r\n        const bitan = Vector3.Cross(tang, n);\r\n        n = Vector3.Cross(bitan, tang);\r\n\r\n        bitan.normalize();\r\n        n.normalize();\r\n\r\n        for (j = 0; j < tubularSegments; j++) {\r\n            const modJ = j % tubularSegments;\r\n            const v = (modJ / tubularSegments) * 2 * Math.PI;\r\n            const cx = -tube * Math.cos(v);\r\n            const cy = tube * Math.sin(v);\r\n\r\n            positions.push(p1.x + cx * n.x + cy * bitan.x);\r\n            positions.push(p1.y + cx * n.y + cy * bitan.y);\r\n            positions.push(p1.z + cx * n.z + cy * bitan.z);\r\n\r\n            uvs.push(i / radialSegments);\r\n            uvs.push(CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - j / tubularSegments : j / tubularSegments);\r\n        }\r\n    }\r\n\r\n    for (i = 0; i < radialSegments; i++) {\r\n        for (j = 0; j < tubularSegments; j++) {\r\n            const jNext = (j + 1) % tubularSegments;\r\n            const a = i * tubularSegments + j;\r\n            const b = (i + 1) * tubularSegments + j;\r\n            const c = (i + 1) * tubularSegments + jNext;\r\n            const d = i * tubularSegments + jNext;\r\n\r\n            indices.push(d);\r\n            indices.push(b);\r\n            indices.push(a);\r\n            indices.push(d);\r\n            indices.push(c);\r\n            indices.push(b);\r\n        }\r\n    }\r\n\r\n    // Normals\r\n    VertexData.ComputeNormals(positions, indices, normals);\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a torus knot mesh\r\n * * The parameter `radius` sets the global radius size (float) of the torus knot (default 2)\r\n * * The parameter `radialSegments` sets the number of sides on each tube segments (positive integer, default 32)\r\n * * The parameter `tubularSegments` sets the number of tubes to decompose the knot into (positive integer, default 32)\r\n * * The parameters `p` and `q` are the number of windings on each axis (positive integers, default 2 and 3)\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.radius\r\n * @param options.tube\r\n * @param options.radialSegments\r\n * @param options.tubularSegments\r\n * @param options.p\r\n * @param options.q\r\n * @param options.updatable\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param scene defines the hosting scene\r\n * @returns the torus knot mesh\r\n * @see  https://doc.babylonjs.com/how_to/set_shapes#torus-knot\r\n */\r\nexport function CreateTorusKnot(\r\n    name: string,\r\n    options: {\r\n        radius?: number;\r\n        tube?: number;\r\n        radialSegments?: number;\r\n        tubularSegments?: number;\r\n        p?: number;\r\n        q?: number;\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    } = {},\r\n    scene?: Scene\r\n): Mesh {\r\n    const torusKnot = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    torusKnot._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateTorusKnotVertexData(options);\r\n\r\n    vertexData.applyToMesh(torusKnot, options.updatable);\r\n\r\n    return torusKnot;\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use CreateTorusKnot instead\r\n */\r\nexport const TorusKnotBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateTorusKnot,\r\n};\r\n\r\nVertexData.CreateTorusKnot = CreateTorusKnotVertexData;\r\n\r\n(Mesh as any).CreateTorusKnot = (\r\n    name: string,\r\n    radius: number,\r\n    tube: number,\r\n    radialSegments: number,\r\n    tubularSegments: number,\r\n    p: number,\r\n    q: number,\r\n    scene?: Scene,\r\n    updatable?: boolean,\r\n    sideOrientation?: number\r\n): Mesh => {\r\n    const options = {\r\n        radius,\r\n        tube,\r\n        radialSegments,\r\n        tubularSegments,\r\n        p,\r\n        q,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreateTorusKnot(name, options, scene);\r\n};\r\n","import type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Vector3, TmpVectors, Matrix } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { CreateRibbon } from \"./ribbonBuilder\";\r\nimport { Path3D } from \"../../Maths/math.path\";\r\n\r\n/**\r\n * Creates a tube mesh.\r\n * The tube is a parametric shape. It has no predefined shape. Its final shape will depend on the input parameters\r\n * * The parameter `path` is a required array of successive Vector3. It is the curve used as the axis of the tube\r\n * * The parameter `radius` (positive float, default 1) sets the tube radius size\r\n * * The parameter `tessellation` (positive float, default 64) is the number of sides on the tubular surface\r\n * * The parameter `radiusFunction` (javascript function, default null) is a vanilla javascript function. If it is not null, it overrides the parameter `radius`\r\n * * This function is called on each point of the tube path and is passed the index `i` of the i-th point and the distance of this point from the first point of the path. It must return a radius value (positive float)\r\n * * The parameter `arc` (positive float, maximum 1, default 1) is the ratio to apply to the tube circumference : 2 x PI x arc\r\n * * The parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\r\n * * The optional parameter `instance` is an instance of an existing Tube object to be updated with the passed `pathArray` parameter. The `path`Array HAS to have the SAME number of points as the previous one: https://doc.babylonjs.com/how_to/how_to_dynamically_morph_a_mesh#tube\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created. The NUMBER of points CAN'T CHANGE, only their positions.\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.path\r\n * @param options.radius\r\n * @param options.tessellation\r\n * @param options.radiusFunction\r\n * @param options.cap\r\n * @param options.arc\r\n * @param options.updatable\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.instance\r\n * @param options.invertUV\r\n * @param scene defines the hosting scene\r\n * @returns the tube mesh\r\n * @see https://doc.babylonjs.com/how_to/parametric_shapes\r\n * @see https://doc.babylonjs.com/how_to/set_shapes#tube\r\n */\r\nexport function CreateTube(\r\n    name: string,\r\n    options: {\r\n        path: Vector3[];\r\n        radius?: number;\r\n        tessellation?: number;\r\n        radiusFunction?: { (i: number, distance: number): number };\r\n        cap?: number;\r\n        arc?: number;\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        instance?: Mesh;\r\n        invertUV?: boolean;\r\n    },\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const path = options.path;\r\n    let instance = options.instance;\r\n    let radius = 1.0;\r\n\r\n    if (options.radius !== undefined) {\r\n        radius = options.radius;\r\n    } else if (instance) {\r\n        radius = instance._creationDataStorage!.radius;\r\n    }\r\n\r\n    const tessellation = options.tessellation || 64 | 0;\r\n    const radiusFunction = options.radiusFunction || null;\r\n    let cap = options.cap || Mesh.NO_CAP;\r\n    const invertUV = options.invertUV || false;\r\n    const updatable = options.updatable;\r\n    const sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    options.arc = options.arc && (options.arc <= 0.0 || options.arc > 1.0) ? 1.0 : options.arc || 1.0;\r\n\r\n    // tube geometry\r\n    const tubePathArray = (\r\n        path: Vector3[],\r\n        path3D: Path3D,\r\n        circlePaths: Vector3[][],\r\n        radius: number,\r\n        tessellation: number,\r\n        radiusFunction: Nullable<{ (i: number, distance: number): number }>,\r\n        cap: number,\r\n        arc: number\r\n    ) => {\r\n        const tangents = path3D.getTangents();\r\n        const normals = path3D.getNormals();\r\n        const distances = path3D.getDistances();\r\n        const pi2 = Math.PI * 2;\r\n        const step = (pi2 / tessellation) * arc;\r\n        const returnRadius: { (i: number, distance: number): number } = () => radius;\r\n        const radiusFunctionFinal: { (i: number, distance: number): number } = radiusFunction || returnRadius;\r\n\r\n        let circlePath: Vector3[];\r\n        let rad: number;\r\n        let normal: Vector3;\r\n        let rotated: Vector3;\r\n        const rotationMatrix: Matrix = TmpVectors.Matrix[0];\r\n        let index = cap === Mesh.NO_CAP || cap === Mesh.CAP_END ? 0 : 2;\r\n        for (let i = 0; i < path.length; i++) {\r\n            rad = radiusFunctionFinal(i, distances[i]); // current radius\r\n            circlePath = Array<Vector3>(); // current circle array\r\n            normal = normals[i]; // current normal\r\n            for (let t = 0; t < tessellation; t++) {\r\n                Matrix.RotationAxisToRef(tangents[i], step * t, rotationMatrix);\r\n                rotated = circlePath[t] ? circlePath[t] : Vector3.Zero();\r\n                Vector3.TransformCoordinatesToRef(normal, rotationMatrix, rotated);\r\n                rotated.scaleInPlace(rad).addInPlace(path[i]);\r\n                circlePath[t] = rotated;\r\n            }\r\n            circlePaths[index] = circlePath;\r\n            index++;\r\n        }\r\n        // cap\r\n        const capPath = (nbPoints: number, pathIndex: number): Array<Vector3> => {\r\n            const pointCap = Array<Vector3>();\r\n            for (let i = 0; i < nbPoints; i++) {\r\n                pointCap.push(path[pathIndex]);\r\n            }\r\n            return pointCap;\r\n        };\r\n        switch (cap) {\r\n            case Mesh.NO_CAP:\r\n                break;\r\n            case Mesh.CAP_START:\r\n                circlePaths[0] = capPath(tessellation, 0);\r\n                circlePaths[1] = circlePaths[2].slice(0);\r\n                break;\r\n            case Mesh.CAP_END:\r\n                circlePaths[index] = circlePaths[index - 1].slice(0);\r\n                circlePaths[index + 1] = capPath(tessellation, path.length - 1);\r\n                break;\r\n            case Mesh.CAP_ALL:\r\n                circlePaths[0] = capPath(tessellation, 0);\r\n                circlePaths[1] = circlePaths[2].slice(0);\r\n                circlePaths[index] = circlePaths[index - 1].slice(0);\r\n                circlePaths[index + 1] = capPath(tessellation, path.length - 1);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return circlePaths;\r\n    };\r\n\r\n    let path3D;\r\n    let pathArray;\r\n    if (instance) {\r\n        // tube update\r\n        const storage = instance._creationDataStorage!;\r\n        const arc = options.arc || storage.arc;\r\n        path3D = storage.path3D.update(path);\r\n        pathArray = tubePathArray(path, path3D, storage.pathArray, radius, storage.tessellation, radiusFunction, storage.cap, arc);\r\n        instance = CreateRibbon(\"\", { pathArray: pathArray, instance: instance });\r\n        // Update mode, no need to recreate the storage.\r\n        storage.path3D = path3D;\r\n        storage.pathArray = pathArray;\r\n        storage.arc = arc;\r\n        storage.radius = radius;\r\n\r\n        return instance;\r\n    }\r\n\r\n    // tube creation\r\n    path3D = <any>new Path3D(path);\r\n    const newPathArray = new Array<Array<Vector3>>();\r\n    cap = cap < 0 || cap > 3 ? 0 : cap;\r\n    pathArray = tubePathArray(path, path3D, newPathArray, radius, tessellation, radiusFunction, cap, options.arc);\r\n    const tube = CreateRibbon(\r\n        name,\r\n        {\r\n            pathArray: pathArray,\r\n            closePath: true,\r\n            closeArray: false,\r\n            updatable: updatable,\r\n            sideOrientation: sideOrientation,\r\n            invertUV: invertUV,\r\n            frontUVs: options.frontUVs,\r\n            backUVs: options.backUVs,\r\n        },\r\n        scene\r\n    );\r\n    tube._creationDataStorage!.pathArray = pathArray;\r\n    tube._creationDataStorage!.path3D = path3D;\r\n    tube._creationDataStorage!.tessellation = tessellation;\r\n    tube._creationDataStorage!.cap = cap;\r\n    tube._creationDataStorage!.arc = options.arc;\r\n    tube._creationDataStorage!.radius = radius;\r\n\r\n    return tube;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use CreateTube directly\r\n */\r\nexport const TubeBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateTube,\r\n};\r\n\r\n(Mesh as any).CreateTube = (\r\n    name: string,\r\n    path: Vector3[],\r\n    radius: number,\r\n    tessellation: number,\r\n    radiusFunction: { (i: number, distance: number): number },\r\n    cap: number,\r\n    scene: Scene,\r\n    updatable?: boolean,\r\n    sideOrientation?: number,\r\n    instance?: Mesh\r\n): Mesh => {\r\n    const options = {\r\n        path: path,\r\n        radius: radius,\r\n        tessellation: tessellation,\r\n        radiusFunction: radiusFunction,\r\n        arc: 1,\r\n        cap: cap,\r\n        updatable: updatable,\r\n        sideOrientation: sideOrientation,\r\n        instance: instance,\r\n    };\r\n    return CreateTube(name, options, scene);\r\n};\r\n","import { Logger } from \"../Misc/logger\";\r\nimport { Vector3 } from \"./math.vector\";\r\n\r\n/**\r\n * Class representing an isovector a vector containing 2 INTEGER coordinates\r\n * x axis is horizontal\r\n * y axis is 60 deg counter clockwise from positive y axis\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _IsoVector {\r\n    /**\r\n     * Creates a new isovector from the given x and y coordinates\r\n     * @param x defines the first coordinate, must be an integer\r\n     * @param y defines the second coordinate, must be an integer\r\n     */\r\n    constructor(\r\n        /** defines the first coordinate */\r\n        public x: number = 0,\r\n        /** defines the second coordinate */\r\n        public y: number = 0\r\n    ) {\r\n        if (x !== Math.floor(x)) {\r\n            x === Math.floor(x);\r\n            Logger.Warn(\"x is not an integer, floor(x) used\");\r\n        }\r\n        if (y !== Math.floor(y)) {\r\n            y === Math.floor(y);\r\n            Logger.Warn(\"y is not an integer, floor(y) used\");\r\n        }\r\n    }\r\n\r\n    // Operators\r\n\r\n    /**\r\n     * Gets a new IsoVector copied from the IsoVector\r\n     * @returns a new IsoVector\r\n     */\r\n    public clone(): _IsoVector {\r\n        return new _IsoVector(this.x, this.y);\r\n    }\r\n\r\n    /**\r\n     * Rotates one IsoVector 60 degrees counter clockwise about another\r\n     * Please note that this is an in place operation\r\n     * @param other an IsoVector a center of rotation\r\n     * @returns the rotated IsoVector\r\n     */\r\n    public rotate60About(other: _IsoVector) {\r\n        //other IsoVector\r\n        const x: number = this.x;\r\n        this.x = other.x + other.y - this.y;\r\n        this.y = x + this.y - other.x;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotates one IsoVector 60 degrees clockwise about another\r\n     * Please note that this is an in place operation\r\n     * @param other an IsoVector as center of rotation\r\n     * @returns the rotated IsoVector\r\n     */\r\n    public rotateNeg60About(other: _IsoVector) {\r\n        const x = this.x;\r\n        this.x = x + this.y - other.y;\r\n        this.y = other.x + other.y - x;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * For an equilateral triangle OAB with O at isovector (0, 0) and A at isovector (m, n)\r\n     * Rotates one IsoVector 120 degrees counter clockwise about the center of the triangle\r\n     * Please note that this is an in place operation\r\n     * @param m integer a measure a Primary triangle of order (m, n) m > n\r\n     * @param n >= 0 integer a measure for a Primary triangle of order (m, n)\r\n     * @returns the rotated IsoVector\r\n     */\r\n    public rotate120(m: number, n: number) {\r\n        //m, n integers\r\n        if (m !== Math.floor(m)) {\r\n            m === Math.floor(m);\r\n            Logger.Warn(\"m not an integer only floor(m) used\");\r\n        }\r\n        if (n !== Math.floor(n)) {\r\n            n === Math.floor(n);\r\n            Logger.Warn(\"n not an integer only floor(n) used\");\r\n        }\r\n        const x = this.x;\r\n        this.x = m - x - this.y;\r\n        this.y = n + x;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * For an equilateral triangle OAB with O at isovector (0, 0) and A at isovector (m, n)\r\n     * Rotates one IsoVector 120 degrees clockwise about the center of the triangle\r\n     * Please note that this is an in place operation\r\n     * @param m integer a measure a Primary triangle of order (m, n) m > n\r\n     * @param n >= 0 integer a measure for a Primary triangle of order (m, n)\r\n     * @returns the rotated IsoVector\r\n     */\r\n    public rotateNeg120(m: number, n: number) {\r\n        //m, n integers\r\n        if (m !== Math.floor(m)) {\r\n            m === Math.floor(m);\r\n            Logger.Warn(\"m is not an integer, floor(m) used\");\r\n        }\r\n        if (n !== Math.floor(n)) {\r\n            n === Math.floor(n);\r\n            Logger.Warn(\"n is not an integer,   floor(n) used\");\r\n        }\r\n        const x = this.x;\r\n        this.x = this.y - n;\r\n        this.y = m + n - x - this.y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Transforms an IsoVector to one in Cartesian 3D space based on an isovector\r\n     * @param origin an IsoVector\r\n     * @param isoGridSize\r\n     * @returns Point as a Vector3\r\n     */\r\n    public toCartesianOrigin(origin: _IsoVector, isoGridSize: number) {\r\n        const point = Vector3.Zero();\r\n        point.x = origin.x + 2 * this.x * isoGridSize + this.y * isoGridSize;\r\n        point.y = origin.y + Math.sqrt(3) * this.y * isoGridSize;\r\n        return point;\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Gets a new IsoVector(0, 0)\r\n     * @returns a new IsoVector\r\n     */\r\n    public static Zero(): _IsoVector {\r\n        return new _IsoVector(0, 0);\r\n    }\r\n}\r\n","import { Vector3, TmpVectors } from \"../Maths/math.vector\";\r\nimport { Scalar } from \"../Maths/math.scalar\";\r\nimport { PHI } from \"../Maths/math.constants\";\r\nimport { _IsoVector } from \"../Maths/math.isovector\";\r\n\r\n/**\r\n * Class representing data for one face OAB of an equilateral icosahedron\r\n * When O is the isovector (0, 0), A is isovector (m, n)\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _PrimaryIsoTriangle {\r\n    //properties\r\n    public m: number;\r\n    public n: number;\r\n    public cartesian: Vector3[] = [];\r\n    public vertices: _IsoVector[] = [];\r\n    public max: number[] = [];\r\n    public min: number[] = [];\r\n    public vecToidx: { [key: string]: number };\r\n    public vertByDist: { [key: string]: number[] };\r\n    public closestTo: number[][] = [];\r\n\r\n    public innerFacets: string[][] = [];\r\n    public isoVecsABOB: _IsoVector[][] = [];\r\n    public isoVecsOBOA: _IsoVector[][] = [];\r\n    public isoVecsBAOA: _IsoVector[][] = [];\r\n    public vertexTypes: number[][] = [];\r\n\r\n    public coau: number;\r\n    public cobu: number;\r\n    public coav: number;\r\n    public cobv: number;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public IDATA: PolyhedronData = new PolyhedronData(\r\n        \"icosahedron\",\r\n        \"Regular\",\r\n        [\r\n            [0, PHI, -1],\r\n            [-PHI, 1, 0],\r\n            [-1, 0, -PHI],\r\n            [1, 0, -PHI],\r\n            [PHI, 1, 0],\r\n            [0, PHI, 1],\r\n            [-1, 0, PHI],\r\n            [-PHI, -1, 0],\r\n            [0, -PHI, -1],\r\n            [PHI, -1, 0],\r\n            [1, 0, PHI],\r\n            [0, -PHI, 1],\r\n        ],\r\n        [\r\n            [0, 2, 1],\r\n            [0, 3, 2],\r\n            [0, 4, 3],\r\n            [0, 5, 4],\r\n            [0, 1, 5],\r\n            [7, 6, 1],\r\n            [8, 7, 2],\r\n            [9, 8, 3],\r\n            [10, 9, 4],\r\n            [6, 10, 5],\r\n            [2, 7, 1],\r\n            [3, 8, 2],\r\n            [4, 9, 3],\r\n            [5, 10, 4],\r\n            [1, 6, 5],\r\n            [11, 6, 7],\r\n            [11, 7, 8],\r\n            [11, 8, 9],\r\n            [11, 9, 10],\r\n            [11, 10, 6],\r\n        ]\r\n    );\r\n\r\n    /**\r\n     * Creates the PrimaryIsoTriangle Triangle OAB\r\n     * @param m an integer\r\n     * @param n an integer\r\n     */\r\n\r\n    //operators\r\n    public setIndices() {\r\n        let indexCount = 12; // 12 vertices already assigned\r\n        const vecToidx: { [key: string]: number } = {}; //maps iso-vectors to indexCount;\r\n        const m = this.m;\r\n        const n = this.n;\r\n        let g = m; // hcf of m, n when n != 0\r\n        let m1 = 1;\r\n        let n1 = 0;\r\n        if (n !== 0) {\r\n            g = Scalar.HCF(m, n);\r\n        }\r\n        m1 = m / g;\r\n        n1 = n / g;\r\n\r\n        let fr: number | string; //face to the right of current face\r\n        let rot: number | string; //rotation about which vertex for fr\r\n        let O: number;\r\n        let A: number;\r\n        let B: number;\r\n        const oVec: _IsoVector = _IsoVector.Zero();\r\n        const aVec = new _IsoVector(m, n);\r\n        const bVec = new _IsoVector(-n, m + n);\r\n        const oaVec: _IsoVector = _IsoVector.Zero();\r\n        const abVec: _IsoVector = _IsoVector.Zero();\r\n        const obVec: _IsoVector = _IsoVector.Zero();\r\n        let verts: number[] = [];\r\n        let idx: string;\r\n        let idxR: string;\r\n        let isoId: string;\r\n        let isoIdR: string;\r\n\r\n        const closestTo: number[][] = [];\r\n        const vDist = this.vertByDist;\r\n\r\n        const matchIdx = (f: number, fr: number, isoId: string, isoIdR: string) => {\r\n            idx = f + \"|\" + isoId;\r\n            idxR = fr + \"|\" + isoIdR;\r\n            if (!(idx in vecToidx || idxR in vecToidx)) {\r\n                vecToidx[idx] = indexCount;\r\n                vecToidx[idxR] = indexCount;\r\n                indexCount++;\r\n            } else if (idx in vecToidx && !(idxR in vecToidx)) {\r\n                vecToidx[idxR] = vecToidx[idx];\r\n            } else if (idxR in vecToidx && !(idx in vecToidx)) {\r\n                vecToidx[idx] = vecToidx[idxR];\r\n            }\r\n            if (vDist[isoId][0] > 2) {\r\n                closestTo[vecToidx[idx]] = [-vDist[isoId][0], vDist[isoId][1], vecToidx[idx]];\r\n            } else {\r\n                closestTo[vecToidx[idx]] = [verts[vDist[isoId][0]], vDist[isoId][1], vecToidx[idx]];\r\n            }\r\n        };\r\n\r\n        this.IDATA.edgematch = [\r\n            [1, \"B\"],\r\n            [2, \"B\"],\r\n            [3, \"B\"],\r\n            [4, \"B\"],\r\n            [0, \"B\"],\r\n            [10, \"O\", 14, \"A\"],\r\n            [11, \"O\", 10, \"A\"],\r\n            [12, \"O\", 11, \"A\"],\r\n            [13, \"O\", 12, \"A\"],\r\n            [14, \"O\", 13, \"A\"],\r\n            [0, \"O\"],\r\n            [1, \"O\"],\r\n            [2, \"O\"],\r\n            [3, \"O\"],\r\n            [4, \"O\"],\r\n            [19, \"B\", 5, \"A\"],\r\n            [15, \"B\", 6, \"A\"],\r\n            [16, \"B\", 7, \"A\"],\r\n            [17, \"B\", 8, \"A\"],\r\n            [18, \"B\", 9, \"A\"],\r\n        ];\r\n\r\n        /***edges AB to OB***** rotation about B*/\r\n        for (let f = 0; f < 20; f++) {\r\n            //f current face\r\n\r\n            verts = this.IDATA.face[f];\r\n            O = verts[2];\r\n            A = verts[1];\r\n            B = verts[0];\r\n\r\n            isoId = oVec.x + \"|\" + oVec.y;\r\n            idx = f + \"|\" + isoId;\r\n            if (!(idx in vecToidx)) {\r\n                vecToidx[idx] = O;\r\n                closestTo[O] = [verts[vDist[isoId][0]], vDist[isoId][1]];\r\n            }\r\n\r\n            isoId = aVec.x + \"|\" + aVec.y;\r\n            idx = f + \"|\" + isoId;\r\n            if (!(idx in vecToidx)) {\r\n                vecToidx[idx] = A;\r\n                closestTo[A] = [verts[vDist[isoId][0]], vDist[isoId][1]];\r\n            }\r\n\r\n            isoId = bVec.x + \"|\" + bVec.y;\r\n            idx = f + \"|\" + isoId;\r\n            if (!(idx in vecToidx)) {\r\n                vecToidx[idx] = B;\r\n                closestTo[B] = [verts[vDist[isoId][0]], vDist[isoId][1]];\r\n            }\r\n\r\n            //for edge vertices\r\n            fr = <number>this.IDATA.edgematch[f][0];\r\n            rot = <string>this.IDATA.edgematch[f][1];\r\n            if (rot === \"B\") {\r\n                for (let i = 1; i < g; i++) {\r\n                    abVec.x = m - i * (m1 + n1);\r\n                    abVec.y = n + i * m1;\r\n                    obVec.x = -i * n1;\r\n                    obVec.y = i * (m1 + n1);\r\n                    isoId = abVec.x + \"|\" + abVec.y;\r\n                    isoIdR = obVec.x + \"|\" + obVec.y;\r\n                    matchIdx(f, fr, isoId, isoIdR);\r\n                }\r\n            }\r\n\r\n            if (rot === \"O\") {\r\n                for (let i = 1; i < g; i++) {\r\n                    obVec.x = -i * n1;\r\n                    obVec.y = i * (m1 + n1);\r\n                    oaVec.x = i * m1;\r\n                    oaVec.y = i * n1;\r\n                    isoId = obVec.x + \"|\" + obVec.y;\r\n                    isoIdR = oaVec.x + \"|\" + oaVec.y;\r\n                    matchIdx(f, fr, isoId, isoIdR);\r\n                }\r\n            }\r\n\r\n            fr = <number>this.IDATA.edgematch[f][2];\r\n            rot = <string>this.IDATA.edgematch[f][3];\r\n            if (rot && rot === \"A\") {\r\n                for (let i = 1; i < g; i++) {\r\n                    oaVec.x = i * m1;\r\n                    oaVec.y = i * n1;\r\n                    abVec.x = m - (g - i) * (m1 + n1); //reversed for BA\r\n                    abVec.y = n + (g - i) * m1; //reversed for BA\r\n                    isoId = oaVec.x + \"|\" + oaVec.y;\r\n                    isoIdR = abVec.x + \"|\" + abVec.y;\r\n                    matchIdx(f, fr, isoId, isoIdR);\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < this.vertices.length; i++) {\r\n                isoId = this.vertices[i].x + \"|\" + this.vertices[i].y;\r\n                idx = f + \"|\" + isoId;\r\n                if (!(idx in vecToidx)) {\r\n                    vecToidx[idx] = indexCount++;\r\n                    if (vDist[isoId][0] > 2) {\r\n                        closestTo[vecToidx[idx]] = [-vDist[isoId][0], vDist[isoId][1], vecToidx[idx]];\r\n                    } else {\r\n                        closestTo[vecToidx[idx]] = [verts[vDist[isoId][0]], vDist[isoId][1], vecToidx[idx]];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.closestTo = closestTo;\r\n        this.vecToidx = vecToidx;\r\n    }\r\n\r\n    public calcCoeffs() {\r\n        const m = this.m;\r\n        const n = this.n;\r\n        const thirdR3 = Math.sqrt(3) / 3;\r\n\r\n        const LSQD = m * m + n * n + m * n;\r\n\r\n        this.coau = (m + n) / LSQD;\r\n        this.cobu = -n / LSQD;\r\n        this.coav = (-thirdR3 * (m - n)) / LSQD;\r\n        this.cobv = (thirdR3 * (2 * m + n)) / LSQD;\r\n    }\r\n\r\n    public createInnerFacets() {\r\n        const m = this.m;\r\n        const n = this.n;\r\n        for (let y = 0; y < n + m + 1; y++) {\r\n            for (let x = this.min[y]; x < this.max[y] + 1; x++) {\r\n                if (x < this.max[y] && x < this.max[y + 1] + 1) {\r\n                    this.innerFacets.push([\"|\" + x + \"|\" + y, \"|\" + x + \"|\" + (y + 1), \"|\" + (x + 1) + \"|\" + y]);\r\n                }\r\n                if (y > 0 && x < this.max[y - 1] && x + 1 < this.max[y] + 1) {\r\n                    this.innerFacets.push([\"|\" + x + \"|\" + y, \"|\" + (x + 1) + \"|\" + y, \"|\" + (x + 1) + \"|\" + (y - 1)]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public edgeVecsABOB() {\r\n        const m = this.m;\r\n        const n = this.n;\r\n\r\n        const B = new _IsoVector(-n, m + n);\r\n\r\n        for (let y = 1; y < m + n; y++) {\r\n            const point = new _IsoVector(this.min[y], y);\r\n            const prev = new _IsoVector(this.min[y - 1], y - 1);\r\n            const next = new _IsoVector(this.min[y + 1], y + 1);\r\n            const pointR = point.clone();\r\n            const prevR = prev.clone();\r\n            const nextR = next.clone();\r\n\r\n            pointR.rotate60About(B);\r\n            prevR.rotate60About(B);\r\n            nextR.rotate60About(B);\r\n\r\n            const maxPoint = new _IsoVector(this.max[pointR.y], pointR.y);\r\n            const maxPrev = new _IsoVector(this.max[pointR.y - 1], pointR.y - 1);\r\n            const maxLeftPrev = new _IsoVector(this.max[pointR.y - 1] - 1, pointR.y - 1);\r\n\r\n            if (pointR.x !== maxPoint.x || pointR.y !== maxPoint.y) {\r\n                if (pointR.x !== maxPrev.x) {\r\n                    // type2\r\n                    //up\r\n                    this.vertexTypes.push([1, 0, 0]);\r\n                    this.isoVecsABOB.push([point, maxPrev, maxLeftPrev]);\r\n                    //down\r\n                    this.vertexTypes.push([1, 0, 0]);\r\n                    this.isoVecsABOB.push([point, maxLeftPrev, maxPoint]);\r\n                } else if (pointR.y === nextR.y) {\r\n                    // type1\r\n                    //up\r\n                    this.vertexTypes.push([1, 1, 0]);\r\n                    this.isoVecsABOB.push([point, prev, maxPrev]);\r\n                    //down\r\n                    this.vertexTypes.push([1, 0, 1]);\r\n                    this.isoVecsABOB.push([point, maxPrev, next]);\r\n                } else {\r\n                    // type 0\r\n                    //up\r\n                    this.vertexTypes.push([1, 1, 0]);\r\n                    this.isoVecsABOB.push([point, prev, maxPrev]);\r\n                    //down\r\n                    this.vertexTypes.push([1, 0, 0]);\r\n                    this.isoVecsABOB.push([point, maxPrev, maxPoint]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public mapABOBtoOBOA() {\r\n        const point = new _IsoVector(0, 0);\r\n        for (let i = 0; i < this.isoVecsABOB.length; i++) {\r\n            const temp = [];\r\n            for (let j = 0; j < 3; j++) {\r\n                point.x = this.isoVecsABOB[i][j].x;\r\n                point.y = this.isoVecsABOB[i][j].y;\r\n                if (this.vertexTypes[i][j] === 0) {\r\n                    point.rotateNeg120(this.m, this.n);\r\n                }\r\n                temp.push(point.clone());\r\n            }\r\n            this.isoVecsOBOA.push(temp);\r\n        }\r\n    }\r\n\r\n    public mapABOBtoBAOA() {\r\n        const point = new _IsoVector(0, 0);\r\n        for (let i = 0; i < this.isoVecsABOB.length; i++) {\r\n            const temp = [];\r\n            for (let j = 0; j < 3; j++) {\r\n                point.x = this.isoVecsABOB[i][j].x;\r\n                point.y = this.isoVecsABOB[i][j].y;\r\n                if (this.vertexTypes[i][j] === 1) {\r\n                    point.rotate120(this.m, this.n);\r\n                }\r\n                temp.push(point.clone());\r\n            }\r\n            this.isoVecsBAOA.push(temp);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public MapToFace(faceNb: number, geodesicData: PolyhedronData) {\r\n        const F = this.IDATA.face[faceNb];\r\n        const oidx = F[2];\r\n        const aidx = F[1];\r\n        const bidx = F[0];\r\n\r\n        const O = Vector3.FromArray(this.IDATA.vertex[oidx]);\r\n        const A = Vector3.FromArray(this.IDATA.vertex[aidx]);\r\n        const B = Vector3.FromArray(this.IDATA.vertex[bidx]);\r\n\r\n        const OA = A.subtract(O);\r\n        const OB = B.subtract(O);\r\n\r\n        const x: Vector3 = OA.scale(this.coau).add(OB.scale(this.cobu));\r\n        const y: Vector3 = OA.scale(this.coav).add(OB.scale(this.cobv));\r\n\r\n        const mapped = [];\r\n\r\n        let idx: string;\r\n        let tempVec: Vector3 = TmpVectors.Vector3[0];\r\n        for (let i = 0; i < this.cartesian.length; i++) {\r\n            tempVec = x.scale(this.cartesian[i].x).add(y.scale(this.cartesian[i].y)).add(O);\r\n            mapped[i] = [tempVec.x, tempVec.y, tempVec.z];\r\n            idx = faceNb + \"|\" + this.vertices[i].x + \"|\" + this.vertices[i].y;\r\n            geodesicData.vertex[this.vecToidx[idx]] = [tempVec.x, tempVec.y, tempVec.z];\r\n        }\r\n    }\r\n\r\n    //statics\r\n    /**Creates a primary triangle\r\n     * @internal\r\n     */\r\n\r\n    public build(m: number, n: number) {\r\n        const vertices = new Array<_IsoVector>();\r\n\r\n        const O: _IsoVector = _IsoVector.Zero();\r\n        const A: _IsoVector = new _IsoVector(m, n);\r\n        const B: _IsoVector = new _IsoVector(-n, m + n);\r\n        vertices.push(O, A, B);\r\n\r\n        //max internal isoceles triangle vertices\r\n        for (let y = n; y < m + 1; y++) {\r\n            for (let x = 0; x < m + 1 - y; x++) {\r\n                vertices.push(new _IsoVector(x, y));\r\n            }\r\n        }\r\n\r\n        //shared vertices along edges when needed\r\n        if (n > 0) {\r\n            const g = Scalar.HCF(m, n);\r\n            const m1 = m / g;\r\n            const n1 = n / g;\r\n\r\n            for (let i = 1; i < g; i++) {\r\n                vertices.push(new _IsoVector(i * m1, i * n1)); //OA\r\n                vertices.push(new _IsoVector(-i * n1, i * (m1 + n1))); //OB\r\n                vertices.push(new _IsoVector(m - i * (m1 + n1), n + i * m1)); // AB\r\n            }\r\n\r\n            //lower rows vertices and their rotations\r\n            const ratio = m / n;\r\n            for (let y = 1; y < n; y++) {\r\n                for (let x = 0; x < y * ratio; x++) {\r\n                    vertices.push(new _IsoVector(x, y));\r\n                    vertices.push(new _IsoVector(x, y).rotate120(m, n));\r\n                    vertices.push(new _IsoVector(x, y).rotateNeg120(m, n));\r\n                }\r\n            }\r\n        }\r\n        //order vertices by x and then y\r\n        vertices.sort((a, b) => {\r\n            return a.x - b.x;\r\n        });\r\n\r\n        vertices.sort((a, b) => {\r\n            return a.y - b.y;\r\n        });\r\n\r\n        const min = new Array<number>(m + n + 1);\r\n        const max = new Array<number>(m + n + 1);\r\n        for (let i = 0; i < min.length; i++) {\r\n            min[i] = Infinity;\r\n            max[i] = -Infinity;\r\n        }\r\n\r\n        let y: number = 0;\r\n        let x: number = 0;\r\n\r\n        const len: number = vertices.length;\r\n        for (let i = 0; i < len; i++) {\r\n            x = vertices[i].x;\r\n            y = vertices[i].y;\r\n            min[y] = Math.min(x, min[y]);\r\n            max[y] = Math.max(x, max[y]);\r\n        }\r\n\r\n        //calculates the distance of a vertex from a given primary vertex\r\n        const distFrom = (vert: _IsoVector, primVert: string) => {\r\n            const v = vert.clone();\r\n            if (primVert === \"A\") {\r\n                v.rotateNeg120(m, n);\r\n            }\r\n            if (primVert === \"B\") {\r\n                v.rotate120(m, n);\r\n            }\r\n            if (v.x < 0) {\r\n                return v.y;\r\n            }\r\n            return v.x + v.y;\r\n        };\r\n\r\n        const cartesian: Vector3[] = [];\r\n        const distFromO: number[] = [];\r\n        const distFromA: number[] = [];\r\n        const distFromB: number[] = [];\r\n        const vertByDist: { [key: string]: number[] } = {};\r\n        const vertData: number[][] = [];\r\n        let closest: number = -1;\r\n        let dist: number = -1;\r\n        for (let i = 0; i < len; i++) {\r\n            cartesian[i] = vertices[i].toCartesianOrigin(new _IsoVector(0, 0), 0.5);\r\n            distFromO[i] = distFrom(vertices[i], \"O\");\r\n            distFromA[i] = distFrom(vertices[i], \"A\");\r\n            distFromB[i] = distFrom(vertices[i], \"B\");\r\n\r\n            if (distFromO[i] === distFromA[i] && distFromA[i] === distFromB[i]) {\r\n                closest = 3;\r\n                dist = distFromO[i];\r\n            } else if (distFromO[i] === distFromA[i]) {\r\n                closest = 4;\r\n                dist = distFromO[i];\r\n            } else if (distFromA[i] === distFromB[i]) {\r\n                closest = 5;\r\n                dist = distFromA[i];\r\n            } else if (distFromB[i] === distFromO[i]) {\r\n                closest = 6;\r\n                dist = distFromO[i];\r\n            }\r\n            if (distFromO[i] < distFromA[i] && distFromO[i] < distFromB[i]) {\r\n                closest = 2;\r\n                dist = distFromO[i];\r\n            }\r\n            if (distFromA[i] < distFromO[i] && distFromA[i] < distFromB[i]) {\r\n                closest = 1;\r\n                dist = distFromA[i];\r\n            }\r\n            if (distFromB[i] < distFromA[i] && distFromB[i] < distFromO[i]) {\r\n                closest = 0;\r\n                dist = distFromB[i];\r\n            }\r\n            vertData.push([closest, dist, vertices[i].x, vertices[i].y]);\r\n        }\r\n\r\n        vertData.sort((a, b) => {\r\n            return a[2] - b[2];\r\n        });\r\n        vertData.sort((a, b) => {\r\n            return a[3] - b[3];\r\n        });\r\n        vertData.sort((a, b) => {\r\n            return a[1] - b[1];\r\n        });\r\n        vertData.sort((a, b) => {\r\n            return a[0] - b[0];\r\n        });\r\n\r\n        for (let v = 0; v < vertData.length; v++) {\r\n            vertByDist[vertData[v][2] + \"|\" + vertData[v][3]] = [vertData[v][0], vertData[v][1], v];\r\n        }\r\n\r\n        this.m = m;\r\n        this.n = n;\r\n        this.vertices = vertices;\r\n        this.vertByDist = vertByDist;\r\n        this.cartesian = cartesian;\r\n        this.min = min;\r\n        this.max = max;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\n/** Builds Polyhedron Data\r\n * @internal\r\n */\r\n\r\nexport class PolyhedronData {\r\n    public edgematch: (number | string)[][];\r\n\r\n    constructor(public name: string, public category: string, public vertex: number[][], public face: number[][]) {}\r\n}\r\n\r\n/**\r\n * This class Extends the PolyhedronData Class to provide measures for a Geodesic Polyhedron\r\n */\r\nexport class GeodesicData extends PolyhedronData {\r\n    /**\r\n     * @internal\r\n     */\r\n    public edgematch: (number | string)[][];\r\n    /**\r\n     * @internal\r\n     */\r\n    public adjacentFaces: number[][];\r\n    /**\r\n     * @internal\r\n     */\r\n    public sharedNodes: number;\r\n    /**\r\n     * @internal\r\n     */\r\n    public poleNodes: number;\r\n    /**\r\n     * @internal\r\n     */\r\n    public innerToData(face: number, primTri: _PrimaryIsoTriangle) {\r\n        for (let i = 0; i < primTri.innerFacets.length; i++) {\r\n            this.face.push(primTri.innerFacets[i].map((el) => primTri.vecToidx[face + el]));\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public mapABOBtoDATA(faceNb: number, primTri: _PrimaryIsoTriangle) {\r\n        const fr = primTri.IDATA.edgematch[faceNb][0];\r\n        for (let i = 0; i < primTri.isoVecsABOB.length; i++) {\r\n            const temp = [];\r\n            for (let j = 0; j < 3; j++) {\r\n                if (primTri.vertexTypes[i][j] === 0) {\r\n                    temp.push(faceNb + \"|\" + primTri.isoVecsABOB[i][j].x + \"|\" + primTri.isoVecsABOB[i][j].y);\r\n                } else {\r\n                    temp.push(fr + \"|\" + primTri.isoVecsABOB[i][j].x + \"|\" + primTri.isoVecsABOB[i][j].y);\r\n                }\r\n            }\r\n            this.face.push([primTri.vecToidx[temp[0]], primTri.vecToidx[temp[1]], primTri.vecToidx[temp[2]]]);\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public mapOBOAtoDATA(faceNb: number, primTri: _PrimaryIsoTriangle) {\r\n        const fr = primTri.IDATA.edgematch[faceNb][0];\r\n        for (let i = 0; i < primTri.isoVecsOBOA.length; i++) {\r\n            const temp = [];\r\n            for (let j = 0; j < 3; j++) {\r\n                if (primTri.vertexTypes[i][j] === 1) {\r\n                    temp.push(faceNb + \"|\" + primTri.isoVecsOBOA[i][j].x + \"|\" + primTri.isoVecsOBOA[i][j].y);\r\n                } else {\r\n                    temp.push(fr + \"|\" + primTri.isoVecsOBOA[i][j].x + \"|\" + primTri.isoVecsOBOA[i][j].y);\r\n                }\r\n            }\r\n            this.face.push([primTri.vecToidx[temp[0]], primTri.vecToidx[temp[1]], primTri.vecToidx[temp[2]]]);\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public mapBAOAtoDATA(faceNb: number, primTri: _PrimaryIsoTriangle) {\r\n        const fr = primTri.IDATA.edgematch[faceNb][2];\r\n        for (let i = 0; i < primTri.isoVecsBAOA.length; i++) {\r\n            const temp = [];\r\n            for (let j = 0; j < 3; j++) {\r\n                if (primTri.vertexTypes[i][j] === 1) {\r\n                    temp.push(faceNb + \"|\" + primTri.isoVecsBAOA[i][j].x + \"|\" + primTri.isoVecsBAOA[i][j].y);\r\n                } else {\r\n                    temp.push(fr + \"|\" + primTri.isoVecsBAOA[i][j].x + \"|\" + primTri.isoVecsBAOA[i][j].y);\r\n                }\r\n            }\r\n            this.face.push([primTri.vecToidx[temp[0]], primTri.vecToidx[temp[1]], primTri.vecToidx[temp[2]]]);\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public orderData(primTri: _PrimaryIsoTriangle) {\r\n        const nearTo: number[][][] = [];\r\n        for (let i = 0; i < 13; i++) {\r\n            nearTo[i] = [];\r\n        }\r\n        const close: number[][] = primTri.closestTo;\r\n        for (let i = 0; i < close.length; i++) {\r\n            if (close[i][0] > -1) {\r\n                if (close[i][1] > 0) {\r\n                    nearTo[close[i][0]].push([i, close[i][1]]);\r\n                }\r\n            } else {\r\n                nearTo[12].push([i, close[i][0]]);\r\n            }\r\n        }\r\n\r\n        const near: number[] = [];\r\n        for (let i = 0; i < 12; i++) {\r\n            near[i] = i;\r\n        }\r\n        let nearIndex = 12;\r\n        for (let i = 0; i < 12; i++) {\r\n            nearTo[i].sort((a: number[], b: number[]) => {\r\n                return a[1] - b[1];\r\n            });\r\n            for (let j = 0; j < nearTo[i].length; j++) {\r\n                near[nearTo[i][j][0]] = nearIndex++;\r\n            }\r\n        }\r\n\r\n        for (let j = 0; j < nearTo[12].length; j++) {\r\n            near[nearTo[12][j][0]] = nearIndex++;\r\n        }\r\n\r\n        for (let i = 0; i < this.vertex.length; i++) {\r\n            this.vertex[i].push(near[i]);\r\n        }\r\n\r\n        this.vertex.sort((a, b) => {\r\n            return a[3] - b[3];\r\n        });\r\n\r\n        for (let i = 0; i < this.vertex.length; i++) {\r\n            this.vertex[i].pop();\r\n        }\r\n\r\n        for (let i = 0; i < this.face.length; i++) {\r\n            for (let j = 0; j < this.face[i].length; j++) {\r\n                this.face[i][j] = near[this.face[i][j]];\r\n            }\r\n        }\r\n\r\n        this.sharedNodes = nearTo[12].length;\r\n        this.poleNodes = this.vertex.length - this.sharedNodes;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public setOrder(m: number, faces: number[]) {\r\n        const adjVerts: number[] = [];\r\n        const dualFaces: number[] = [];\r\n        let face: number = <number>faces.pop();\r\n        dualFaces.push(face);\r\n        let index = this.face[face].indexOf(m);\r\n        index = (index + 2) % 3;\r\n        let v = this.face[face][index];\r\n        adjVerts.push(v);\r\n        let f = 0;\r\n        while (faces.length > 0) {\r\n            face = faces[f];\r\n            if (this.face[face].indexOf(v) > -1) {\r\n                // v is a vertex of face f\r\n                index = (this.face[face].indexOf(v) + 1) % 3;\r\n                v = this.face[face][index];\r\n                adjVerts.push(v);\r\n                dualFaces.push(face);\r\n                faces.splice(f, 1);\r\n                f = 0;\r\n            } else {\r\n                f++;\r\n            }\r\n        }\r\n        this.adjacentFaces.push(adjVerts);\r\n        return dualFaces;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public toGoldbergPolyhedronData(): PolyhedronData {\r\n        const goldbergPolyhedronData: PolyhedronData = new PolyhedronData(\"GeoDual\", \"Goldberg\", [], []);\r\n        goldbergPolyhedronData.name = \"GD dual\";\r\n        const verticesNb: number = this.vertex.length;\r\n        const map = new Array(verticesNb);\r\n        for (let v = 0; v < verticesNb; v++) {\r\n            map[v] = [];\r\n        }\r\n        for (let f = 0; f < this.face.length; f++) {\r\n            for (let i = 0; i < 3; i++) {\r\n                map[this.face[f][i]].push(f);\r\n            }\r\n        }\r\n        let cx = 0;\r\n        let cy = 0;\r\n        let cz = 0;\r\n        let face = [];\r\n        let vertex = [];\r\n        this.adjacentFaces = [];\r\n        for (let m = 0; m < map.length; m++) {\r\n            goldbergPolyhedronData.face[m] = this.setOrder(m, map[m].concat([]));\r\n            map[m].forEach((el: number) => {\r\n                cx = 0;\r\n                cy = 0;\r\n                cz = 0;\r\n                face = this.face[el];\r\n                for (let i = 0; i < 3; i++) {\r\n                    vertex = this.vertex[face[i]];\r\n                    cx += vertex[0];\r\n                    cy += vertex[1];\r\n                    cz += vertex[2];\r\n                }\r\n                goldbergPolyhedronData.vertex[el] = [cx / 3, cy / 3, cz / 3];\r\n            });\r\n        }\r\n        return goldbergPolyhedronData;\r\n    }\r\n\r\n    //statics\r\n    /**Builds the data for a Geodesic Polyhedron from a primary triangle\r\n     * @param primTri the primary triangle\r\n     * @internal\r\n     */\r\n\r\n    public static BuildGeodesicData(primTri: _PrimaryIsoTriangle) {\r\n        const geodesicData = new GeodesicData(\r\n            \"Geodesic-m-n\",\r\n            \"Geodesic\",\r\n            [\r\n                [0, PHI, -1],\r\n                [-PHI, 1, 0],\r\n                [-1, 0, -PHI],\r\n                [1, 0, -PHI],\r\n                [PHI, 1, 0],\r\n                [0, PHI, 1],\r\n                [-1, 0, PHI],\r\n                [-PHI, -1, 0],\r\n                [0, -PHI, -1],\r\n                [PHI, -1, 0],\r\n                [1, 0, PHI],\r\n                [0, -PHI, 1],\r\n            ],\r\n            []\r\n        );\r\n\r\n        primTri.setIndices();\r\n        primTri.calcCoeffs();\r\n        primTri.createInnerFacets();\r\n        primTri.edgeVecsABOB();\r\n        primTri.mapABOBtoOBOA();\r\n        primTri.mapABOBtoBAOA();\r\n\r\n        for (let f = 0; f < primTri.IDATA.face.length; f++) {\r\n            primTri.MapToFace(f, geodesicData);\r\n            geodesicData.innerToData(f, primTri);\r\n            if (primTri.IDATA.edgematch[f][1] === \"B\") {\r\n                geodesicData.mapABOBtoDATA(f, primTri);\r\n            }\r\n            if (primTri.IDATA.edgematch[f][1] === \"O\") {\r\n                geodesicData.mapOBOAtoDATA(f, primTri);\r\n            }\r\n            if (primTri.IDATA.edgematch[f][3] === \"A\") {\r\n                geodesicData.mapBAOAtoDATA(f, primTri);\r\n            }\r\n        }\r\n\r\n        geodesicData.orderData(primTri);\r\n        const radius = 1;\r\n        geodesicData.vertex = geodesicData.vertex.map(function (el) {\r\n            const a = el[0];\r\n            const b = el[1];\r\n            const c = el[2];\r\n            const d = Math.sqrt(a * a + b * b + c * c);\r\n            el[0] *= radius / d;\r\n            el[1] *= radius / d;\r\n            el[2] *= radius / d;\r\n            return el;\r\n        });\r\n\r\n        return geodesicData;\r\n    }\r\n}\r\n","import type { Scene } from \"../scene\";\r\nimport type { Vector2 } from \"../Maths/math.vector\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { FloatArray } from \"../types\";\r\n\r\nMesh._GoldbergMeshParser = (parsedMesh: any, scene: Scene): GoldbergMesh => {\r\n    return GoldbergMesh.Parse(parsedMesh, scene);\r\n};\r\n\r\n/**\r\n * Defines the set of goldberg data used to create the polygon\r\n */\r\nexport type GoldbergData = {\r\n    /**\r\n     * The list of Goldberg faces colors\r\n     */\r\n    faceColors: Color4[];\r\n    /**\r\n     * The list of Goldberg faces centers\r\n     */\r\n    faceCenters: Vector3[];\r\n    /**\r\n     * The list of Goldberg faces Z axis\r\n     */\r\n    faceZaxis: Vector3[];\r\n    /**\r\n     * The list of Goldberg faces Y axis\r\n     */\r\n    faceXaxis: Vector3[];\r\n    /**\r\n     * The list of Goldberg faces X axis\r\n     */\r\n    faceYaxis: Vector3[];\r\n    /**\r\n     * Defines the number of shared faces\r\n     */\r\n    nbSharedFaces: number;\r\n    /**\r\n     * Defines the number of unshared faces\r\n     */\r\n    nbUnsharedFaces: number;\r\n    /**\r\n     * Defines the total number of goldberg faces\r\n     */\r\n    nbFaces: number;\r\n    /**\r\n     * Defines the number of goldberg faces at the pole\r\n     */\r\n    nbFacesAtPole: number;\r\n    /**\r\n     * Defines the number of adjacent faces per goldberg faces\r\n     */\r\n    adjacentFaces: number[][];\r\n};\r\n\r\n/**\r\n * Mesh for a Goldberg Polyhedron which is made from 12 pentagonal and the rest hexagonal faces\r\n * @see https://en.wikipedia.org/wiki/Goldberg_polyhedron\r\n */\r\nexport class GoldbergMesh extends Mesh {\r\n    /**\r\n     * Defines the specific Goldberg data used in this mesh construction.\r\n     */\r\n    public goldbergData: GoldbergData = {\r\n        faceColors: [],\r\n        faceCenters: [],\r\n        faceZaxis: [],\r\n        faceXaxis: [],\r\n        faceYaxis: [],\r\n        nbSharedFaces: 0,\r\n        nbUnsharedFaces: 0,\r\n        nbFaces: 0,\r\n        nbFacesAtPole: 0,\r\n        adjacentFaces: [],\r\n    };\r\n\r\n    /**\r\n     * Gets the related Goldberg face from pole infos\r\n     * @param poleOrShared Defines the pole index or the shared face index if the fromPole parameter is passed in\r\n     * @param fromPole Defines an optional pole index to find the related info from\r\n     * @returns the goldberg face number\r\n     */\r\n    public relatedGoldbergFace(poleOrShared: number, fromPole?: number): number {\r\n        if (fromPole === void 0) {\r\n            if (poleOrShared > this.goldbergData.nbUnsharedFaces - 1) {\r\n                Logger.Warn(\"Maximum number of unshared faces used\");\r\n                poleOrShared = this.goldbergData.nbUnsharedFaces - 1;\r\n            }\r\n            return this.goldbergData.nbUnsharedFaces + poleOrShared;\r\n        }\r\n        if (poleOrShared > 11) {\r\n            Logger.Warn(\"Last pole used\");\r\n            poleOrShared = 11;\r\n        }\r\n        if (fromPole > this.goldbergData.nbFacesAtPole - 1) {\r\n            Logger.Warn(\"Maximum number of faces at a pole used\");\r\n            fromPole = this.goldbergData.nbFacesAtPole - 1;\r\n        }\r\n\r\n        return 12 + poleOrShared * this.goldbergData.nbFacesAtPole + fromPole;\r\n    }\r\n\r\n    private _changeGoldbergFaceColors(colorRange: (number | Color4)[][]): number[] {\r\n        for (let i = 0; i < colorRange.length; i++) {\r\n            const min: number = <number>colorRange[i][0];\r\n            const max: number = <number>colorRange[i][1];\r\n            const col: Color4 = <Color4>colorRange[i][2];\r\n            for (let f = min; f < max + 1; f++) {\r\n                this.goldbergData.faceColors[f] = col;\r\n            }\r\n        }\r\n\r\n        const newCols: number[] = [];\r\n        for (let f = 0; f < 12; f++) {\r\n            for (let i = 0; i < 5; i++) {\r\n                newCols.push(this.goldbergData.faceColors[f].r, this.goldbergData.faceColors[f].g, this.goldbergData.faceColors[f].b, this.goldbergData.faceColors[f].a);\r\n            }\r\n        }\r\n        for (let f = 12; f < this.goldbergData.faceColors.length; f++) {\r\n            for (let i = 0; i < 6; i++) {\r\n                newCols.push(this.goldbergData.faceColors[f].r, this.goldbergData.faceColors[f].g, this.goldbergData.faceColors[f].b, this.goldbergData.faceColors[f].a);\r\n            }\r\n        }\r\n        return newCols;\r\n    }\r\n\r\n    /**\r\n     * Set new goldberg face colors\r\n     * @param colorRange the new color to apply to the mesh\r\n     */\r\n    public setGoldbergFaceColors(colorRange: (number | Color4)[][]) {\r\n        const newCols = this._changeGoldbergFaceColors(colorRange);\r\n        this.setVerticesData(VertexBuffer.ColorKind, newCols);\r\n    }\r\n\r\n    /**\r\n     * Updates new goldberg face colors\r\n     * @param colorRange the new color to apply to the mesh\r\n     */\r\n    public updateGoldbergFaceColors(colorRange: (number | Color4)[][]) {\r\n        const newCols = this._changeGoldbergFaceColors(colorRange);\r\n        this.updateVerticesData(VertexBuffer.ColorKind, newCols);\r\n    }\r\n\r\n    private _changeGoldbergFaceUVs(uvRange: (number | Vector2)[][]): FloatArray {\r\n        const uvs: FloatArray = this.getVerticesData(VertexBuffer.UVKind)!!;\r\n        for (let i = 0; i < uvRange.length; i++) {\r\n            const min: number = <number>uvRange[i][0];\r\n            const max: number = <number>uvRange[i][1];\r\n            const center: Vector2 = <Vector2>uvRange[i][2];\r\n            const radius: number = <number>uvRange[i][3];\r\n            const angle: number = <number>uvRange[i][4];\r\n            const points5: number[] = [];\r\n            const points6: number[] = [];\r\n            let u: number;\r\n            let v: number;\r\n            for (let p = 0; p < 5; p++) {\r\n                u = center.x + radius * Math.cos(angle + (p * Math.PI) / 2.5);\r\n                v = center.y + radius * Math.sin(angle + (p * Math.PI) / 2.5);\r\n                if (u < 0) {\r\n                    u = 0;\r\n                }\r\n                if (u > 1) {\r\n                    u = 1;\r\n                }\r\n                points5.push(u, v);\r\n            }\r\n            for (let p = 0; p < 6; p++) {\r\n                u = center.x + radius * Math.cos(angle + (p * Math.PI) / 3);\r\n                v = center.y + radius * Math.sin(angle + (p * Math.PI) / 3);\r\n                if (u < 0) {\r\n                    u = 0;\r\n                }\r\n                if (u > 1) {\r\n                    u = 1;\r\n                }\r\n                points6.push(u, v);\r\n            }\r\n            for (let f = min; f < Math.min(12, max + 1); f++) {\r\n                for (let p = 0; p < 5; p++) {\r\n                    uvs[10 * f + 2 * p] = points5[2 * p];\r\n                    uvs[10 * f + 2 * p + 1] = points5[2 * p + 1];\r\n                }\r\n            }\r\n            for (let f = Math.max(12, min); f < max + 1; f++) {\r\n                for (let p = 0; p < 6; p++) {\r\n                    //120 + 12 * (f - 12) = 12 * f - 24\r\n                    uvs[12 * f - 24 + 2 * p] = points6[2 * p];\r\n                    uvs[12 * f - 23 + 2 * p] = points6[2 * p + 1];\r\n                }\r\n            }\r\n        }\r\n        return uvs;\r\n    }\r\n\r\n    /**\r\n     * set new goldberg face UVs\r\n     * @param uvRange the new UVs to apply to the mesh\r\n     */\r\n    public setGoldbergFaceUVs(uvRange: (number | Vector2)[][]) {\r\n        const newUVs: FloatArray = this._changeGoldbergFaceUVs(uvRange);\r\n        this.setVerticesData(VertexBuffer.UVKind, newUVs);\r\n    }\r\n\r\n    /**\r\n     * Updates new goldberg face UVs\r\n     * @param uvRange the new UVs to apply to the mesh\r\n     */\r\n    public updateGoldbergFaceUVs(uvRange: (number | Vector2)[][]) {\r\n        const newUVs = this._changeGoldbergFaceUVs(uvRange);\r\n        this.updateVerticesData(VertexBuffer.UVKind, newUVs);\r\n    }\r\n\r\n    /**\r\n     * Places a mesh on a particular face of the goldberg polygon\r\n     * @param mesh Defines the mesh to position\r\n     * @param face Defines the face to position onto\r\n     * @param position Defines the position relative to the face we are positioning the mesh onto\r\n     */\r\n    public placeOnGoldbergFaceAt(mesh: Mesh, face: number, position: Vector3) {\r\n        const orientation = Vector3.RotationFromAxis(this.goldbergData.faceXaxis[face], this.goldbergData.faceYaxis[face], this.goldbergData.faceZaxis[face]);\r\n        mesh.rotation = orientation;\r\n        mesh.position = this.goldbergData.faceCenters[face]\r\n            .add(this.goldbergData.faceXaxis[face].scale(position.x))\r\n            .add(this.goldbergData.faceYaxis[face].scale(position.y))\r\n            .add(this.goldbergData.faceZaxis[face].scale(position.z));\r\n    }\r\n\r\n    /**\r\n     * Serialize current mesh\r\n     * @param serializationObject defines the object which will receive the serialization data\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.type = \"GoldbergMesh\";\r\n\r\n        const goldbergData: any = {};\r\n        goldbergData.adjacentFaces = this.goldbergData.adjacentFaces;\r\n        goldbergData.nbSharedFaces = this.goldbergData.nbSharedFaces;\r\n        goldbergData.nbUnsharedFaces = this.goldbergData.nbUnsharedFaces;\r\n        goldbergData.nbFaces = this.goldbergData.nbFaces;\r\n        goldbergData.nbFacesAtPole = this.goldbergData.nbFacesAtPole;\r\n\r\n        if (this.goldbergData.faceColors) {\r\n            goldbergData.faceColors = [];\r\n            for (const color of this.goldbergData.faceColors) {\r\n                goldbergData.faceColors.push(color.asArray());\r\n            }\r\n        }\r\n        if (this.goldbergData.faceCenters) {\r\n            goldbergData.faceCenters = [];\r\n            for (const vector of this.goldbergData.faceCenters) {\r\n                goldbergData.faceCenters.push(vector.asArray());\r\n            }\r\n        }\r\n        if (this.goldbergData.faceZaxis) {\r\n            goldbergData.faceZaxis = [];\r\n            for (const vector of this.goldbergData.faceZaxis) {\r\n                goldbergData.faceZaxis.push(vector.asArray());\r\n            }\r\n        }\r\n        if (this.goldbergData.faceYaxis) {\r\n            goldbergData.faceYaxis = [];\r\n            for (const vector of this.goldbergData.faceYaxis) {\r\n                goldbergData.faceYaxis.push(vector.asArray());\r\n            }\r\n        }\r\n        if (this.goldbergData.faceXaxis) {\r\n            goldbergData.faceXaxis = [];\r\n            for (const vector of this.goldbergData.faceXaxis) {\r\n                goldbergData.faceXaxis.push(vector.asArray());\r\n            }\r\n        }\r\n\r\n        serializationObject.goldbergData = goldbergData;\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized goldberg mesh\r\n     * @param parsedMesh the serialized mesh\r\n     * @param scene the scene to create the goldberg mesh in\r\n     * @returns the created goldberg mesh\r\n     */\r\n    public static Parse(parsedMesh: any, scene: Scene): GoldbergMesh {\r\n        const goldbergData = parsedMesh.goldbergData;\r\n        goldbergData.faceColors = goldbergData.faceColors.map((el: number[]) => Color4.FromArray(el));\r\n        goldbergData.faceCenters = goldbergData.faceCenters.map((el: number[]) => Vector3.FromArray(el));\r\n        goldbergData.faceZaxis = goldbergData.faceZaxis.map((el: number[]) => Vector3.FromArray(el));\r\n        goldbergData.faceXaxis = goldbergData.faceXaxis.map((el: number[]) => Vector3.FromArray(el));\r\n        goldbergData.faceYaxis = goldbergData.faceYaxis.map((el: number[]) => Vector3.FromArray(el));\r\n\r\n        const goldberg = new GoldbergMesh(parsedMesh.name, scene);\r\n        goldberg.goldbergData = goldbergData;\r\n\r\n        return goldberg;\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { CreateRibbon } from \"./Builders/ribbonBuilder\";\r\nimport { CreateDisc } from \"./Builders/discBuilder\";\r\nimport { CreateBox } from \"./Builders/boxBuilder\";\r\nimport { CreateTiledBox } from \"./Builders/tiledBoxBuilder\";\r\nimport { CreateSphere } from \"./Builders/sphereBuilder\";\r\nimport { CreateCylinder } from \"./Builders/cylinderBuilder\";\r\nimport { CreateTorus } from \"./Builders/torusBuilder\";\r\nimport { CreateTorusKnot } from \"./Builders/torusKnotBuilder\";\r\nimport { CreateDashedLines, CreateLineSystem, CreateLines } from \"./Builders/linesBuilder\";\r\nimport { CreatePolygon, ExtrudePolygon } from \"./Builders/polygonBuilder\";\r\nimport { ExtrudeShape, ExtrudeShapeCustom } from \"./Builders/shapeBuilder\";\r\nimport { CreateLathe } from \"./Builders/latheBuilder\";\r\nimport { CreatePlane } from \"./Builders/planeBuilder\";\r\nimport { CreateTiledPlane } from \"./Builders/tiledPlaneBuilder\";\r\nimport { CreateGround, CreateGroundFromHeightMap, CreateTiledGround } from \"./Builders/groundBuilder\";\r\nimport { CreateTube } from \"./Builders/tubeBuilder\";\r\nimport { CreatePolyhedron } from \"./Builders/polyhedronBuilder\";\r\nimport { CreateIcoSphere } from \"./Builders/icoSphereBuilder\";\r\nimport { CreateDecal } from \"./Builders/decalBuilder\";\r\nimport { CreateCapsule } from \"./Builders/capsuleBuilder\";\r\nimport { CreateGeodesic } from \"./Builders/geodesicBuilder\";\r\nimport { CreateGoldberg } from \"./Builders/goldbergBuilder\";\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\r\nexport const MeshBuilder = {\r\n    CreateBox,\r\n    CreateTiledBox,\r\n    CreateSphere,\r\n    CreateDisc,\r\n    CreateIcoSphere,\r\n    CreateRibbon,\r\n    CreateCylinder,\r\n    CreateTorus,\r\n    CreateTorusKnot,\r\n    CreateLineSystem,\r\n    CreateLines,\r\n    CreateDashedLines,\r\n    ExtrudeShape,\r\n    ExtrudeShapeCustom,\r\n    CreateLathe,\r\n    CreateTiledPlane,\r\n    CreatePlane,\r\n    CreateGround,\r\n    CreateTiledGround,\r\n    CreateGroundFromHeightMap,\r\n    CreatePolygon,\r\n    ExtrudePolygon,\r\n    CreateTube,\r\n    CreatePolyhedron,\r\n    CreateGeodesic,\r\n    CreateGoldberg,\r\n    CreateDecal,\r\n    CreateCapsule,\r\n};\r\n","import { Logger } from \"../Misc/logger\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Vector3, Vector2 } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Path2 } from \"../Maths/math.path\";\r\nimport { Epsilon } from \"../Maths/math.constants\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\ndeclare let earcut: any;\r\n/**\r\n * Vector2 wth index property\r\n */\r\nclass IndexedVector2 extends Vector2 {\r\n    constructor(\r\n        original: Vector2,\r\n        /** Index of the vector2 */\r\n        public index: number\r\n    ) {\r\n        super(original.x, original.y);\r\n    }\r\n}\r\n\r\n/**\r\n * Defines points to create a polygon\r\n */\r\nclass PolygonPoints {\r\n    elements = new Array<IndexedVector2>();\r\n\r\n    add(originalPoints: Array<Vector2>): Array<IndexedVector2> {\r\n        const result = new Array<IndexedVector2>();\r\n        originalPoints.forEach((point) => {\r\n            const newPoint = new IndexedVector2(point, this.elements.length);\r\n            result.push(newPoint);\r\n            this.elements.push(newPoint);\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    computeBounds(): { min: Vector2; max: Vector2; width: number; height: number } {\r\n        const lmin = new Vector2(this.elements[0].x, this.elements[0].y);\r\n        const lmax = new Vector2(this.elements[0].x, this.elements[0].y);\r\n\r\n        this.elements.forEach((point) => {\r\n            // x\r\n            if (point.x < lmin.x) {\r\n                lmin.x = point.x;\r\n            } else if (point.x > lmax.x) {\r\n                lmax.x = point.x;\r\n            }\r\n\r\n            // y\r\n            if (point.y < lmin.y) {\r\n                lmin.y = point.y;\r\n            } else if (point.y > lmax.y) {\r\n                lmax.y = point.y;\r\n            }\r\n        });\r\n\r\n        return {\r\n            min: lmin,\r\n            max: lmax,\r\n            width: lmax.x - lmin.x,\r\n            height: lmax.y - lmin.y,\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Polygon\r\n * @see https://doc.babylonjs.com/how_to/parametric_shapes#non-regular-polygon\r\n */\r\nexport class Polygon {\r\n    /**\r\n     * Creates a rectangle\r\n     * @param xmin bottom X coord\r\n     * @param ymin bottom Y coord\r\n     * @param xmax top X coord\r\n     * @param ymax top Y coord\r\n     * @returns points that make the resulting rectangle\r\n     */\r\n    static Rectangle(xmin: number, ymin: number, xmax: number, ymax: number): Vector2[] {\r\n        return [new Vector2(xmin, ymin), new Vector2(xmax, ymin), new Vector2(xmax, ymax), new Vector2(xmin, ymax)];\r\n    }\r\n\r\n    /**\r\n     * Creates a circle\r\n     * @param radius radius of circle\r\n     * @param cx scale in x\r\n     * @param cy scale in y\r\n     * @param numberOfSides number of sides that make up the circle\r\n     * @returns points that make the resulting circle\r\n     */\r\n    static Circle(radius: number, cx: number = 0, cy: number = 0, numberOfSides: number = 32): Vector2[] {\r\n        const result = new Array<Vector2>();\r\n\r\n        let angle = 0;\r\n        const increment = (Math.PI * 2) / numberOfSides;\r\n\r\n        for (let i = 0; i < numberOfSides; i++) {\r\n            result.push(new Vector2(cx + Math.cos(angle) * radius, cy + Math.sin(angle) * radius));\r\n            angle -= increment;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a polygon from input string\r\n     * @param input Input polygon data\r\n     * @returns the parsed points\r\n     */\r\n    static Parse(input: string): Vector2[] {\r\n        const floats = input\r\n            .split(/[^-+eE.\\d]+/)\r\n            .map(parseFloat)\r\n            .filter((val) => !isNaN(val));\r\n        let i: number;\r\n        const result = [];\r\n        for (i = 0; i < (floats.length & 0x7ffffffe); i += 2) {\r\n            result.push(new Vector2(floats[i], floats[i + 1]));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Starts building a polygon from x and y coordinates\r\n     * @param x x coordinate\r\n     * @param y y coordinate\r\n     * @returns the started path2\r\n     */\r\n    static StartingAt(x: number, y: number): Path2 {\r\n        return Path2.StartingAt(x, y);\r\n    }\r\n}\r\n\r\n/**\r\n * Builds a polygon\r\n * @see https://doc.babylonjs.com/how_to/polygonmeshbuilder\r\n */\r\nexport class PolygonMeshBuilder {\r\n    private _points = new PolygonPoints();\r\n    private _outlinepoints = new PolygonPoints();\r\n    private _holes = new Array<PolygonPoints>();\r\n\r\n    private _name: string;\r\n    private _scene: Nullable<Scene>;\r\n\r\n    private _epoints: number[] = new Array<number>();\r\n    private _eholes: number[] = new Array<number>();\r\n\r\n    private _addToepoint(points: Vector2[]) {\r\n        for (const p of points) {\r\n            this._epoints.push(p.x, p.y);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Babylon reference to the earcut plugin.\r\n     */\r\n    public bjsEarcut: any;\r\n\r\n    /**\r\n     * Creates a PolygonMeshBuilder\r\n     * @param name name of the builder\r\n     * @param contours Path of the polygon\r\n     * @param scene scene to add to when creating the mesh\r\n     * @param earcutInjection can be used to inject your own earcut reference\r\n     */\r\n    constructor(name: string, contours: Path2 | Vector2[] | any, scene?: Scene, earcutInjection = earcut) {\r\n        this.bjsEarcut = earcutInjection;\r\n        this._name = name;\r\n        this._scene = scene || EngineStore.LastCreatedScene;\r\n\r\n        let points: Vector2[];\r\n        if (contours instanceof Path2) {\r\n            points = (<Path2>contours).getPoints();\r\n        } else {\r\n            points = <Vector2[]>contours;\r\n        }\r\n\r\n        this._addToepoint(points);\r\n\r\n        this._points.add(points);\r\n        this._outlinepoints.add(points);\r\n\r\n        if (typeof this.bjsEarcut === \"undefined\") {\r\n            Logger.Warn(\"Earcut was not found, the polygon will not be built.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a hole within the polygon\r\n     * @param hole Array of points defining the hole\r\n     * @returns this\r\n     */\r\n    addHole(hole: Vector2[]): PolygonMeshBuilder {\r\n        this._points.add(hole);\r\n        const holepoints = new PolygonPoints();\r\n        holepoints.add(hole);\r\n        this._holes.push(holepoints);\r\n\r\n        this._eholes.push(this._epoints.length / 2);\r\n        this._addToepoint(hole);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates the polygon\r\n     * @param updatable If the mesh should be updatable\r\n     * @param depth The depth of the mesh created\r\n     * @param smoothingThreshold Dot product threshold for smoothed normals\r\n     * @returns the created mesh\r\n     */\r\n    build(updatable: boolean = false, depth: number = 0, smoothingThreshold: number = 2): Mesh {\r\n        const result = new Mesh(this._name, this._scene);\r\n\r\n        const vertexData = this.buildVertexData(depth, smoothingThreshold);\r\n\r\n        result.setVerticesData(VertexBuffer.PositionKind, <number[]>vertexData.positions, updatable);\r\n        result.setVerticesData(VertexBuffer.NormalKind, <number[]>vertexData.normals, updatable);\r\n        result.setVerticesData(VertexBuffer.UVKind, <number[]>vertexData.uvs, updatable);\r\n        result.setIndices(<number[]>vertexData.indices);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates the polygon\r\n     * @param depth The depth of the mesh created\r\n     * @param smoothingThreshold Dot product threshold for smoothed normals\r\n     * @returns the created VertexData\r\n     */\r\n    buildVertexData(depth: number = 0, smoothingThreshold: number = 2): VertexData {\r\n        const result = new VertexData();\r\n\r\n        const normals = new Array<number>();\r\n        const positions = new Array<number>();\r\n        const uvs = new Array<number>();\r\n\r\n        const bounds = this._points.computeBounds();\r\n        this._points.elements.forEach((p) => {\r\n            normals.push(0, 1.0, 0);\r\n            positions.push(p.x, 0, p.y);\r\n            uvs.push((p.x - bounds.min.x) / bounds.width, (p.y - bounds.min.y) / bounds.height);\r\n        });\r\n\r\n        const indices = new Array<number>();\r\n\r\n        const res = this.bjsEarcut(this._epoints, this._eholes, 2);\r\n\r\n        for (let i = 0; i < res.length; i++) {\r\n            indices.push(res[i]);\r\n        }\r\n\r\n        if (depth > 0) {\r\n            const positionscount = positions.length / 3; //get the current pointcount\r\n\r\n            this._points.elements.forEach((p) => {\r\n                //add the elements at the depth\r\n                normals.push(0, -1.0, 0);\r\n                positions.push(p.x, -depth, p.y);\r\n                uvs.push(1 - (p.x - bounds.min.x) / bounds.width, 1 - (p.y - bounds.min.y) / bounds.height);\r\n            });\r\n\r\n            const totalCount = indices.length;\r\n            for (let i = 0; i < totalCount; i += 3) {\r\n                const i0 = indices[i + 0];\r\n                const i1 = indices[i + 1];\r\n                const i2 = indices[i + 2];\r\n\r\n                indices.push(i2 + positionscount);\r\n                indices.push(i1 + positionscount);\r\n                indices.push(i0 + positionscount);\r\n            }\r\n\r\n            //Add the sides\r\n            this._addSide(positions, normals, uvs, indices, bounds, this._outlinepoints, depth, false, smoothingThreshold);\r\n\r\n            this._holes.forEach((hole) => {\r\n                this._addSide(positions, normals, uvs, indices, bounds, hole, depth, true, smoothingThreshold);\r\n            });\r\n        }\r\n\r\n        result.indices = indices;\r\n        result.positions = positions;\r\n        result.normals = normals;\r\n        result.uvs = uvs;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Adds a side to the polygon\r\n     * @param positions points that make the polygon\r\n     * @param normals normals of the polygon\r\n     * @param uvs uvs of the polygon\r\n     * @param indices indices of the polygon\r\n     * @param bounds bounds of the polygon\r\n     * @param points points of the polygon\r\n     * @param depth depth of the polygon\r\n     * @param flip flip of the polygon\r\n     * @param smoothingThreshold\r\n     */\r\n    private _addSide(positions: any[], normals: any[], uvs: any[], indices: any[], bounds: any, points: PolygonPoints, depth: number, flip: boolean, smoothingThreshold: number) {\r\n        let startIndex: number = positions.length / 3;\r\n        let ulength: number = 0;\r\n        for (let i: number = 0; i < points.elements.length; i++) {\r\n            const p: IndexedVector2 = points.elements[i];\r\n            const p1: IndexedVector2 = points.elements[(i + 1) % points.elements.length];\r\n\r\n            positions.push(p.x, 0, p.y);\r\n            positions.push(p.x, -depth, p.y);\r\n            positions.push(p1.x, 0, p1.y);\r\n            positions.push(p1.x, -depth, p1.y);\r\n\r\n            const p0: IndexedVector2 = points.elements[(i + points.elements.length - 1) % points.elements.length];\r\n            const p2: IndexedVector2 = points.elements[(i + 2) % points.elements.length];\r\n\r\n            let vc = new Vector3(-(p1.y - p.y), 0, p1.x - p.x);\r\n            let vp = new Vector3(-(p.y - p0.y), 0, p.x - p0.x);\r\n            let vn = new Vector3(-(p2.y - p1.y), 0, p2.x - p1.x);\r\n\r\n            if (!flip) {\r\n                vc = vc.scale(-1);\r\n                vp = vp.scale(-1);\r\n                vn = vn.scale(-1);\r\n            }\r\n\r\n            const vc_norm = vc.normalizeToNew();\r\n            let vp_norm = vp.normalizeToNew();\r\n            let vn_norm = vn.normalizeToNew();\r\n\r\n            const dotp = Vector3.Dot(vp_norm, vc_norm);\r\n            if (dotp > smoothingThreshold) {\r\n                if (dotp < Epsilon - 1) {\r\n                    vp_norm = new Vector3(p.x, 0, p.y).subtract(new Vector3(p1.x, 0, p1.y)).normalize();\r\n                } else {\r\n                    // cheap average weighed by side length\r\n                    vp_norm = vp.add(vc).normalize();\r\n                }\r\n            } else {\r\n                vp_norm = vc_norm;\r\n            }\r\n\r\n            const dotn = Vector3.Dot(vn, vc);\r\n            if (dotn > smoothingThreshold) {\r\n                if (dotn < Epsilon - 1) {\r\n                    // back to back\r\n                    vn_norm = new Vector3(p1.x, 0, p1.y).subtract(new Vector3(p.x, 0, p.y)).normalize();\r\n                } else {\r\n                    // cheap average weighed by side length\r\n                    vn_norm = vn.add(vc).normalize();\r\n                }\r\n            } else {\r\n                vn_norm = vc_norm;\r\n            }\r\n\r\n            uvs.push(ulength / bounds.width, 0);\r\n            uvs.push(ulength / bounds.width, 1);\r\n            ulength += vc.length();\r\n            uvs.push(ulength / bounds.width, 0);\r\n            uvs.push(ulength / bounds.width, 1);\r\n\r\n            normals.push(vp_norm.x, vp_norm.y, vp_norm.z);\r\n            normals.push(vp_norm.x, vp_norm.y, vp_norm.z);\r\n            normals.push(vn_norm.x, vn_norm.y, vn_norm.z);\r\n            normals.push(vn_norm.x, vn_norm.y, vn_norm.z);\r\n\r\n            if (!flip) {\r\n                indices.push(startIndex);\r\n                indices.push(startIndex + 1);\r\n                indices.push(startIndex + 2);\r\n\r\n                indices.push(startIndex + 1);\r\n                indices.push(startIndex + 3);\r\n                indices.push(startIndex + 2);\r\n            } else {\r\n                indices.push(startIndex);\r\n                indices.push(startIndex + 2);\r\n                indices.push(startIndex + 1);\r\n\r\n                indices.push(startIndex + 1);\r\n                indices.push(startIndex + 2);\r\n                indices.push(startIndex + 3);\r\n            }\r\n            startIndex += 4;\r\n        }\r\n    }\r\n}\r\n"],"names":["CreateBoxVertexData","options","indices","normals","uvs","positions","width","size","height","depth","wrap","topBaseAt","bottomBaseAt","topIndex","bottomIndex","basePositions","topFaceBase","bottomFaceBase","topFaceOrder","bottomFaceOrder","unshift","pop","flat","concat","push","scaleArray","reduce","accumulator","currentValue","currentIndex","sideOrientation","faceUV","Array","faceColors","colors","f","undefined","index","z","w","x","y","c","r","g","b","a","frontUVs","backUVs","vertexData","totalColors","CreateBox","name","scene","box","_originalBuilderSideOrientation","applyToMesh","updatable","BoxBuilder","CreateCapsuleVertexData","subdivisions","tessellation","radius","capSubdivisions","Math","max","capDetail","radialSegments","heightSegments","radiusTop","radiusBottom","heightMinusCaps","thetaLength","PI","capsTopSegments","topCapSubdivisions","capsBottomSegments","bottomCapSubdivisions","alpha","acos","vertices","indexArray","halfHeight","pi2","normal","vertex","cosAlpha","cos","sinAlpha","sin","coneLength","subtract","length","vl","v","indexRow","cosA","sinA","_radius","u","theta","sinTheta","cosTheta","set","coneHeight","slope","normalize","i1","i2","i3","i4","reverse","orientation","equals","m","clone","scale","cross","toQuaternion","toRotationMatrix","i","vDat","CreateCapsule","capsule","CapsuleBuilder","CreateCylinderVertexData","diameterTop","diameter","diameterBottom","hasRings","enclose","cap","arc","surfaceNb","angleStep","angle","h","tan","ringVertex","ringNormal","ringFirstVertex","ringFirstNormal","quadNormal","Y","j","ringIdx","s","cs","sqrt","copyFrom","e","i0","createCylinderCap","isTop","circleVector","vbase","offset","center","textureScale","textureCoordinate","CreateCylinder","cylinder","CylinderBuilder","xpAxis","xnAxis","ypAxis","ynAxis","zpAxis","znAxis","DecalVertex","constructor","position","uv","vertexIdx","vertexIdxForBones","localPositionOverride","localNormalOverride","matrixIndicesOverride","matrixWeightsOverride","this","slice","CreateDecal","sourceMesh","hasSkeleton","skeleton","useLocalComputation","localMode","meshHasOverridenMaterial","overrideMaterialSideOrientation","getIndices","getPositionData","getVerticesData","getNormalsData","localPositions","localNormals","matIndices","matWeights","matIndicesExtra","matWeightsExtra","target","camera","getScene","activeCamera","cameraWorldTarget","getWorldMatrix","globalPosition","yaw","atan2","len","pitch","decalWorldMatrix","multiply","inverseDecalWorldMatrix","transformMatrix","matricesIndices","matricesWeights","matricesIndicesExtra","matricesWeightsExtra","currentVertexDataIndex","extractDecalVector3","indexId","result","vertexId","captureUVS","emptyArray","clip","axis","clipSize","abs","indexOf","arr","val","start","num","clipVertices","v0","v1","clipFactor","weights","mat0Index","v0Indices","v0Weights","mat1Index","v1Indices","v1Weights","idx","ind","sumw","v0LocalPositionX","v0LocalPositionY","v0LocalPositionZ","v1LocalPositionX","v1LocalPositionY","v1LocalPositionZ","v0LocalNormalX","v0LocalNormalY","v0LocalNormalZ","interpNormalX","interpNormalY","interpNormalZ","norm","clipResult","total","nV1","nV2","nV3","nV4","v1Out","v2Out","v3Out","oneFaceVertices","faceVertices","cullBackFaces","vIndex","toArray","decal","parent","rotation","computeWorldMatrix","refreshBoundingInfo","DecalBuilder","CreateDiscVertexData","step","t","vertexNb","CreateDisc","disc","DiscBuilder","CreateGeodesic","floor","n","temp","primTri","build","geoOptions","custom","sizeX","sizeY","sizeZ","CreateGoldbergVertexData","goldbergData","minX","Infinity","maxX","minY","maxY","min","face","verts","ba","ca","pdata","vCoord","CreateGoldberg","geodesicData","toGoldbergPolyhedronData","goldberg","nbSharedFaces","sharedNodes","nbUnsharedFaces","poleNodes","adjacentFaces","nbFaces","nbFacesAtPole","faceCenters","faceXaxis","faceYaxis","faceZaxis","CreateIcoSphereVertexData","radiusX","radiusY","radiusZ","icoVertices","ico_indices","vertices_unalias_id","ico_vertexuv","island","current_indice","face_vertex_pos","face_vertex_uv","v012","v_id","copyFromFloats","interp_vertex","c1","c2","pos_x0","pos_x1","pos_interp","vertex_normal","centroid_x0","centroid_x1","uv_x0","uv_x1","uv_interp","CreateIcoSphere","sphere","IcoSphereBuilder","CreateLathe","closed","shape","paths","invertUV","p","rotated","path","pathArray","closeArray","LatheBuilder","CreatePlaneVertexData","halfWidth","CreatePlane","plane","sourcePlane","translate","d","setDirection","PlaneBuilder","CreatePolygonVertexData","polygon","fUV","fColors","wrp","startIndex","disp","distX","distZ","dist","totalLen","cumulate","CreatePolygon","earcutInjection","earcut","holes","smoothingThreshold","contours","hole","equalsWithEpsilon","polygonTriangulation","hNb","hPoint","addHole","ExtrudePolygon","PolygonBuilder","CreatePolyhedronVertexData","polyhedra","type","data","nbfaces","faceIdx","indexes","ang","tmp","fl","CreatePolyhedron","polyhedron","PolyhedronBuilder","CreateTiledBoxVertexData","flipTile","pattern","tileWidth","tileSize","tileHeight","alignH","alignHorizontal","alignV","alignVertical","halfDepth","faceVertexData","baseAlignV","facePositions","faceNormals","newFaceUV","lu","li","map","vec0","mtrx0","entry","add","vec2","mtrx2","mtrx3","vec4","mtrx4","mtrx5","CreateTiledBox","TiledBoxBuilder","CreateTiledPlaneVertexData","tilesX","offsetX","tilesY","offsetY","adjustX","adjustY","startX","startY","endX","endY","uvBase","partialBottomRow","partialTopRow","partialLeftCol","partialRightCol","uvPart","uvBaseBR","uvBaseTR","uvBaseLC","uvBaseRC","CreateTiledPlane","TiledPlaneBuilder","CreateTorusVertexData","thickness","stride","outerAngle","transform","innerAngle","dx","dy","nextI","nextJ","CreateTorus","torus","TorusBuilder","CreateTorusKnotVertexData","tube","tubularSegments","q","getPos","cu","su","quOverP","tx","ty","tz","p1","p2","tang","bitan","cx","cy","jNext","CreateTorusKnot","torusKnot","TorusKnotBuilder","CreateTube","instance","_creationDataStorage","radiusFunction","tubePathArray","path3D","circlePaths","tangents","getTangents","getNormals","distances","getDistances","radiusFunctionFinal","circlePath","rad","rotationMatrix","scaleInPlace","addInPlace","capPath","nbPoints","pathIndex","pointCap","storage","update","closePath","TubeBuilder","_IsoVector","rotate60About","other","rotateNeg60About","rotate120","rotateNeg120","toCartesianOrigin","origin","isoGridSize","point","static","_PrimaryIsoTriangle","cartesian","closestTo","innerFacets","isoVecsABOB","isoVecsOBOA","isoVecsBAOA","vertexTypes","IDATA","PolyhedronData","setIndices","indexCount","vecToidx","fr","rot","O","A","B","m1","n1","oVec","Zero","aVec","bVec","oaVec","abVec","obVec","idxR","isoId","isoIdR","vDist","vertByDist","matchIdx","edgematch","calcCoeffs","thirdR3","LSQD","coau","cobu","coav","cobv","createInnerFacets","edgeVecsABOB","prev","next","pointR","prevR","nextR","maxPoint","maxPrev","maxLeftPrev","mapABOBtoOBOA","mapABOBtoBAOA","MapToFace","faceNb","F","oidx","aidx","bidx","OA","OB","mapped","tempVec","ratio","sort","distFrom","vert","primVert","distFromO","distFromA","distFromB","vertData","closest","category","GeodesicData","innerToData","el","mapABOBtoDATA","mapOBOAtoDATA","mapBAOAtoDATA","orderData","nearTo","close","near","nearIndex","setOrder","faces","adjVerts","dualFaces","splice","goldbergPolyhedronData","verticesNb","cz","forEach","parsedMesh","GoldbergMesh","Parse","relatedGoldbergFace","poleOrShared","fromPole","_changeGoldbergFaceColors","colorRange","col","newCols","setGoldbergFaceColors","setVerticesData","updateGoldbergFaceColors","updateVerticesData","_changeGoldbergFaceUVs","uvRange","points5","points6","setGoldbergFaceUVs","newUVs","updateGoldbergFaceUVs","placeOnGoldbergFaceAt","mesh","serialize","serializationObject","super","color","asArray","vector","MeshBuilder","CreateSphere","CreateRibbon","CreateLineSystem","CreateLines","CreateDashedLines","ExtrudeShape","ExtrudeShapeCustom","CreateGround","CreateTiledGround","CreateGroundFromHeightMap","IndexedVector2","original","PolygonPoints","elements","originalPoints","newPoint","computeBounds","lmin","lmax","Polygon","xmin","ymin","xmax","ymax","numberOfSides","increment","input","floats","split","parseFloat","filter","isNaN","PolygonMeshBuilder","points","_points","_outlinepoints","_holes","_epoints","_eholes","bjsEarcut","_name","_scene","getPoints","_addToepoint","holepoints","buildVertexData","bounds","res","positionscount","totalCount","_addSide","flip","ulength","p0","vc","vp","vn","vc_norm","normalizeToNew","vp_norm","vn_norm","dotp","dotn"],"sourceRoot":""}