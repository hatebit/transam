{"version":3,"file":"js/556.babylonBundle.js","mappings":"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","sources":["webpack://trans-america/./src/scenes/car.ts"],"sourcesContent":["import {Mesh, StandardMaterial} from \"@babylonjs/core\";\nimport {Color3, Quaternion, Vector3} from \"@babylonjs/core/Maths/math\";\nimport {MeshBuilder} from \"@babylonjs/core/Meshes/meshBuilder\";\nimport {Scene} from \"@babylonjs/core/scene\";\n\nexport class Car {\n    ZERO_QUATERNION = new Quaternion();\n\n    FRONT_LEFT = 0;\n    FRONT_RIGHT = 1;\n    BACK_LEFT = 2;\n    BACK_RIGHT = 3;\n\n    chassisWidth = 1.8;\n    chassisHeight = .6;\n    chassisLength = 4;\n    massVehicle = 200;\n\n\n    wheelAxisPositionBack = -1;\n    wheelRadiusBack = .4;\n    wheelWidthBack = .3;\n    wheelHalfTrackBack = 1;\n    wheelAxisHeightBack = 0.4;\n\n    wheelAxisFrontPosition = 1.0;\n    wheelHalfTrackFront = 1;\n    wheelAxisHeightFront = 0.4;\n    wheelRadiusFront = .4;\n    wheelWidthFront = .3;\n\n    friction = 5;\n    suspension = {\n        stiffness: 10,\n        damping: 0.3,\n        compression: 4.4,\n        restLength: 0.6\n    }\n\n    rollInfluence = 0.0;\n\n    wheelDirectionCS0: number | undefined;\n    wheelAxleCS: number | undefined;\n\n    steeringIncrement = .01;\n    steeringClamp = 0.2;\n    maxEngineForce = 500;\n    maxBreakingForce = 10;\n    incEngine = 10.0;\n\n    vehicleSteering = 0;\n    engineForce = 0;\n    breakingForce = 0;\n\n    private scene: Scene;\n\n    greenMaterial: StandardMaterial;\n    blackMaterial: StandardMaterial;\n\n\n    tuning: any;\n    vehicle: any;\n    wheelMeshes: Mesh[] = [];\n    chassisMesh: Mesh;\n\n\n    vehicleReady = false;\n    \n    ammoModule: any;\n    body: any;\n\n    constructor(pos: Vector3, scene: Scene, ammoModule: any) {\n        this.greenMaterial = new StandardMaterial(\"GreenMaterial\", scene);\n        this.greenMaterial.diffuseColor = new Color3(0.1, 0.8, 0.5);\n        this.greenMaterial.emissiveColor = new Color3(0.1, 0.8, 0.5);\n\n        this.blackMaterial = new StandardMaterial(\"BlackMaterial\", scene);\n        this.blackMaterial.diffuseColor = new Color3(0.1, 0.1, 0.1);\n        this.blackMaterial.emissiveColor = new Color3(0.1, 0.1, 0.1);\n\n        this.scene = scene;\n        //Going Native\n        const physicsWorld = scene.getPhysicsEngine()?.getPhysicsPlugin().world;\n\n        this.wheelDirectionCS0 = new ammoModule.btVector3(0, -1, 0);\n        this.wheelAxleCS = new ammoModule.btVector3(-1, 0, 0);\n\n        const geometry = new ammoModule.btBoxShape(new ammoModule.btVector3(\n            this.chassisWidth * .5,\n            this.chassisHeight * .5,\n            this.chassisLength * .5));\n        const transform = new ammoModule.btTransform();\n        transform.setIdentity();\n        transform.setOrigin(new ammoModule.btVector3(0, 5, 0));\n        transform.setRotation(new ammoModule.btQuaternion(\n            this.ZERO_QUATERNION.x,\n            this.ZERO_QUATERNION.y,\n            this.ZERO_QUATERNION.z,\n            this.ZERO_QUATERNION.w));\n        const motionState = new ammoModule.btDefaultMotionState(transform);\n        const localInertia = new ammoModule.btVector3(0, 0, 0);\n        geometry.calculateLocalInertia(this.massVehicle, localInertia);\n\n\n        this.chassisMesh = this.createChassisMesh(this.chassisWidth, this.chassisHeight, this.chassisLength);\n\n\n        const massOffset = new ammoModule.btVector3(0, 0.4, 0);\n        const transform2 = new ammoModule.btTransform();\n        transform2.setIdentity();\n        transform2.setOrigin(massOffset);\n        const compound = new ammoModule.btCompoundShape();\n        compound.addChildShape(transform2, geometry);\n\n        const body = new ammoModule.btRigidBody(new ammoModule.btRigidBodyConstructionInfo(this.massVehicle, motionState, compound, localInertia));\n        body.setActivationState(4);\n\n        physicsWorld.addRigidBody(body);\n\n\n        this.tuning = new ammoModule.btVehicleTuning();\n        const rayCaster = new ammoModule.btDefaultVehicleRaycaster(physicsWorld);\n        this.vehicle = new ammoModule.btRaycastVehicle(this.tuning, body, rayCaster);\n        this.vehicle.setCoordinateSystem(0, 1, 2);\n        physicsWorld.addAction(this.vehicle);\n\n        const trans = this.vehicle.getChassisWorldTransform();\n\n        this.addWheel(true,\n            new ammoModule.btVector3(this.wheelHalfTrackFront, this.wheelAxisHeightFront, this.wheelAxisFrontPosition),\n            this.wheelRadiusFront, this.wheelWidthFront, this.FRONT_LEFT);\n        this.addWheel(true,\n            new ammoModule.btVector3(-this.wheelHalfTrackFront, this.wheelAxisHeightFront, this.wheelAxisFrontPosition),\n            this.wheelRadiusFront, this.wheelWidthFront, this.FRONT_RIGHT);\n        this.addWheel(false,\n            new ammoModule.btVector3(-this.wheelHalfTrackBack, this.wheelAxisHeightBack, this.wheelAxisPositionBack),\n            this.wheelRadiusBack, this.wheelWidthBack, this.BACK_LEFT);\n        this.addWheel(false,\n            new ammoModule.btVector3(this.wheelHalfTrackBack, this.wheelAxisHeightBack, this.wheelAxisPositionBack),\n            this.wheelRadiusBack, this.wheelWidthBack, this.BACK_RIGHT);\n\n        this.vehicleReady = true;\n        \n        this.ammoModule = ammoModule;\n        this.body = body;\n    }\n    \n    public reset() {\n        const origin = new this.ammoModule.btVector3(0, 5, 0);\n        const transform = new this.ammoModule.btTransform();\n        transform.setOrigin(origin);\n        transform.setRotation(new this.ammoModule.btQuaternion(\n            this.ZERO_QUATERNION.x,\n            this.ZERO_QUATERNION.y,\n            this.ZERO_QUATERNION.z,\n            this.ZERO_QUATERNION.w));\n\n        this.body.setWorldTransform(transform);\n    }\n\n    private createChassisMesh(w: number, l: number, h: number): Mesh {\n        const mesh = MeshBuilder.CreateBox(\"box\", {width: w, depth: h, height: l}, this.scene);\n        mesh.rotationQuaternion = new Quaternion();\n        mesh.material = this.greenMaterial;\n        return mesh;\n    }\n\n    private addWheel(isFront: boolean, pos: Vector3, radius: number, width: number, index: number) {\n\n        const wheelInfo = this.vehicle.addWheel(\n            pos,\n            this.wheelDirectionCS0,\n            this.wheelAxleCS,\n            this.suspension.restLength,\n            radius,\n            this.tuning,\n            isFront);\n\n        wheelInfo.set_m_suspensionStiffness(this.suspension.stiffness);\n        wheelInfo.set_m_wheelsDampingRelaxation(this.suspension.damping);\n        wheelInfo.set_m_wheelsDampingCompression(this.suspension.compression);\n        wheelInfo.set_m_maxSuspensionForce(600000);\n        wheelInfo.set_m_frictionSlip(40);\n        wheelInfo.set_m_rollInfluence(this.rollInfluence);\n\n        this.wheelMeshes[index] = this.createWheelMesh(radius, width);\n    }\n\n    private createWheelMesh(radius: number, width: number) {\n        //var mesh = new BABYLON.MeshBuilder.CreateBox(\"wheel\", {width:.82, height:.82, depth:.82}, scene);\n        const mesh = MeshBuilder.CreateCylinder(\"Wheel\", {\n            diameter: 1, height: 0.5, tessellation: 6\n        }, this.scene);\n        mesh.rotationQuaternion = new Quaternion();\n        mesh.material = this.blackMaterial;\n        return mesh;\n    }\n}"],"names":["Car","constructor","pos","scene","ammoModule","ZERO_QUATERNION","FRONT_LEFT","FRONT_RIGHT","BACK_LEFT","BACK_RIGHT","chassisWidth","chassisHeight","chassisLength","massVehicle","wheelAxisPositionBack","wheelRadiusBack","wheelWidthBack","wheelHalfTrackBack","wheelAxisHeightBack","wheelAxisFrontPosition","wheelHalfTrackFront","wheelAxisHeightFront","wheelRadiusFront","wheelWidthFront","friction","suspension","stiffness","damping","compression","restLength","rollInfluence","steeringIncrement","steeringClamp","maxEngineForce","maxBreakingForce","incEngine","vehicleSteering","engineForce","breakingForce","wheelMeshes","vehicleReady","this","greenMaterial","diffuseColor","emissiveColor","blackMaterial","physicsWorld","getPhysicsEngine","getPhysicsPlugin","world","wheelDirectionCS0","btVector3","wheelAxleCS","geometry","btBoxShape","transform","btTransform","setIdentity","setOrigin","setRotation","btQuaternion","x","y","z","w","motionState","btDefaultMotionState","localInertia","calculateLocalInertia","chassisMesh","createChassisMesh","massOffset","transform2","compound","btCompoundShape","addChildShape","body","btRigidBody","btRigidBodyConstructionInfo","setActivationState","addRigidBody","tuning","btVehicleTuning","rayCaster","btDefaultVehicleRaycaster","vehicle","btRaycastVehicle","setCoordinateSystem","addAction","getChassisWorldTransform","addWheel","reset","origin","setWorldTransform","l","h","mesh","CreateBox","width","depth","height","rotationQuaternion","material","isFront","radius","index","wheelInfo","set_m_suspensionStiffness","set_m_wheelsDampingRelaxation","set_m_wheelsDampingCompression","set_m_maxSuspensionForce","set_m_frictionSlip","set_m_rollInfluence","createWheelMesh","CreateCylinder","diameter","tessellation"],"sourceRoot":""}