{"version":3,"file":"js/11.babylonBundle.js","mappings":"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","sources":["webpack://trans-america/./assets/concrete.png","webpack://trans-america/./src/scenes/boxes.ts","webpack://trans-america/./assets/sand.jpg","webpack://trans-america/./src/scenes/world.ts"],"sourcesContent":["export default __webpack_public_path__ + \"03713868bab7dd2e96995060bf2ae0f5.png\";","import { Material } from \"@babylonjs/core/Materials/material\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\nimport { Color3, Vector3 } from \"@babylonjs/core/Maths/math\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\";\nimport { PhysicsImpostor } from \"@babylonjs/core/Physics/physicsImpostor\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport {Texture} from \"@babylonjs/core/Materials/Textures/texture\";\n\nimport concreteTextureUrl from \"../../assets/concrete.png\";\n\nexport class Boxes {\n    blueMaterial: StandardMaterial;\n    concreteMaterial: StandardMaterial;\n    scene: Scene;\n\n    constructor(scene: Scene) {\n        this.scene = scene;\n\n        this.blueMaterial = new StandardMaterial(\"BlueMaterial\", scene);\n        this.blueMaterial.diffuseColor = new Color3(0.5,0.4,0.8);\n        this.blueMaterial.emissiveColor = new Color3(0.5,0.4,0.8);\n        \n        this.concreteMaterial = new StandardMaterial(\"concrete material\", scene);\n        this.concreteMaterial.diffuseTexture = new Texture(concreteTextureUrl, scene);\n    }\n\n    public baseBoxes() : void {\n        this.createBox(new Vector3(4,1,12),new Vector3(0,0,25),new Vector3(-Math.PI/8,0,0),0);\n        this.createBox(new Vector3(4,1,12),new Vector3(25,0,0),new Vector3(-Math.PI/8,Math.PI/2,0),0);\n        this.createBox(new Vector3(4,1,12),new Vector3(0,0,-25),new Vector3(Math.PI/8,0,0),0);\n        this.createBox(new Vector3(4,1,12),new Vector3(-25,0,0),new Vector3(Math.PI/8,Math.PI/2,0),0);\n    }\n\n    public randomBoxes() : void {\n        const s = new Vector3();\n        const p = new Vector3();\n        const r = new Vector3();\n        for(let i=0;i<20;i++){\n            const m = Math.random()*300-150+5;\n            const m3 = Math.random()*300-150+5;\n            const m2 = Math.random()*10;\n            s.set(m2,m2,m2);\n            p.set(m3,0,m);\n            r.set(m,m,m);\n            this.createBox(s,p,r,0);\n        }\n    \n        for(let i=0;i<30;i++){\n            const m = Math.random()*300-150+5;\n            const m3 = Math.random()*300-150+5;\n            const m2 = Math.random()*3;\n            s.set(m2,m2,m2);\n            p.set(m3,0,m);\n            r.set(m,m,m);\n            this.createBox(s,p,r,5);\n        }\n    }\n\n    private createBox(size: Vector3, position: Vector3, rotation: Vector3, mass: number) : Mesh {\n        const box = MeshBuilder.CreateBox(\"box\", { width: size.x, depth: size.z, height: size.y }, this.scene);\n        box.position.set(position.x,position.y,position.z);\n        box.rotation.set(rotation.x,rotation.y,rotation.z);\n        if(!mass){\n            mass = 0;\n            box.material = this.concreteMaterial\n        } else {\n            box.position.y += 5;\n            box.material = this.blueMaterial;\n    \n        }\n        box.physicsImpostor = new PhysicsImpostor(box, PhysicsImpostor.BoxImpostor, { mass: mass, friction: 0.5, restitution: 0.7 }, this.scene);\n        return box;\n    }\n    \n    public cellBoxes(cellSize: number, cell: Mesh) : void {\n        const halfCellSize = cellSize/2;\n        const s = new Vector3();\n        const p = new Vector3();\n        const r = new Vector3();\n        for(let i=0;i<20;i++){\n            const m = Math.random()*cellSize-halfCellSize;\n            const m3 = Math.random()*cellSize-halfCellSize;\n            const m2 = Math.random()*10;\n            s.set(m2,m2,m2);\n            p.set(m3,0,m);\n            r.set(m,m,m);\n            const box = this.createBox(s,p,r,0);\n            box.parent = cell;\n        }\n    }\n\n    private createCellBox(size: Vector3, position: Vector3, rotation: Vector3, mass: number) : Mesh {\n        const box = MeshBuilder.CreateBox(\"box\", { width: size.x, depth: size.z, height: size.y });\n        box.position.set(position.x,position.y,position.z);\n        box.rotation.set(rotation.x,rotation.y,rotation.z);\n        if(!mass){\n            mass = 0;\n            box.material = this.concreteMaterial\n        } else {\n            box.position.y += 5;\n            box.material = this.blueMaterial;\n\n        }\n        box.physicsImpostor = new PhysicsImpostor(box, PhysicsImpostor.BoxImpostor, { mass: mass, friction: 0.5, restitution: 0.7 }, this.scene);\n        return box;\n    }\n\n}\n\n","export default __webpack_public_path__ + \"c8f55e9ef9e4d3c0a223a3adaad7ad23.jpg\";","import {Scene} from \"@babylonjs/core/scene\";\nimport {MeshBuilder} from \"@babylonjs/core/Meshes/meshBuilder\";\nimport {PhysicsImpostor} from \"@babylonjs/core/Physics/physicsImpostor\";\nimport * as GRID from \"@babylonjs/materials/grid\";\nimport {GridMaterial} from \"@babylonjs/materials/grid\";\nimport {AssetsManager, GroundMesh} from \"@babylonjs/core\";\n\nimport sandTextureUrl from \"../../assets/sand.jpg\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\nimport {StandardMaterial} from \"@babylonjs/core/Materials/standardMaterial\";\nimport {Boxes} from \"./boxes\";\nimport {Color3, Color4} from \"@babylonjs/core/Maths/math\";\n\nexport const DEFAULT_CELL_SIZE = 100;\n\nexport class WorldMap {\n    //private material: GridMaterial;\n    private material: StandardMaterial;\n    \n    private debugMaterial: StandardMaterial;\n\n    private cells = new Map();\n    private scene: Scene;\n\n    constructor(scene: Scene) {\n        this.scene = scene;\n\n        //this.material = new GRID.GridMaterial(\"groundMaterial\", scene);\n        this.material = new StandardMaterial(\"ground material\", scene);\n        const texture = new Texture(sandTextureUrl, scene);\n        this.material.diffuseTexture = texture;\n        texture.uScale = 10;\n        texture.vScale = 10;\n\n        scene.fogMode = Scene.FOGMODE_LINEAR;\n        scene.fogStart = 20.0;\n        scene.fogEnd = 120.0;\n        scene.fogColor = new Color3(0.9, 0.9, 0.85);\n        scene.fogDensity = 0.03;\n        scene.clearColor = new Color4(0.9, 0.9, 0.85, 1.0);\n\n\n\n        this.debugMaterial = new StandardMaterial(\"BlueMaterial\", scene);\n        this.debugMaterial.diffuseColor = new Color3(0.5,0.4,0.8);\n        this.debugMaterial.emissiveColor = new Color3(0.5,0.4,0.8);\n\n\n    }\n\n    /**\n     * Update the world map based on the player's position\n     * @param x - player's x position\n     * @param z - player's z position\n     * @returns true if the world map was fully updated, false if needs more updates in the next cycle\n     */\n    public update(x: number, z: number): boolean {\n        const indexes = [\n            [x + 1, z + 1],\n            [x + 1, z],\n            [x + 1, z - 1],\n            [x, z + 1],\n            [x, z],\n            [x, z - 1],\n            [x - 1, z + 1],\n            [x - 1, z],\n            [x - 1, z - 1],\n        ];\n        // const indexes = [ [x, z]];\n        for (const index of indexes) {\n            const xx = index[0]\n            const zz = index[1]\n            if (!this.cells.has(`${xx},${zz}`)) {\n                const cell  = this.createCell(this.scene, xx, zz);\n                this.cells.set(`${xx},${zz}`, cell);\n                console.log(`Created cell ${xx},${zz}`);\n                // only create one cell per update cycle\n                // remaining cells will be created in the next cycle\n                return false;\n            }\n        }\n        //console.log(this.cells.size);\n        for (const key of this.cells.keys()) {\n            const [xs, zs] = key.split(\",\");\n            const xx = parseInt(xs);\n            const zz = parseInt(zs);\n            if (xx < (x - 1) || xx > (x + 1) || zz < (z - 1) || zz > (z + 1)) {\n            // if (xx != x || zz != z) {\n                const cell = this.cells.get(key);\n                if (cell) {\n                    this.scene.removeMesh(cell);\n                    cell.dispose();\n                    this.cells.delete(key);\n                }\n            }\n        }\n        return true;\n\n    }\n\n    private createCell(scene: Scene, x: number, z: number): GroundMesh {\n        const ground = MeshBuilder.CreateGround(\"ground\", {\n            width: DEFAULT_CELL_SIZE,\n            height: DEFAULT_CELL_SIZE,\n            subdivisions: 2\n        }, scene);\n\n        ground.position.set(x * DEFAULT_CELL_SIZE, 0, z * DEFAULT_CELL_SIZE);\n\n        ground.physicsImpostor = new PhysicsImpostor(ground, PhysicsImpostor.BoxImpostor, {\n            mass: 0,\n            friction: 0.5,\n            restitution: 0.7\n        }, scene);\n        \n        const halfCellSize = DEFAULT_CELL_SIZE/2;\n\n        // START: Dev boxes\n        const box = MeshBuilder.CreateBox(\"box\", { width: 1, depth: 1, height: 4 }, this.scene);\n        box.material = this.debugMaterial;\n        ground.addChild(box);\n        const box0 = MeshBuilder.CreateBox(\"box\", { width: 1, depth: 1, height: 8 }, this.scene);\n        box0.material = this.debugMaterial;\n        box0.position.set(x * DEFAULT_CELL_SIZE + halfCellSize, 4, z * DEFAULT_CELL_SIZE + halfCellSize);\n        ground.addChild(box0);\n        const box1 = MeshBuilder.CreateBox(\"box\", { width: 1, depth: 1, height: 8 }, this.scene);\n        box1.material = this.debugMaterial;\n        box1.position.set(x * DEFAULT_CELL_SIZE - halfCellSize, 4, z * DEFAULT_CELL_SIZE - halfCellSize);\n        ground.addChild(box1);\n        // END: Dev boxes\n        \n        new Boxes(this.scene).cellBoxes(DEFAULT_CELL_SIZE, ground);\n\n        ground.material = this.material;\n\n        return ground;\n    }\n    \n    async getData(): Promise<string> {\n        let fileName = `world/0,0.txt`;\n        try {\n            let response = await fetch(fileName);\n            let data = await response.text();\n            console.log(data);\n            return data;\n        } catch (error) {\n            console.error(error);\n            return \"\";\n        }\n    }\n    \n\n    getDistrict(currX: number, currZ: number): string {\n        let fileName = `file:./world/${currX},${currZ}.txt`;\n        // const assetsManager = new AssetsManager(this.scene);\n        // const myTextFile = assetsManager.addTextFileTask(\"my text file task\", fileName);\n        // assetsManager.load();\n        // assetsManager.onFinish = function (task) {\n        //     console.log(\"task successful\", task);\n        //     console.log(myTextFile.text);\n        //     return myTextFile.text;\n        // }\n        \n        // fs.readFile(fileName, 'utf8', (err, data) => {\n        //         if (err) { \n        //             console.error(err); \n        //             return; \n        //         }\n        //         console.log(data);\n        // });\n        this.getData().then(\n            data => {\n                console.log(\"> \" + data);\n            }\n        );\n        \n        if (currX == 0 && currZ == 0) {\n            return \"Origin\";\n        }\n        if (currX > 3 || currZ > 3 || currX < -3 || currZ < -3) {\n            return \"You are lost!\";\n        }\n        return \"Somewhere\";\n    }\n}\n"],"names":["Boxes","constructor","scene","this","blueMaterial","diffuseColor","emissiveColor","concreteMaterial","diffuseTexture","concrete","baseBoxes","createBox","Math","PI","randomBoxes","s","p","r","i","m","random","m3","m2","set","size","position","rotation","mass","box","CreateBox","width","x","depth","z","height","y","material","physicsImpostor","BoxImpostor","friction","restitution","cellBoxes","cellSize","cell","halfCellSize","parent","createCellBox","DEFAULT_CELL_SIZE","WorldMap","cells","Map","texture","sand","uScale","vScale","fogMode","FOGMODE_LINEAR","fogStart","fogEnd","fogColor","fogDensity","clearColor","debugMaterial","update","indexes","index","xx","zz","has","createCell","console","log","key","keys","xs","zs","split","parseInt","get","removeMesh","dispose","delete","ground","CreateGround","subdivisions","addChild","box0","box1","getData","response","fetch","data","text","error","getDistrict","currX","currZ","then"],"sourceRoot":""}